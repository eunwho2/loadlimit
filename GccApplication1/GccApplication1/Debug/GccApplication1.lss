
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001cb0  00001d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  00800128  00800128  00001d6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000269d  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ffa  00000000  00000000  00004661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce6  00000000  00000000  0000565b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  00007344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d5  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b82  00000000  00000000  000082c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00009e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__vector_10>
      2a:	00 00       	nop
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
      54:	81 c2       	rjmp	.+1282   	; 0x558 <__vector_21>
      56:	00 00       	nop
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_30>
      7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb 00       	.word	0x00fb	; ????
      8e:	00 01       	movw	r0, r0
      90:	05 01       	movw	r0, r10
      92:	0a 01       	movw	r0, r20
      94:	0f 01       	movw	r0, r30
      96:	14 01       	movw	r2, r8
      98:	19 01       	movw	r2, r18
      9a:	27 01       	movw	r4, r14
      9c:	1e 01       	movw	r2, r28
      9e:	23 01       	movw	r4, r6
      a0:	aa 08       	sbc	r10, r10
      a2:	d2 08       	sbc	r13, r2
      a4:	df 08       	sbc	r13, r15
      a6:	ec 08       	sbc	r14, r12
      a8:	01 09       	sbc	r16, r1
      aa:	0b 09       	sbc	r16, r11
      ac:	15 09       	sbc	r17, r5
      ae:	1f 09       	sbc	r17, r15
      b0:	5f 09       	sbc	r21, r15
      b2:	73 09       	sbc	r23, r3
      b4:	87 09       	sbc	r24, r7
      b6:	98 09       	sbc	r25, r8
      b8:	aa 09       	sbc	r26, r10
      ba:	b9 09       	sbc	r27, r9
      bc:	cd 09       	sbc	r28, r13
      be:	de 09       	sbc	r29, r14

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e1       	ldi	r29, 0x10	; 16
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 eb       	ldi	r30, 0xB0	; 176
      d4:	fc e1       	ldi	r31, 0x1C	; 28
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a5 3d       	cpi	r26, 0xD5	; 213
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	70 d7       	rcall	.+3808   	; 0xfd8 <main>
      f8:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <_exit>

000000fc <__bad_interrupt>:
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <at93c46_ewen>:
#include "extern.h"

#define DELAY_SPI	10
void at93c46_ewen(void)
{
	cbi(PORTB,CS);
      fe:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	8f b9       	out	0x0f, r24	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	8f e3       	ldi	r24, 0x3F	; 63
     106:	9c e9       	ldi	r25, 0x9C	; 156
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <at93c46_ewen+0xa>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <at93c46_ewen+0x10>
     10e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     110:	80 e6       	ldi	r24, 0x60	; 96
     112:	8f b9       	out	0x0f, r24	; 15
     114:	8f e3       	ldi	r24, 0x3F	; 63
     116:	9c e9       	ldi	r25, 0x9C	; 156
     118:	01 97       	sbiw	r24, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <at93c46_ewen+0x1a>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <at93c46_ewen+0x20>
     11e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     120:	c0 9a       	sbi	0x18, 0	; 24
     122:	08 95       	ret

00000124 <at93c46_ewds>:
}

void at93c46_ewds(void)
{
	cbi(PORTB,CS);
     124:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	8f b9       	out	0x0f, r24	; 15
     12a:	8f e3       	ldi	r24, 0x3F	; 63
     12c:	9c e9       	ldi	r25, 0x9C	; 156
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <at93c46_ewds+0xa>
     132:	00 c0       	rjmp	.+0      	; 0x134 <at93c46_ewds+0x10>
     134:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     136:	80 e6       	ldi	r24, 0x60	; 96
     138:	8f b9       	out	0x0f, r24	; 15
     13a:	8f e3       	ldi	r24, 0x3F	; 63
     13c:	9c e9       	ldi	r25, 0x9C	; 156
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <at93c46_ewds+0x1a>
     142:	00 c0       	rjmp	.+0      	; 0x144 <at93c46_ewds+0x20>
     144:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     146:	c0 9a       	sbi	0x18, 0	; 24
     148:	08 95       	ret

0000014a <at93c46_read>:
}
uint8_t at93c46_read(uint8_t addr)
{
	uint8_t high, low;
	
	cbi(PORTB, CS);
     14a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x03;
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	9f b9       	out	0x0f, r25	; 15
     150:	ef e3       	ldi	r30, 0x3F	; 63
     152:	fc e9       	ldi	r31, 0x9C	; 156
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <at93c46_read+0xa>
     158:	00 c0       	rjmp	.+0      	; 0x15a <at93c46_read+0x10>
     15a:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr;
     15c:	8f b9       	out	0x0f, r24	; 15
     15e:	8f e3       	ldi	r24, 0x3F	; 63
     160:	9c e9       	ldi	r25, 0x9C	; 156
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <at93c46_read+0x18>
     166:	00 c0       	rjmp	.+0      	; 0x168 <at93c46_read+0x1e>
     168:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x00;
     16a:	1f b8       	out	0x0f, r1	; 15
     16c:	ef e3       	ldi	r30, 0x3F	; 63
     16e:	fc e9       	ldi	r31, 0x9C	; 156
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <at93c46_read+0x26>
     174:	00 c0       	rjmp	.+0      	; 0x176 <at93c46_read+0x2c>
     176:	00 00       	nop
	_delay_ms(DELAY_SPI);
	high = SPDR;
     178:	2f b1       	in	r18, 0x0f	; 15
	SPDR = 0x00;
     17a:	1f b8       	out	0x0f, r1	; 15
     17c:	8f e3       	ldi	r24, 0x3F	; 63
     17e:	9c e9       	ldi	r25, 0x9C	; 156
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <at93c46_read+0x36>
     184:	00 c0       	rjmp	.+0      	; 0x186 <at93c46_read+0x3c>
     186:	00 00       	nop
	_delay_ms(DELAY_SPI);
	low = SPDR;
     188:	9f b1       	in	r25, 0x0f	; 15
	sbi(PORTB, CS);
     18a:	c0 9a       	sbi	0x18, 0	; 24
	return (high << 1) + (low >> 7);
     18c:	22 0f       	add	r18, r18
     18e:	89 2f       	mov	r24, r25
     190:	88 1f       	adc	r24, r24
     192:	88 27       	eor	r24, r24
     194:	88 1f       	adc	r24, r24
}
     196:	82 0f       	add	r24, r18
     198:	08 95       	ret

0000019a <at93c46_write>:

void at93c46_write(uint8_t addr, uint8_t dat)
{
	cbi(PORTB, CS);
     19a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     19c:	92 e0       	ldi	r25, 0x02	; 2
     19e:	9f b9       	out	0x0f, r25	; 15
     1a0:	ef e3       	ldi	r30, 0x3F	; 63
     1a2:	fc e9       	ldi	r31, 0x9C	; 156
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <at93c46_write+0xa>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <at93c46_write+0x10>
     1aa:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr | 0x80;
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	8f b9       	out	0x0f, r24	; 15
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	9c e9       	ldi	r25, 0x9C	; 156
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <at93c46_write+0x1a>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <at93c46_write+0x20>
     1ba:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = dat;
     1bc:	6f b9       	out	0x0f, r22	; 15
     1be:	ef e3       	ldi	r30, 0x3F	; 63
     1c0:	fc e9       	ldi	r31, 0x9C	; 156
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <at93c46_write+0x28>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <at93c46_write+0x2e>
     1c8:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB, CS);
     1ca:	c0 9a       	sbi	0x18, 0	; 24
     1cc:	8f ed       	ldi	r24, 0xDF	; 223
     1ce:	9e e2       	ldi	r25, 0x2E	; 46
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <at93c46_write+0x36>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <at93c46_write+0x3c>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <saveCode>:
	_delay_ms(3);
}

int16_t saveCode(int codeNo,int16_t codeData)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
     1e4:	eb 01       	movw	r28, r22
	uint8_t tmpSPI1,tmpSPI2;
	uint8_t tmpData1,tmpData2;

	switch(codeNo){
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	91 05       	cpc	r25, r1
     1ea:	88 f5       	brcc	.+98     	; 0x24e <saveCode+0x74>
     1ec:	fc 01       	movw	r30, r24
     1ee:	ea 5b       	subi	r30, 0xBA	; 186
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__tablejump2__>
		case 0: codePoint		= codeData; break;
     1f6:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <codePoint+0x1>
     1fa:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <codePoint>
     1fe:	27 c0       	rjmp	.+78     	; 0x24e <saveCode+0x74>
		case 1: codeFilt		= codeData; break;
     200:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <codeFilt+0x1>
     204:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <codeFilt>
     208:	22 c0       	rjmp	.+68     	; 0x24e <saveCode+0x74>
		case 2: codeDivision	= codeData; break;
     20a:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <codeDivision+0x1>
     20e:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <codeDivision>
     212:	1d c0       	rjmp	.+58     	; 0x24e <saveCode+0x74>
		case 3: codeAutoZero	= codeData; break;
     214:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <codeAutoZero+0x1>
     218:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <codeAutoZero>
     21c:	18 c0       	rjmp	.+48     	; 0x24e <saveCode+0x74>
		case 4: codeAlarm		= codeData; break;
     21e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <codeAlarm+0x1>
     222:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <codeAlarm>
     226:	13 c0       	rjmp	.+38     	; 0x24e <saveCode+0x74>
		case 5: codeOver		= codeData; break;
     228:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <codeOver+0x1>
     22c:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <codeOver>
     230:	0e c0       	rjmp	.+28     	; 0x24e <saveCode+0x74>
		case 6: codeWeight		= codeData; break;
     232:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <codeWeight+0x1>
     236:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <codeWeight>
     23a:	09 c0       	rjmp	.+18     	; 0x24e <saveCode+0x74>
		case 8: codeAdcSpan		= codeData; break;
     23c:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <codeAdcSpan+0x1>
     240:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <codeAdcSpan>
     244:	04 c0       	rjmp	.+8      	; 0x24e <saveCode+0x74>
		case 9: codeAdcZero		= codeData; break;
     246:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <codeAdcZero+0x1>
     24a:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <codeAdcZero>
	
//	initCodeData();
	tmpData1 = (uint8_t)(codeData >> 8 );
	tmpData2 = (uint8_t)(codeData % 256);
	
	at93c46_ewen();	
     24e:	57 df       	rcall	.-338    	; 0xfe <at93c46_ewen>
	at93c46_write(codeNo * 2, tmpData1);
     250:	00 0f       	add	r16, r16
     252:	6d 2f       	mov	r22, r29
     254:	80 2f       	mov	r24, r16
     256:	a1 df       	rcall	.-190    	; 0x19a <at93c46_write>
	at93c46_write(codeNo * 2+1, tmpData2);
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	10 0f       	add	r17, r16
     25c:	be 01       	movw	r22, r28
     25e:	70 78       	andi	r23, 0x80	; 128
     260:	77 23       	and	r23, r23
     262:	2c f4       	brge	.+10     	; 0x26e <saveCode+0x94>
     264:	61 50       	subi	r22, 0x01	; 1
     266:	71 09       	sbc	r23, r1
     268:	7f 6f       	ori	r23, 0xFF	; 255
     26a:	6f 5f       	subi	r22, 0xFF	; 255
     26c:	7f 4f       	sbci	r23, 0xFF	; 255
     26e:	81 2f       	mov	r24, r17
	at93c46_ewds();
     270:	94 df       	rcall	.-216    	; 0x19a <at93c46_write>
     272:	58 df       	rcall	.-336    	; 0x124 <at93c46_ewds>
		
	tmpSPI1 = at93c46_read(codeNo * 2    );
     274:	80 2f       	mov	r24, r16
     276:	69 df       	rcall	.-302    	; 0x14a <at93c46_read>
     278:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     27a:	81 2f       	mov	r24, r17
     27c:	66 df       	rcall	.-308    	; 0x14a <at93c46_read>
     27e:	2c 2f       	mov	r18, r28
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	32 2f       	mov	r19, r18
     284:	22 27       	eor	r18, r18
     286:	a9 01       	movw	r20, r18
}
     288:	48 0f       	add	r20, r24
     28a:	51 1d       	adc	r21, r1
     28c:	ca 01       	movw	r24, r20
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <readCode>:
     298:	cf 93       	push	r28

int16_t readCode(int codeNo)
{
     29a:	df 93       	push	r29
	uint8_t tmpSPI1,tmpSPI2;

	tmpSPI1 = at93c46_read(codeNo * 2    );
     29c:	d8 2f       	mov	r29, r24
     29e:	dd 0f       	add	r29, r29
     2a0:	8d 2f       	mov	r24, r29
     2a2:	53 df       	rcall	.-346    	; 0x14a <at93c46_read>
     2a4:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	8d 0f       	add	r24, r29
     2aa:	4f df       	rcall	.-354    	; 0x14a <at93c46_read>
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     2ac:	2c 2f       	mov	r18, r28
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	32 2f       	mov	r19, r18
     2b2:	22 27       	eor	r18, r18
}
     2b4:	a9 01       	movw	r20, r18
     2b6:	48 0f       	add	r20, r24
     2b8:	51 1d       	adc	r21, r1
     2ba:	ca 01       	movw	r24, r20
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <readRomData>:

int readRomData(void)
{	

	codePoint = readCode(0);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	e8 df       	rcall	.-48     	; 0x298 <readCode>
     2c8:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
     2cc:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     2d0:	03 97       	sbiw	r24, 0x03	; 3
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <readRomData+0x14>
     2d4:	53 c0       	rjmp	.+166    	; 0x37c <readRomData+0xba>
	
	codeFilt		= readCode(1);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	de df       	rcall	.-68     	; 0x298 <readCode>
     2dc:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <codeFilt+0x1>
     2e0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <codeFilt>
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     2e4:	0a 97       	sbiw	r24, 0x0a	; 10
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <readRomData+0x28>
     2e8:	4c c0       	rjmp	.+152    	; 0x382 <readRomData+0xc0>

	codeDivision	= readCode(2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	d4 df       	rcall	.-88     	; 0x298 <readCode>
     2f0:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <codeDivision+0x1>
     2f4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <codeDivision>
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     2f8:	06 97       	sbiw	r24, 0x06	; 6
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <readRomData+0x3c>

	codeAutoZero	= readCode(3);
     2fc:	45 c0       	rjmp	.+138    	; 0x388 <readRomData+0xc6>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	ca df       	rcall	.-108    	; 0x298 <readCode>
     304:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <codeAutoZero+0x1>
     308:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <codeAutoZero>
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     30c:	02 97       	sbiw	r24, 0x02	; 2
     30e:	08 f0       	brcs	.+2      	; 0x312 <readRomData+0x50>

	codeAlarm		= readCode(4);
     310:	3e c0       	rjmp	.+124    	; 0x38e <readRomData+0xcc>
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	c0 df       	rcall	.-128    	; 0x298 <readCode>
     318:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <codeAlarm+0x1>
     31c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <codeAlarm>
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	97 42       	sbci	r25, 0x27	; 39

	codeOver		= readCode(5);
     324:	b8 f5       	brcc	.+110    	; 0x394 <readRomData+0xd2>
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	b6 df       	rcall	.-148    	; 0x298 <readCode>
     32c:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <codeOver+0x1>
     330:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <codeOver>
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     334:	80 31       	cpi	r24, 0x10	; 16
     336:	97 42       	sbci	r25, 0x27	; 39

	codeWeight		= readCode(6);
     338:	80 f5       	brcc	.+96     	; 0x39a <readRomData+0xd8>
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ac df       	rcall	.-168    	; 0x298 <readCode>
     340:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <codeWeight+0x1>
     344:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <codeWeight>
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	97 42       	sbci	r25, 0x27	; 39

	codeAdcSpan	= readCode(8);
     34c:	48 f5       	brcc	.+82     	; 0x3a0 <readRomData+0xde>
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a2 df       	rcall	.-188    	; 0x298 <readCode>
     354:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <codeAdcSpan+0x1>
     358:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <codeAdcSpan>
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     35c:	80 31       	cpi	r24, 0x10	; 16
     35e:	97 42       	sbci	r25, 0x27	; 39

	codeAdcZero	= readCode(9);
     360:	10 f5       	brcc	.+68     	; 0x3a6 <readRomData+0xe4>
     362:	89 e0       	ldi	r24, 0x09	; 9
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	98 df       	rcall	.-208    	; 0x298 <readCode>
     368:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <codeAdcZero+0x1>
     36c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <codeAdcZero>
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     370:	80 31       	cpi	r24, 0x10	; 16
     372:	97 42       	sbci	r25, 0x27	; 39
     374:	d8 f4       	brcc	.+54     	; 0x3ac <readRomData+0xea>
	
	return -1;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	9f ef       	ldi	r25, 0xFF	; 255
     37a:	08 95       	ret

int readRomData(void)
{	

	codePoint = readCode(0);
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     37c:	86 e4       	ldi	r24, 0x46	; 70
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 95       	ret
	
	codeFilt		= readCode(1);
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     382:	87 e4       	ldi	r24, 0x47	; 71
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	08 95       	ret

	codeDivision	= readCode(2);
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     388:	88 e4       	ldi	r24, 0x48	; 72
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	08 95       	ret

	codeAutoZero	= readCode(3);
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     38e:	89 e4       	ldi	r24, 0x49	; 73
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret

	codeAlarm		= readCode(4);
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     394:	8a e4       	ldi	r24, 0x4A	; 74
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret

	codeOver		= readCode(5);
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     39a:	8b e4       	ldi	r24, 0x4B	; 75
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret

	codeWeight		= readCode(6);
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     3a0:	8c e4       	ldi	r24, 0x4C	; 76
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

	codeAdcSpan	= readCode(8);
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     3a6:	8e e4       	ldi	r24, 0x4E	; 78
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret

	codeAdcZero	= readCode(9);
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     3ac:	8f e4       	ldi	r24, 0x4F	; 79
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	
	return -1;
}
     3b0:	08 95       	ret

000003b2 <elaspMsecTime>:
}

uint8_t getCommand(void)
{
	return getButton();
}
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     3c2:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     3c6:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     3ca:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     3ce:	06 17       	cp	r16, r22
     3d0:	17 07       	cpc	r17, r23
     3d2:	28 07       	cpc	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	a8 f4       	brcc	.+42     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3d8:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     3dc:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     3e0:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     3e4:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     3e8:	01 50       	subi	r16, 0x01	; 1
     3ea:	11 09       	sbc	r17, r1
     3ec:	21 09       	sbc	r18, r1
     3ee:	31 09       	sbc	r19, r1
     3f0:	68 01       	movw	r12, r16
     3f2:	79 01       	movw	r14, r18
     3f4:	c6 1a       	sub	r12, r22
     3f6:	d7 0a       	sbc	r13, r23
     3f8:	e8 0a       	sbc	r14, r24
     3fa:	f9 0a       	sbc	r15, r25
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	10 c0       	rjmp	.+32     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     402:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     406:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     40a:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     40e:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     412:	68 01       	movw	r12, r16
     414:	79 01       	movw	r14, r18
     416:	c6 1a       	sub	r12, r22
     418:	d7 0a       	sbc	r13, r23
     41a:	e8 0a       	sbc	r14, r24
     41c:	f9 0a       	sbc	r15, r25
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <__vector_10>:
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0b b6       	in	r0, 0x3b	; 59
     43c:	0f 92       	push	r0
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
     44e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     452:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     456:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     45a:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	a1 1d       	adc	r26, r1
     462:	b1 1d       	adc	r27, r1
     464:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <timerCounter2>
     468:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <timerCounter2+0x1>
     46c:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <timerCounter2+0x2>
     470:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <timerCounter2+0x3>
     474:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <blinkCount.1899>
     478:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <blinkCount.1899+0x1>
     47c:	81 39       	cpi	r24, 0x91	; 145
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	92 07       	cpc	r25, r18
     482:	08 f0       	brcs	.+2      	; 0x486 <__vector_10+0x56>
     484:	50 c0       	rjmp	.+160    	; 0x526 <__vector_10+0xf6>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <blinkCount.1899+0x1>
     48c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <blinkCount.1899>
     490:	89 2b       	or	r24, r25
     492:	39 f4       	brne	.+14     	; 0x4a2 <__vector_10+0x72>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <blinkFlagState.1900>
     49a:	91 11       	cpse	r25, r1
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <blinkFlagState.1900>
     4a2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fndDigitCount.1898>
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	10 f4       	brcc	.+4      	; 0x4ae <__vector_10+0x7e>
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__vector_10+0x80>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fndDigitCount.1898>
     4b4:	e8 2f       	mov	r30, r24
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	e7 55       	subi	r30, 0x57	; 87
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	90 81       	ld	r25, Z
     4be:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <blinkFlagState.1900>
     4c2:	22 23       	and	r18, r18
     4c4:	11 f1       	breq	.+68     	; 0x50a <__vector_10+0xda>
     4c6:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <blinkCmdFlag>
     4ca:	32 2f       	mov	r19, r18
     4cc:	3f 70       	andi	r19, 0x0F	; 15
     4ce:	3f 30       	cpi	r19, 0x0F	; 15
     4d0:	a9 f0       	breq	.+42     	; 0x4fc <__vector_10+0xcc>
     4d2:	81 11       	cpse	r24, r1
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__vector_10+0xac>
     4d6:	20 ff       	sbrs	r18, 0
     4d8:	18 c0       	rjmp	.+48     	; 0x50a <__vector_10+0xda>
     4da:	12 c0       	rjmp	.+36     	; 0x500 <__vector_10+0xd0>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	19 f4       	brne	.+6      	; 0x4e6 <__vector_10+0xb6>
     4e0:	21 ff       	sbrs	r18, 1
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <__vector_10+0xda>
     4e4:	0f c0       	rjmp	.+30     	; 0x504 <__vector_10+0xd4>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <__vector_10+0xc0>
     4ea:	22 ff       	sbrs	r18, 2
     4ec:	0e c0       	rjmp	.+28     	; 0x50a <__vector_10+0xda>
     4ee:	0c c0       	rjmp	.+24     	; 0x508 <__vector_10+0xd8>
     4f0:	83 30       	cpi	r24, 0x03	; 3
     4f2:	59 f4       	brne	.+22     	; 0x50a <__vector_10+0xda>
     4f4:	23 ff       	sbrs	r18, 3
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <__vector_10+0xda>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <__vector_10+0xda>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_10+0xda>
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	03 c0       	rjmp	.+6      	; 0x50a <__vector_10+0xda>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	01 c0       	rjmp	.+2      	; 0x50a <__vector_10+0xda>
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	8b b3       	in	r24, 0x1b	; 27
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	8b bb       	out	0x1b, r24	; 27
     510:	2b b3       	in	r18, 0x1b	; 27
     512:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <fndDigitCount.1898>
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	e0 50       	subi	r30, 0x00	; 0
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	80 81       	ld	r24, Z
     51e:	82 2b       	or	r24, r18
     520:	8b bb       	out	0x1b, r24	; 27
     522:	95 bb       	out	0x15, r25	; 21
     524:	05 c0       	rjmp	.+10     	; 0x530 <__vector_10+0x100>
     526:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <blinkCount.1899+0x1>
     52a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <blinkCount.1899>
     52e:	b2 cf       	rjmp	.-156    	; 0x494 <__vector_10+0x64>
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0b be       	out	0x3b, r0	; 59
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <initADC>:
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	87 b9       	out	0x07, r24	; 7
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	86 b9       	out	0x06, r24	; 6
     556:	08 95       	ret

00000558 <__vector_21>:
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	0b b6       	in	r0, 0x3b	; 59
     564:	0f 92       	push	r0
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	8f 93       	push	r24
     572:	9f 93       	push	r25
     574:	af 93       	push	r26
     576:	bf 93       	push	r27
     578:	ef 93       	push	r30
     57a:	ff 93       	push	r31
     57c:	64 b1       	in	r22, 0x04	; 4
     57e:	85 b1       	in	r24, 0x05	; 5
     580:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <adcRingCount.1909>
     584:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <adcRingCount.1909+0x1>
     588:	fa 01       	movw	r30, r20
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	ea 5b       	subi	r30, 0xBA	; 186
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <adcWeight>
     596:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <adcWeight+0x1>
     59a:	a0 81       	ld	r26, Z
     59c:	b1 81       	ldd	r27, Z+1	; 0x01
     59e:	2a 1b       	sub	r18, r26
     5a0:	3b 0b       	sbc	r19, r27
     5a2:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <adcWeightIn>
     5a6:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     5aa:	b1 83       	std	Z+1, r27	; 0x01
     5ac:	a0 83       	st	Z, r26
     5ae:	83 70       	andi	r24, 0x03	; 3
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	98 2f       	mov	r25, r24
     5b4:	88 27       	eor	r24, r24
     5b6:	86 0f       	add	r24, r22
     5b8:	91 1d       	adc	r25, r1
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <adcWeight+0x1>
     5c2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <adcWeight>
     5c6:	4f 30       	cpi	r20, 0x0F	; 15
     5c8:	51 05       	cpc	r21, r1
     5ca:	1c f4       	brge	.+6      	; 0x5d2 <__vector_21+0x7a>
     5cc:	4f 5f       	subi	r20, 0xFF	; 255
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__vector_21+0x7e>
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <adcRingCount.1909+0x1>
     5da:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <adcRingCount.1909>
     5de:	9c 01       	movw	r18, r24
     5e0:	99 23       	and	r25, r25
     5e2:	14 f4       	brge	.+4      	; 0x5e8 <__vector_21+0x90>
     5e4:	21 5f       	subi	r18, 0xF1	; 241
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	35 95       	asr	r19
     5ea:	27 95       	ror	r18
     5ec:	35 95       	asr	r19
     5ee:	27 95       	ror	r18
     5f0:	35 95       	asr	r19
     5f2:	27 95       	ror	r18
     5f4:	35 95       	asr	r19
     5f6:	27 95       	ror	r18
     5f8:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <adcWeightIn+0x1>
     5fc:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <adcWeightIn>
     600:	36 9a       	sbi	0x06, 6	; 6
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	6f 91       	pop	r22
     610:	5f 91       	pop	r21
     612:	4f 91       	pop	r20
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0b be       	out	0x3b, r0	; 59
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <getButton>:
     626:	86 b3       	in	r24, 0x16	; 22
     628:	8f 60       	ori	r24, 0x0F	; 15
     62a:	8f 3f       	cpi	r24, 0xFF	; 255
     62c:	c1 f0       	breq	.+48     	; 0x65e <getButton+0x38>
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	39 ef       	ldi	r19, 0xF9	; 249
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	21 50       	subi	r18, 0x01	; 1
     636:	30 40       	sbci	r19, 0x00	; 0
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <getButton+0xe>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <getButton+0x18>
     63e:	00 00       	nop
     640:	86 b3       	in	r24, 0x16	; 22
     642:	8f 60       	ori	r24, 0x0F	; 15
     644:	8f 3f       	cpi	r24, 0xFF	; 255
     646:	59 f0       	breq	.+22     	; 0x65e <getButton+0x38>
     648:	86 b3       	in	r24, 0x16	; 22
     64a:	8f 60       	ori	r24, 0x0F	; 15
     64c:	9f ef       	ldi	r25, 0xFF	; 255
     64e:	21 ee       	ldi	r18, 0xE1	; 225
     650:	34 e0       	ldi	r19, 0x04	; 4
     652:	91 50       	subi	r25, 0x01	; 1
     654:	20 40       	sbci	r18, 0x00	; 0
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	e1 f7       	brne	.-8      	; 0x652 <getButton+0x2c>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <getButton+0x36>
     65c:	00 00       	nop
     65e:	08 95       	ret

00000660 <displayWeight>:

uint8_t tmpDigit[4];

void displayWeight(int16_t weightIn)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     666:	99 23       	and	r25, r25
     668:	0c f0       	brlt	.+2      	; 0x66c <displayWeight+0xc>
     66a:	4c c0       	rjmp	.+152    	; 0x704 <displayWeight+0xa4>
		tmpWeight = -weightIn;
     66c:	31 95       	neg	r19
     66e:	21 95       	neg	r18
     670:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){ 
     672:	27 3e       	cpi	r18, 0xE7	; 231
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	38 07       	cpc	r19, r24
     678:	3c f0       	brlt	.+14     	; 0x688 <displayWeight+0x28>
			tmpDigit[2] = 9;
     67a:	e0 ec       	ldi	r30, 0xC0	; 192
     67c:	f1 e0       	ldi	r31, 0x01	; 1
     67e:	89 e0       	ldi	r24, 0x09	; 9
     680:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = 9;
     682:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = 9;
     684:	80 83       	st	Z, r24
     686:	13 c0       	rjmp	.+38     	; 0x6ae <displayWeight+0x4e>
		} else {
			tmpDigit[2] = tmpWeight/100;
     688:	e0 ec       	ldi	r30, 0xC0	; 192
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	c9 01       	movw	r24, r18
     68e:	64 e6       	ldi	r22, 0x64	; 100
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     696:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     698:	ca e0       	ldi	r28, 0x0A	; 10
     69a:	d0 e0       	ldi	r29, 0x00	; 0
     69c:	be 01       	movw	r22, r28
     69e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     6a2:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     6a4:	c9 01       	movw	r24, r18
     6a6:	be 01       	movw	r22, r28
     6a8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     6ac:	80 83       	st	Z, r24
		}
		fndData[3] = 0x40;
     6ae:	a9 ea       	ldi	r26, 0xA9	; 169
     6b0:	b1 e0       	ldi	r27, 0x01	; 1
     6b2:	80 e4       	ldi	r24, 0x40	; 64
     6b4:	13 96       	adiw	r26, 0x03	; 3
     6b6:	8c 93       	st	X, r24
     6b8:	13 97       	sbiw	r26, 0x03	; 3
		for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     6ba:	c0 ec       	ldi	r28, 0xC0	; 192
     6bc:	d1 e0       	ldi	r29, 0x01	; 1
     6be:	e8 81       	ld	r30, Y
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ec 5f       	subi	r30, 0xFC	; 252
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	80 81       	ld	r24, Z
     6c8:	8c 93       	st	X, r24
     6ca:	e9 81       	ldd	r30, Y+1	; 0x01
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	ec 5f       	subi	r30, 0xFC	; 252
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	80 81       	ld	r24, Z
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	8c 93       	st	X, r24
     6d8:	11 97       	sbiw	r26, 0x01	; 1
     6da:	ea 81       	ldd	r30, Y+2	; 0x02
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ec 5f       	subi	r30, 0xFC	; 252
     6e0:	fe 4f       	sbci	r31, 0xFE	; 254
     6e2:	80 81       	ld	r24, Z
     6e4:	12 96       	adiw	r26, 0x02	; 2
     6e6:	8c 93       	st	X, r24
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     6e8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     6ec:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <displayWeight+0x96>
     6f4:	87 c0       	rjmp	.+270    	; 0x804 <displayWeight+0x1a4>
     6f6:	fc 01       	movw	r30, r24
     6f8:	e7 55       	subi	r30, 0x57	; 87
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	80 81       	ld	r24, Z
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	80 83       	st	Z, r24
     702:	80 c0       	rjmp	.+256    	; 0x804 <displayWeight+0x1a4>
		return;
	}

	if(weightIn > 9999 ){
     704:	20 31       	cpi	r18, 0x10	; 16
     706:	87 e2       	ldi	r24, 0x27	; 39
     708:	38 07       	cpc	r19, r24
     70a:	44 f0       	brlt	.+16     	; 0x71c <displayWeight+0xbc>
		tmpDigit[3] = 9;
     70c:	e0 ec       	ldi	r30, 0xC0	; 192
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	89 e0       	ldi	r24, 0x09	; 9
     712:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     714:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     716:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;		
     718:	80 83       	st	Z, r24
     71a:	5e c0       	rjmp	.+188    	; 0x7d8 <displayWeight+0x178>
	} else {
		tmpDigit[3] = weightIn/ 1000;
     71c:	e0 ec       	ldi	r30, 0xC0	; 192
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	c9 01       	movw	r24, r18
     722:	68 ee       	ldi	r22, 0xE8	; 232
     724:	73 e0       	ldi	r23, 0x03	; 3
     726:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     72a:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     72c:	c4 e6       	ldi	r28, 0x64	; 100
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	be 01       	movw	r22, r28
     732:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     736:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     738:	c9 01       	movw	r24, r18
     73a:	be 01       	movw	r22, r28
     73c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     740:	ca e0       	ldi	r28, 0x0A	; 10
     742:	d0 e0       	ldi	r29, 0x00	; 0
     744:	be 01       	movw	r22, r28
     746:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     74a:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     74c:	c9 01       	movw	r24, r18
     74e:	be 01       	movw	r22, r28
     750:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     754:	80 83       	st	Z, r24
     756:	40 c0       	rjmp	.+128    	; 0x7d8 <displayWeight+0x178>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     758:	ec 91       	ld	r30, X
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	ec 5f       	subi	r30, 0xFC	; 252
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	80 81       	ld	r24, Z
     762:	8d 93       	st	X+, r24
     764:	a2 17       	cp	r26, r18
     766:	b3 07       	cpc	r27, r19
     768:	b9 f7       	brne	.-18     	; 0x758 <displayWeight+0xf8>
	
	if(codePoint <= 0 ){
     76a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     76e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     772:	18 16       	cp	r1, r24
     774:	19 06       	cpc	r1, r25
     776:	8c f0       	brlt	.+34     	; 0x79a <displayWeight+0x13a>
		if(tmpDigit[3] == fndTableNum[0] ) {
     778:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <tmpDigit+0x3>
     77c:	8f 33       	cpi	r24, 0x3F	; 63
     77e:	89 f5       	brne	.+98     	; 0x7e2 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     780:	e0 ec       	ldi	r30, 0xC0	; 192
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] ) {
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	8f 33       	cpi	r24, 0x3F	; 63
     78a:	59 f5       	brne	.+86     	; 0x7e2 <displayWeight+0x182>
				tmpDigit[2] = 0x00;
     78c:	12 82       	std	Z+2, r1	; 0x02
				if(tmpDigit[1] == fndTableNum[0] ) {
     78e:	81 81       	ldd	r24, Z+1	; 0x01
     790:	8f 33       	cpi	r24, 0x3F	; 63
     792:	39 f5       	brne	.+78     	; 0x7e2 <displayWeight+0x182>
					tmpDigit[1] = 0x00;
     794:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <tmpDigit+0x1>
     798:	24 c0       	rjmp	.+72     	; 0x7e2 <displayWeight+0x182>
				}
			}
		}
	}
	else if(codePoint == 1 ){
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	79 f4       	brne	.+30     	; 0x7be <displayWeight+0x15e>
		tmpDigit[1] |= 0x80;
     7a0:	e0 ec       	ldi	r30, 0xC0	; 192
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	81 81       	ldd	r24, Z+1	; 0x01
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	81 83       	std	Z+1, r24	; 0x01
		if(tmpDigit[3] == fndTableNum[0] ) {
     7aa:	83 81       	ldd	r24, Z+3	; 0x03
     7ac:	8f 33       	cpi	r24, 0x3F	; 63
     7ae:	c9 f4       	brne	.+50     	; 0x7e2 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     7b0:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] )
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	8f 33       	cpi	r24, 0x3F	; 63
     7b6:	a9 f4       	brne	.+42     	; 0x7e2 <displayWeight+0x182>
				tmpDigit[2] = 0x00;
     7b8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <tmpDigit+0x2>
     7bc:	12 c0       	rjmp	.+36     	; 0x7e2 <displayWeight+0x182>
		}
	}
	else if(codePoint == 2 ){
     7be:	02 97       	sbiw	r24, 0x02	; 2
     7c0:	81 f4       	brne	.+32     	; 0x7e2 <displayWeight+0x182>
		tmpDigit[2] |= 0x80;
     7c2:	e0 ec       	ldi	r30, 0xC0	; 192
     7c4:	f1 e0       	ldi	r31, 0x01	; 1
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	80 68       	ori	r24, 0x80	; 128
     7ca:	82 83       	std	Z+2, r24	; 0x02
		if(tmpDigit[3] == fndTableNum[0] ) {
     7cc:	83 81       	ldd	r24, Z+3	; 0x03
     7ce:	8f 33       	cpi	r24, 0x3F	; 63
     7d0:	41 f4       	brne	.+16     	; 0x7e2 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     7d2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <tmpDigit+0x3>
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <displayWeight+0x182>
     7d8:	a0 ec       	ldi	r26, 0xC0	; 192
     7da:	b1 e0       	ldi	r27, 0x01	; 1
     7dc:	24 ec       	ldi	r18, 0xC4	; 196
     7de:	31 e0       	ldi	r19, 0x01	; 1
     7e0:	bb cf       	rjmp	.-138    	; 0x758 <displayWeight+0xf8>
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     7e2:	e9 ea       	ldi	r30, 0xA9	; 169
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	a0 ec       	ldi	r26, 0xC0	; 192
     7e8:	b1 e0       	ldi	r27, 0x01	; 1
     7ea:	8c 91       	ld	r24, X
     7ec:	80 83       	st	Z, r24
     7ee:	11 96       	adiw	r26, 0x01	; 1
     7f0:	8c 91       	ld	r24, X
     7f2:	11 97       	sbiw	r26, 0x01	; 1
     7f4:	81 83       	std	Z+1, r24	; 0x01
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	8c 91       	ld	r24, X
     7fa:	12 97       	sbiw	r26, 0x02	; 2
     7fc:	82 83       	std	Z+2, r24	; 0x02
     7fe:	13 96       	adiw	r26, 0x03	; 3
     800:	8c 91       	ld	r24, X
     802:	83 83       	std	Z+3, r24	; 0x03
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <displayWeight1>:

void displayWeight1(int16_t weightIn)
{
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     818:	99 23       	and	r25, r25
     81a:	0c f0       	brlt	.+2      	; 0x81e <displayWeight1+0x14>
     81c:	4a c0       	rjmp	.+148    	; 0x8b2 <displayWeight1+0xa8>
		tmpWeight = -weightIn;
     81e:	31 95       	neg	r19
     820:	21 95       	neg	r18
     822:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     824:	27 3e       	cpi	r18, 0xE7	; 231
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	38 07       	cpc	r19, r24
     82a:	4c f0       	brlt	.+18     	; 0x83e <displayWeight1+0x34>
			tmpDigit[3] = 0x40;
     82c:	e0 ec       	ldi	r30, 0xC0	; 192
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	80 e4       	ldi	r24, 0x40	; 64
     832:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     834:	87 e6       	ldi	r24, 0x67	; 103
     836:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     838:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     83a:	80 83       	st	Z, r24
     83c:	2c c0       	rjmp	.+88     	; 0x896 <displayWeight1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     83e:	e0 ec       	ldi	r30, 0xC0	; 192
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	80 e4       	ldi	r24, 0x40	; 64
     844:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     846:	c9 01       	movw	r24, r18
     848:	64 e6       	ldi	r22, 0x64	; 100
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     850:	7b 01       	movw	r14, r22
     852:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     854:	0a e0       	ldi	r16, 0x0A	; 10
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	b8 01       	movw	r22, r16
     85a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     85e:	eb 01       	movw	r28, r22
     860:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     862:	c9 01       	movw	r24, r18
     864:	b8 01       	movw	r22, r16
     866:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     86a:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     86c:	29 ea       	ldi	r18, 0xA9	; 169
     86e:	31 e0       	ldi	r19, 0x01	; 1
     870:	99 27       	eor	r25, r25
     872:	dc 01       	movw	r26, r24
     874:	ac 5f       	subi	r26, 0xFC	; 252
     876:	be 4f       	sbci	r27, 0xFE	; 254
     878:	8c 91       	ld	r24, X
     87a:	f9 01       	movw	r30, r18
     87c:	80 83       	st	Z, r24
     87e:	dd 27       	eor	r29, r29
     880:	cc 5f       	subi	r28, 0xFC	; 252
     882:	de 4f       	sbci	r29, 0xFE	; 254
     884:	88 81       	ld	r24, Y
     886:	81 83       	std	Z+1, r24	; 0x01
     888:	f7 01       	movw	r30, r14
     88a:	ff 27       	eor	r31, r31
     88c:	ec 5f       	subi	r30, 0xFC	; 252
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	80 81       	ld	r24, Z
     892:	f9 01       	movw	r30, r18
     894:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     896:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     89a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <displayWeight1+0x9a>
     8a2:	64 c0       	rjmp	.+200    	; 0x96c <displayWeight1+0x162>
     8a4:	fc 01       	movw	r30, r24
     8a6:	e7 55       	subi	r30, 0x57	; 87
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	80 81       	ld	r24, Z
     8ac:	80 68       	ori	r24, 0x80	; 128
     8ae:	80 83       	st	Z, r24
     8b0:	5d c0       	rjmp	.+186    	; 0x96c <displayWeight1+0x162>
		return;
	}

	if(weightIn > 9999 ){
     8b2:	80 31       	cpi	r24, 0x10	; 16
     8b4:	f7 e2       	ldi	r31, 0x27	; 39
     8b6:	9f 07       	cpc	r25, r31
     8b8:	44 f0       	brlt	.+16     	; 0x8ca <displayWeight1+0xc0>
		tmpDigit[3] = 9;
     8ba:	e0 ec       	ldi	r30, 0xC0	; 192
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     8c2:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     8c4:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     8c6:	80 83       	st	Z, r24
     8c8:	3b c0       	rjmp	.+118    	; 0x940 <displayWeight1+0x136>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     8ca:	e0 ec       	ldi	r30, 0xC0	; 192
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	68 ee       	ldi	r22, 0xE8	; 232
     8d0:	73 e0       	ldi	r23, 0x03	; 3
     8d2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     8d6:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     8d8:	c4 e6       	ldi	r28, 0x64	; 100
     8da:	d0 e0       	ldi	r29, 0x00	; 0
     8dc:	be 01       	movw	r22, r28
     8de:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     8e2:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     8e4:	c9 01       	movw	r24, r18
     8e6:	be 01       	movw	r22, r28
     8e8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     8ec:	ca e0       	ldi	r28, 0x0A	; 10
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	be 01       	movw	r22, r28
     8f2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     8f6:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     8f8:	c9 01       	movw	r24, r18
     8fa:	be 01       	movw	r22, r28
     8fc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     900:	80 83       	st	Z, r24
     902:	1e c0       	rjmp	.+60     	; 0x940 <displayWeight1+0x136>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     904:	ec 91       	ld	r30, X
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ec 5f       	subi	r30, 0xFC	; 252
     90a:	fe 4f       	sbci	r31, 0xFE	; 254
     90c:	80 81       	ld	r24, Z
     90e:	8d 93       	st	X+, r24
     910:	a2 17       	cp	r26, r18
     912:	b3 07       	cpc	r27, r19
     914:	b9 f7       	brne	.-18     	; 0x904 <displayWeight1+0xfa>
	
	if(codePoint == 1 )			tmpDigit[1] |= 0x80;
     916:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     91a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	91 05       	cpc	r25, r1
     922:	31 f4       	brne	.+12     	; 0x930 <displayWeight1+0x126>
     924:	e0 ec       	ldi	r30, 0xC0	; 192
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	81 81       	ldd	r24, Z+1	; 0x01
     92a:	80 68       	ori	r24, 0x80	; 128
     92c:	81 83       	std	Z+1, r24	; 0x01
     92e:	0d c0       	rjmp	.+26     	; 0x94a <displayWeight1+0x140>
	else if(codePoint == 2 )	tmpDigit[2] |= 0x80;
     930:	02 97       	sbiw	r24, 0x02	; 2
     932:	59 f4       	brne	.+22     	; 0x94a <displayWeight1+0x140>
     934:	e0 ec       	ldi	r30, 0xC0	; 192
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	82 81       	ldd	r24, Z+2	; 0x02
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	82 83       	std	Z+2, r24	; 0x02
     93e:	05 c0       	rjmp	.+10     	; 0x94a <displayWeight1+0x140>
     940:	a0 ec       	ldi	r26, 0xC0	; 192
     942:	b1 e0       	ldi	r27, 0x01	; 1
     944:	24 ec       	ldi	r18, 0xC4	; 196
     946:	31 e0       	ldi	r19, 0x01	; 1
     948:	dd cf       	rjmp	.-70     	; 0x904 <displayWeight1+0xfa>

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     94a:	e9 ea       	ldi	r30, 0xA9	; 169
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	a0 ec       	ldi	r26, 0xC0	; 192
     950:	b1 e0       	ldi	r27, 0x01	; 1
     952:	8c 91       	ld	r24, X
     954:	80 83       	st	Z, r24
     956:	11 96       	adiw	r26, 0x01	; 1
     958:	8c 91       	ld	r24, X
     95a:	11 97       	sbiw	r26, 0x01	; 1
     95c:	81 83       	std	Z+1, r24	; 0x01
     95e:	12 96       	adiw	r26, 0x02	; 2
     960:	8c 91       	ld	r24, X
     962:	12 97       	sbiw	r26, 0x02	; 2
     964:	82 83       	std	Z+2, r24	; 0x02
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	8c 91       	ld	r24, X
     96a:	83 83       	std	Z+3, r24	; 0x03
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <displayNumber1>:

void displayNumber1(int16_t weightIn)
{
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     988:	99 23       	and	r25, r25
     98a:	0c f0       	brlt	.+2      	; 0x98e <displayNumber1+0x14>
     98c:	4a c0       	rjmp	.+148    	; 0xa22 <displayNumber1+0xa8>
		tmpWeight = -weightIn;
     98e:	31 95       	neg	r19
     990:	21 95       	neg	r18
     992:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     994:	27 3e       	cpi	r18, 0xE7	; 231
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	38 07       	cpc	r19, r24
     99a:	4c f0       	brlt	.+18     	; 0x9ae <displayNumber1+0x34>
			tmpDigit[3] = 0x40;
     99c:	e0 ec       	ldi	r30, 0xC0	; 192
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	80 e4       	ldi	r24, 0x40	; 64
     9a2:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     9a4:	87 e6       	ldi	r24, 0x67	; 103
     9a6:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     9a8:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     9aa:	80 83       	st	Z, r24
     9ac:	2c c0       	rjmp	.+88     	; 0xa06 <displayNumber1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     9ae:	e0 ec       	ldi	r30, 0xC0	; 192
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	80 e4       	ldi	r24, 0x40	; 64
     9b4:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     9b6:	c9 01       	movw	r24, r18
     9b8:	64 e6       	ldi	r22, 0x64	; 100
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     9c0:	7b 01       	movw	r14, r22
     9c2:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     9c4:	0a e0       	ldi	r16, 0x0A	; 10
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	b8 01       	movw	r22, r16
     9ca:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     9ce:	eb 01       	movw	r28, r22
     9d0:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     9d2:	c9 01       	movw	r24, r18
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     9da:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     9dc:	29 ea       	ldi	r18, 0xA9	; 169
     9de:	31 e0       	ldi	r19, 0x01	; 1
     9e0:	99 27       	eor	r25, r25
     9e2:	dc 01       	movw	r26, r24
     9e4:	ac 5f       	subi	r26, 0xFC	; 252
     9e6:	be 4f       	sbci	r27, 0xFE	; 254
     9e8:	8c 91       	ld	r24, X
     9ea:	f9 01       	movw	r30, r18
     9ec:	80 83       	st	Z, r24
     9ee:	dd 27       	eor	r29, r29
     9f0:	cc 5f       	subi	r28, 0xFC	; 252
     9f2:	de 4f       	sbci	r29, 0xFE	; 254
     9f4:	88 81       	ld	r24, Y
     9f6:	81 83       	std	Z+1, r24	; 0x01
     9f8:	f7 01       	movw	r30, r14
     9fa:	ff 27       	eor	r31, r31
     9fc:	ec 5f       	subi	r30, 0xFC	; 252
     9fe:	fe 4f       	sbci	r31, 0xFE	; 254
     a00:	80 81       	ld	r24, Z
     a02:	f9 01       	movw	r30, r18
     a04:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     a06:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     a0a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	09 f4       	brne	.+2      	; 0xa14 <displayNumber1+0x9a>
     a12:	60 c0       	rjmp	.+192    	; 0xad4 <displayNumber1+0x15a>
     a14:	fc 01       	movw	r30, r24
     a16:	e7 55       	subi	r30, 0x57	; 87
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	80 81       	ld	r24, Z
     a1c:	80 68       	ori	r24, 0x80	; 128
     a1e:	80 83       	st	Z, r24
     a20:	59 c0       	rjmp	.+178    	; 0xad4 <displayNumber1+0x15a>
		return;
	}

	if(weightIn > 9999 ){
     a22:	80 31       	cpi	r24, 0x10	; 16
     a24:	f7 e2       	ldi	r31, 0x27	; 39
     a26:	9f 07       	cpc	r25, r31
     a28:	44 f0       	brlt	.+16     	; 0xa3a <displayNumber1+0xc0>
		tmpDigit[3] = 9;
     a2a:	e0 ec       	ldi	r30, 0xC0	; 192
     a2c:	f1 e0       	ldi	r31, 0x01	; 1
     a2e:	89 e0       	ldi	r24, 0x09	; 9
     a30:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     a32:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     a34:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     a36:	80 83       	st	Z, r24
     a38:	37 c0       	rjmp	.+110    	; 0xaa8 <displayNumber1+0x12e>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     a3a:	e0 ec       	ldi	r30, 0xC0	; 192
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	68 ee       	ldi	r22, 0xE8	; 232
     a40:	73 e0       	ldi	r23, 0x03	; 3
     a42:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     a46:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     a48:	c4 e6       	ldi	r28, 0x64	; 100
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
     a4c:	be 01       	movw	r22, r28
     a4e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     a52:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     a54:	c9 01       	movw	r24, r18
     a56:	be 01       	movw	r22, r28
     a58:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     a5c:	ca e0       	ldi	r28, 0x0A	; 10
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	be 01       	movw	r22, r28
     a62:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     a66:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     a68:	c9 01       	movw	r24, r18
     a6a:	be 01       	movw	r22, r28
     a6c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     a70:	80 83       	st	Z, r24
     a72:	1a c0       	rjmp	.+52     	; 0xaa8 <displayNumber1+0x12e>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     a74:	ec 91       	ld	r30, X
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ec 5f       	subi	r30, 0xFC	; 252
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	80 81       	ld	r24, Z
     a7e:	8d 93       	st	X+, r24
     a80:	a2 17       	cp	r26, r18
     a82:	b3 07       	cpc	r27, r19
     a84:	b9 f7       	brne	.-18     	; 0xa74 <displayNumber1+0xfa>
	
	if(tmpDigit[3] == fndTableNum[0] ) {
     a86:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <tmpDigit+0x3>
     a8a:	8f 33       	cpi	r24, 0x3F	; 63
     a8c:	91 f4       	brne	.+36     	; 0xab2 <displayNumber1+0x138>
		tmpDigit[3] = 0x00;
     a8e:	e0 ec       	ldi	r30, 0xC0	; 192
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	13 82       	std	Z+3, r1	; 0x03
		if(tmpDigit[2] == fndTableNum[0] ) {
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	8f 33       	cpi	r24, 0x3F	; 63
     a98:	61 f4       	brne	.+24     	; 0xab2 <displayNumber1+0x138>
			tmpDigit[2] = 0x00;
     a9a:	12 82       	std	Z+2, r1	; 0x02
			if(tmpDigit[1] == fndTableNum[0] ) {
     a9c:	81 81       	ldd	r24, Z+1	; 0x01
     a9e:	8f 33       	cpi	r24, 0x3F	; 63
     aa0:	41 f4       	brne	.+16     	; 0xab2 <displayNumber1+0x138>
				tmpDigit[1] = 0x00;
     aa2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <tmpDigit+0x1>
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <displayNumber1+0x138>
     aa8:	a0 ec       	ldi	r26, 0xC0	; 192
     aaa:	b1 e0       	ldi	r27, 0x01	; 1
     aac:	24 ec       	ldi	r18, 0xC4	; 196
     aae:	31 e0       	ldi	r19, 0x01	; 1
     ab0:	e1 cf       	rjmp	.-62     	; 0xa74 <displayNumber1+0xfa>
			}
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     ab2:	e9 ea       	ldi	r30, 0xA9	; 169
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	a0 ec       	ldi	r26, 0xC0	; 192
     ab8:	b1 e0       	ldi	r27, 0x01	; 1
     aba:	8c 91       	ld	r24, X
     abc:	80 83       	st	Z, r24
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8c 91       	ld	r24, X
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	81 83       	std	Z+1, r24	; 0x01
     ac6:	12 96       	adiw	r26, 0x02	; 2
     ac8:	8c 91       	ld	r24, X
     aca:	12 97       	sbiw	r26, 0x02	; 2
     acc:	82 83       	std	Z+2, r24	; 0x02
     ace:	13 96       	adiw	r26, 0x03	; 3
     ad0:	8c 91       	ld	r24, X
     ad2:	83 83       	std	Z+3, r24	; 0x03
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <displayNumber>:

void displayNumber(int16_t weightIn)
{
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ec 01       	movw	r28, r24
	int i;
	int16_t	tmpWeight;
	static uint32_t startmsecCount;
	if( elaspMsecTime(startmsecCount) < 300 ) return;
     af0:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <startmsecCount.1968>
     af4:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <startmsecCount.1968+0x1>
     af8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <startmsecCount.1968+0x2>
     afc:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <startmsecCount.1968+0x3>
     b00:	58 dc       	rcall	.-1872   	; 0x3b2 <elaspMsecTime>
     b02:	6c 32       	cpi	r22, 0x2C	; 44
     b04:	71 40       	sbci	r23, 0x01	; 1
     b06:	81 05       	cpc	r24, r1
     b08:	91 05       	cpc	r25, r1
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <displayNumber+0x2c>
     b0c:	74 c0       	rjmp	.+232    	; 0xbf6 <displayNumber+0x114>

	startmsecCount = timerCounter2;
     b0e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     b12:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     b16:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     b1a:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     b1e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <startmsecCount.1968>
     b22:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <startmsecCount.1968+0x1>
     b26:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <startmsecCount.1968+0x2>
     b2a:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <startmsecCount.1968+0x3>

	if(weightIn < 0 ){
     b2e:	dd 23       	and	r29, r29
     b30:	e4 f5       	brge	.+120    	; 0xbaa <displayNumber+0xc8>
		tmpWeight = -weightIn;
     b32:	d1 95       	neg	r29
     b34:	c1 95       	neg	r28
     b36:	d1 09       	sbc	r29, r1
		if(tmpWeight > 998 ){
     b38:	c7 3e       	cpi	r28, 0xE7	; 231
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	d8 07       	cpc	r29, r24
     b3e:	4c f0       	brlt	.+18     	; 0xb52 <displayNumber+0x70>
			tmpDigit[3] = 0x40;
     b40:	e0 ec       	ldi	r30, 0xC0	; 192
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     b48:	87 e6       	ldi	r24, 0x67	; 103
     b4a:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     b4c:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     b4e:	80 83       	st	Z, r24
     b50:	52 c0       	rjmp	.+164    	; 0xbf6 <displayNumber+0x114>
			
			} else {
			tmpDigit[3] = 0x40;
     b52:	e0 ec       	ldi	r30, 0xC0	; 192
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     b5a:	ce 01       	movw	r24, r28
     b5c:	64 e6       	ldi	r22, 0x64	; 100
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     b64:	9b 01       	movw	r18, r22
     b66:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     b68:	0a e0       	ldi	r16, 0x0A	; 10
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	b8 01       	movw	r22, r16
     b6e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     b72:	7b 01       	movw	r14, r22
     b74:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     b76:	ce 01       	movw	r24, r28
     b78:	b8 01       	movw	r22, r16
     b7a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divmodhi4>
     b7e:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     b80:	c9 ea       	ldi	r28, 0xA9	; 169
     b82:	d1 e0       	ldi	r29, 0x01	; 1
     b84:	99 27       	eor	r25, r25
     b86:	dc 01       	movw	r26, r24
     b88:	ac 5f       	subi	r26, 0xFC	; 252
     b8a:	be 4f       	sbci	r27, 0xFE	; 254
     b8c:	8c 91       	ld	r24, X
     b8e:	88 83       	st	Y, r24
     b90:	f7 01       	movw	r30, r14
     b92:	ff 27       	eor	r31, r31
     b94:	ec 5f       	subi	r30, 0xFC	; 252
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	33 27       	eor	r19, r19
     b9e:	f9 01       	movw	r30, r18
     ba0:	ec 5f       	subi	r30, 0xFC	; 252
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	80 81       	ld	r24, Z
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	26 c0       	rjmp	.+76     	; 0xbf6 <displayNumber+0x114>
		}
		return;
	}

	tmpDigit[3] = weightIn/1000;
     baa:	e0 ec       	ldi	r30, 0xC0	; 192
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	ce 01       	movw	r24, r28
     bb0:	68 ee       	ldi	r22, 0xE8	; 232
     bb2:	73 e0       	ldi	r23, 0x03	; 3
     bb4:	ee d7       	rcall	.+4060   	; 0x1b92 <__divmodhi4>
     bb6:	63 83       	std	Z+3, r22	; 0x03
	tmpDigit[2] = (weightIn%1000)/100;
     bb8:	24 e6       	ldi	r18, 0x64	; 100
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	b9 01       	movw	r22, r18
     bbe:	e9 d7       	rcall	.+4050   	; 0x1b92 <__divmodhi4>
     bc0:	62 83       	std	Z+2, r22	; 0x02
	tmpDigit[1] = (weightIn%100)/10;
     bc2:	ce 01       	movw	r24, r28
     bc4:	b9 01       	movw	r22, r18
     bc6:	e5 d7       	rcall	.+4042   	; 0x1b92 <__divmodhi4>
     bc8:	2a e0       	ldi	r18, 0x0A	; 10
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	b9 01       	movw	r22, r18
     bce:	e1 d7       	rcall	.+4034   	; 0x1b92 <__divmodhi4>
     bd0:	61 83       	std	Z+1, r22	; 0x01
	tmpDigit[0] = weightIn%10;	
     bd2:	ce 01       	movw	r24, r28
     bd4:	b9 01       	movw	r22, r18
     bd6:	dd d7       	rcall	.+4026   	; 0x1b92 <__divmodhi4>
     bd8:	80 83       	st	Z, r24
     bda:	df 01       	movw	r26, r30
     bdc:	c9 ea       	ldi	r28, 0xA9	; 169
     bde:	d1 e0       	ldi	r29, 0x01	; 1
     be0:	24 ec       	ldi	r18, 0xC4	; 196
     be2:	31 e0       	ldi	r19, 0x01	; 1
     be4:	ed 91       	ld	r30, X+
	for(i=0;i < 4 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ec 5f       	subi	r30, 0xFC	; 252
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	80 81       	ld	r24, Z
     bee:	89 93       	st	Y+, r24
     bf0:	a2 17       	cp	r26, r18
     bf2:	b3 07       	cpc	r27, r19
     bf4:	b9 f7       	brne	.-18     	; 0xbe4 <displayNumber+0x102>
     bf6:	df 91       	pop	r29
}
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	08 95       	ret

00000c04 <initGpio>:
     c04:	8f e0       	ldi	r24, 0x0F	; 15

void initGpio()
{
	DDRA		= 0x0f;   // FND Control Port
     c06:	8a bb       	out	0x1a, r24	; 26
	DDRB		= 0x07;   // SSI and Button
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	87 bb       	out	0x17, r24	; 23
	DDRC		= 0xff;   // FND Data Port
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	84 bb       	out	0x14, r24	; 20
	DDRD		= 0x08;   // UART and reserved
     c10:	88 e0       	ldi	r24, 0x08	; 8
     c12:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xfe;
     c14:	8e ef       	ldi	r24, 0xFE	; 254
     c16:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7e;
     c18:	8e e7       	ldi	r24, 0x7E	; 126
     c1a:	83 b9       	out	0x03, r24	; 3

	TIMSK =  0x40;
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;
     c20:	14 bc       	out	0x24, r1	; 36
	TCCR2 =  0x03;
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	85 bd       	out	0x25, r24	; 37

	sbi(PORTB,CS);
     c26:	c0 9a       	sbi	0x18, 0	; 24
	SPCR = 0x5D;
     c28:	8d e5       	ldi	r24, 0x5D	; 93
     c2a:	8d b9       	out	0x0d, r24	; 13
	SPSR= 0x00;
     c2c:	1e b8       	out	0x0e, r1	; 14
	
	sbi(PORTE,LED_ALARM);
     c2e:	1e 9a       	sbi	0x03, 6	; 3
	sbi(PORTE,LED_OVER);
     c30:	1f 9a       	sbi	0x03, 7	; 3
     c32:	08 95       	ret

00000c34 <calcWeightCoeff>:
	
//	SFIOR = 0xff;
}

void calcWeightCoeff()
{
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
	calcFactor = (int32_t ) codeWeight * 1024 ;
     c48:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <codeWeight>
     c4c:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <codeWeight+0x1>
     c50:	0d 2c       	mov	r0, r13
     c52:	00 0c       	add	r0, r0
     c54:	ee 08       	sbc	r14, r14
     c56:	ff 08       	sbc	r15, r15
     c58:	0b 2e       	mov	r0, r27
     c5a:	ba e0       	ldi	r27, 0x0A	; 10
     c5c:	cc 0c       	add	r12, r12
     c5e:	dd 1c       	adc	r13, r13
     c60:	ee 1c       	adc	r14, r14
     c62:	ff 1c       	adc	r15, r15
     c64:	ba 95       	dec	r27
     c66:	d1 f7       	brne	.-12     	; 0xc5c <calcWeightCoeff+0x28>
     c68:	b0 2d       	mov	r27, r0
	calcFactor = calcFactor / ( codeAdcSpan - codeAdcZero );
     c6a:	c0 91 96 01 	lds	r28, 0x0196	; 0x800196 <codeAdcZero>
     c6e:	d0 91 97 01 	lds	r29, 0x0197	; 0x800197 <codeAdcZero+0x1>
     c72:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <codeAdcSpan>
     c76:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <codeAdcSpan+0x1>
     c7a:	2c 1b       	sub	r18, r28
     c7c:	3d 0b       	sbc	r19, r29
     c7e:	49 01       	movw	r8, r18
     c80:	33 0f       	add	r19, r19
     c82:	aa 08       	sbc	r10, r10
     c84:	bb 08       	sbc	r11, r11
     c86:	c7 01       	movw	r24, r14
     c88:	b6 01       	movw	r22, r12
     c8a:	a5 01       	movw	r20, r10
     c8c:	94 01       	movw	r18, r8
     c8e:	94 d7       	rcall	.+3880   	; 0x1bb8 <__divmodsi4>
     c90:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <calcFactor>
     c94:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <calcFactor+0x1>
     c98:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <calcFactor+0x2>
     c9c:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <calcFactor+0x3>

	calcOffset = (int32_t ) codeWeight * 1024;
	calcOffset = - calcOffset * codeAdcZero / ( codeAdcSpan - codeAdcZero);
     ca0:	22 27       	eor	r18, r18
     ca2:	33 27       	eor	r19, r19
     ca4:	a9 01       	movw	r20, r18
     ca6:	2c 19       	sub	r18, r12
     ca8:	3d 09       	sbc	r19, r13
     caa:	4e 09       	sbc	r20, r14
     cac:	5f 09       	sbc	r21, r15
     cae:	de 01       	movw	r26, r28
     cb0:	a8 d7       	rcall	.+3920   	; 0x1c02 <__mulshisi3>
     cb2:	a5 01       	movw	r20, r10
     cb4:	94 01       	movw	r18, r8
     cb6:	80 d7       	rcall	.+3840   	; 0x1bb8 <__divmodsi4>
     cb8:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <calcOffset>
     cbc:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <calcOffset+0x1>
     cc0:	40 93 cc 01 	sts	0x01CC, r20	; 0x8001cc <calcOffset+0x2>
     cc4:	50 93 cd 01 	sts	0x01CD, r21	; 0x8001cd <calcOffset+0x3>
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	9f 90       	pop	r9
     cda:	8f 90       	pop	r8
     cdc:	08 95       	ret

00000cde <calcWeightOffset>:

void calcWeightOffset()
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
	// calcFactor = (int32_t ) codeWeight * 1024 ;
	// calcFactor = calcFactor / ( codeAdcSpan - codeAdcZero );
	int32_t tmp;
	
	tmp = (int32_t)( codeAdcSpan - codeAdcZero);
     ce2:	c0 91 96 01 	lds	r28, 0x0196	; 0x800196 <codeAdcZero>
     ce6:	d0 91 97 01 	lds	r29, 0x0197	; 0x800197 <codeAdcZero+0x1>
	
	calcOffset = (int32_t ) codeWeight * 1024;
	calcOffset = calcOffset / tmp;
	calcOffset = - calcOffset * codeAdcZero;
     cea:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <codeWeight>
     cee:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <codeWeight+0x1>
     cf2:	cb 01       	movw	r24, r22
     cf4:	77 0f       	add	r23, r23
     cf6:	aa 0b       	sbc	r26, r26
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	05 2e       	mov	r0, r21
     d00:	5a e0       	ldi	r21, 0x0A	; 10
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	5a 95       	dec	r21
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <calcWeightOffset+0x24>
     d0e:	50 2d       	mov	r21, r0
     d10:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <codeAdcSpan>
     d14:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <codeAdcSpan+0x1>
     d18:	2c 1b       	sub	r18, r28
     d1a:	3d 0b       	sbc	r19, r29
     d1c:	03 2e       	mov	r0, r19
     d1e:	00 0c       	add	r0, r0
     d20:	44 0b       	sbc	r20, r20
     d22:	55 0b       	sbc	r21, r21
     d24:	49 d7       	rcall	.+3730   	; 0x1bb8 <__divmodsi4>
     d26:	50 95       	com	r21
     d28:	40 95       	com	r20
     d2a:	30 95       	com	r19
     d2c:	21 95       	neg	r18
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	4f 4f       	sbci	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	de 01       	movw	r26, r28
     d36:	65 d7       	rcall	.+3786   	; 0x1c02 <__mulshisi3>
     d38:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <calcOffset>
     d3c:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <calcOffset+0x1>
     d40:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <calcOffset+0x2>
     d44:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <calcOffset+0x3>
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <initCodeData>:

void initCodeData(){

	calcWeightCoeff();
     d4e:	72 df       	rcall	.-284    	; 0xc34 <calcWeightCoeff>
	alarmOn = 0;
     d50:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <alarmOn+0x1>
     d54:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <alarmOn>
	overOn	= 0;
     d58:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <overOn+0x1>
     d5c:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <overOn>
	gflagConnect = 0;
     d60:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <gflagConnect+0x1>
     d64:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <gflagConnect>
	tripNumber = 0;
     d68:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <tripNumber+0x1>
     d6c:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <tripNumber>
	codeNumber = 0;
     d70:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
     d74:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
	blinkCmdFlag = 0x00;
     d78:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <blinkCmdFlag>
     d7c:	08 95       	ret

00000d7e <procRelayOut>:
}


void procRelayOut(void)
{
	if( machineState != MODE_RUN )
     d7e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <machineState>
     d82:	88 23       	and	r24, r24
     d84:	29 f0       	breq	.+10     	; 0xd90 <procRelayOut+0x12>
	{
		cbi(PORTA,RELAY_ALARM);
     d86:	de 98       	cbi	0x1b, 6	; 27
		sbi(PORTE,LED_ALARM);
     d88:	1e 9a       	sbi	0x03, 6	; 3

		cbi(PORTA,RELAY_OVER);
     d8a:	dd 98       	cbi	0x1b, 5	; 27
		sbi(PORTE,LED_OVER);
     d8c:	1f 9a       	sbi	0x03, 7	; 3
	
		 return;
     d8e:	08 95       	ret
	}
	
	overOn  = ( loadWeight > codeOver  ) ? 1 : 0;
     d90:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
     d94:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <codeOver>
     da0:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <codeOver+0x1>
     da4:	48 17       	cp	r20, r24
     da6:	59 07       	cpc	r21, r25
     da8:	14 f0       	brlt	.+4      	; 0xdae <procRelayOut+0x30>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <overOn+0x1>
     db2:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <overOn>
	alarmOn = ( loadWeight > codeAlarm ) ? 1 : 0;
     db6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <codeAlarm>
     dba:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <codeAlarm+0x1>
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	28 17       	cp	r18, r24
     dc4:	39 07       	cpc	r19, r25
     dc6:	14 f0       	brlt	.+4      	; 0xdcc <procRelayOut+0x4e>
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <alarmOn+0x1>
     dd0:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <alarmOn>
	
//--- alarm 
	if( alarmOn){
     dd4:	28 17       	cp	r18, r24
     dd6:	39 07       	cpc	r19, r25
     dd8:	1c f4       	brge	.+6      	; 0xde0 <procRelayOut+0x62>
		sbi(PORTA,RELAY_ALARM);
     dda:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTE,LED_ALARM); 
     ddc:	1e 98       	cbi	0x03, 6	; 3
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <procRelayOut+0x66>
	} else {
		cbi(PORTA,RELAY_ALARM);
     de0:	de 98       	cbi	0x1b, 6	; 27
		sbi(PORTE,LED_ALARM);
     de2:	1e 9a       	sbi	0x03, 6	; 3
	}
	
//--- over relay led	
	if( overOn){
     de4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <overOn>
     de8:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <overOn+0x1>
     dec:	89 2b       	or	r24, r25
     dee:	19 f0       	breq	.+6      	; 0xdf6 <procRelayOut+0x78>
		sbi(PORTA,RELAY_OVER);
     df0:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTE,LED_OVER);
     df2:	1f 98       	cbi	0x03, 7	; 3
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <procRelayOut+0x7c>
	} else {
		cbi(PORTA,RELAY_OVER);
     df6:	dd 98       	cbi	0x1b, 5	; 27
		sbi(PORTE,LED_OVER);
     df8:	1f 9a       	sbi	0x03, 7	; 3
	}

// test button 
	if( (PIND & 0x01) == 0){
     dfa:	80 99       	sbic	0x10, 0	; 16
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <procRelayOut+0x88>
		// displayWeight(codeOver);
		sbi(PORTA,RELAY_ALARM);
     dfe:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTE,LED_ALARM);
     e00:	1e 98       	cbi	0x03, 6	; 3

		sbi(PORTA,RELAY_OVER);
     e02:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTE,LED_OVER);
     e04:	1f 98       	cbi	0x03, 7	; 3
     e06:	08 95       	ret

00000e08 <systemErrProc>:
	}
}

void systemErrProc( uint8_t err_no)
{
     e08:	08 95       	ret

00000e0a <readLoad>:
	
}

int16_t readLoad(void)
{
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
	static int ringCountFilt = 0;
	int16_t weight1;
	int32_t weightSum;
	static uint32_t startmsecCount=0;
	
	if( elaspMsecTime(startmsecCount) < 100 ) return loadWeight ;
     e16:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <startmsecCount.2015>
     e1a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <startmsecCount.2015+0x1>
     e1e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <startmsecCount.2015+0x2>
     e22:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <startmsecCount.2015+0x3>
     e26:	c5 da       	rcall	.-2678   	; 0x3b2 <elaspMsecTime>
     e28:	64 36       	cpi	r22, 0x64	; 100
     e2a:	71 05       	cpc	r23, r1
     e2c:	81 05       	cpc	r24, r1
     e2e:	91 05       	cpc	r25, r1
     e30:	28 f4       	brcc	.+10     	; 0xe3c <readLoad+0x32>
     e32:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
     e36:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
     e3a:	c7 c0       	rjmp	.+398    	; 0xfca <readLoad+0x1c0>
	startmsecCount = timerCounter2;
     e3c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     e40:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     e44:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     e48:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     e4c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <startmsecCount.2015>
     e50:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <startmsecCount.2015+0x1>
     e54:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <startmsecCount.2015+0x2>
     e58:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <startmsecCount.2015+0x3>

	if(	machineState == MODE_RUN) {
     e5c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <machineState>
     e60:	81 11       	cpse	r24, r1
     e62:	22 c0       	rjmp	.+68     	; 0xea8 <readLoad+0x9e>
		if(adcWeightIn > 1020 ){
     e64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
     e68:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     e6c:	8d 3f       	cpi	r24, 0xFD	; 253
     e6e:	93 40       	sbci	r25, 0x03	; 3
     e70:	54 f0       	brlt	.+20     	; 0xe86 <readLoad+0x7c>
			tripNumber = ERR_ADC_OVER;		// 3
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
     e7a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
			enterModeError(tripNumber);
     e7e:	b5 d2       	rcall	.+1386   	; 0x13ea <enterModeError>
			return 0;
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a2 c0       	rjmp	.+324    	; 0xfca <readLoad+0x1c0>
		} else if ( adcWeightIn <= 0 ){
     e86:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
     e8a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     e8e:	18 16       	cp	r1, r24
     e90:	19 06       	cpc	r1, r25
     e92:	54 f0       	brlt	.+20     	; 0xea8 <readLoad+0x9e>
			tripNumber = ERR_ADC_UNDER; // 4
     e94:	84 e0       	ldi	r24, 0x04	; 4
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
     e9c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
			enterModeError(tripNumber);
     ea0:	a4 d2       	rcall	.+1352   	; 0x13ea <enterModeError>
			return 0;		
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	91 c0       	rjmp	.+290    	; 0xfca <readLoad+0x1c0>
		}
	}

	weight1 = (int16_t) ( calcFactor * (adcWeightIn - codeAdcZero) / 1024) ;
     ea8:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <adcWeightIn>
     eac:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>

	weightBuf[ringCountFilt] = weight1;
     eb0:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <ringCountFilt.2012>
     eb4:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <ringCountFilt.2012+0x1>
     eb8:	f7 01       	movw	r30, r14
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e8 5d       	subi	r30, 0xD8	; 216
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <codeAdcZero>
     ec6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <codeAdcZero+0x1>
     eca:	a8 1b       	sub	r26, r24
     ecc:	b9 0b       	sbc	r27, r25
     ece:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <calcFactor>
     ed2:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <calcFactor+0x1>
     ed6:	40 91 a5 01 	lds	r20, 0x01A5	; 0x8001a5 <calcFactor+0x2>
     eda:	50 91 a6 01 	lds	r21, 0x01A6	; 0x8001a6 <calcFactor+0x3>
     ede:	91 d6       	rcall	.+3362   	; 0x1c02 <__mulshisi3>
     ee0:	8b 01       	movw	r16, r22
     ee2:	9c 01       	movw	r18, r24
     ee4:	99 23       	and	r25, r25
     ee6:	24 f4       	brge	.+8      	; 0xef0 <readLoad+0xe6>
     ee8:	01 50       	subi	r16, 0x01	; 1
     eea:	1c 4f       	sbci	r17, 0xFC	; 252
     eec:	2f 4f       	sbci	r18, 0xFF	; 255
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	d9 01       	movw	r26, r18
     ef2:	c8 01       	movw	r24, r16
     ef4:	07 2e       	mov	r0, r23
     ef6:	7a e0       	ldi	r23, 0x0A	; 10
     ef8:	b5 95       	asr	r27
     efa:	a7 95       	ror	r26
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	7a 95       	dec	r23
     f02:	d1 f7       	brne	.-12     	; 0xef8 <readLoad+0xee>
     f04:	70 2d       	mov	r23, r0
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
     f0a:	89 e0       	ldi	r24, 0x09	; 9
     f0c:	e8 16       	cp	r14, r24
     f0e:	f1 04       	cpc	r15, r1
     f10:	1c f4       	brge	.+6      	; 0xf18 <readLoad+0x10e>
     f12:	c7 01       	movw	r24, r14
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <readLoad+0x112>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ringCountFilt.2012+0x1>
     f20:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ringCountFilt.2012>
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     f24:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <codeFilt>
     f28:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <codeFilt+0x1>
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	12 16       	cp	r1, r18
     f32:	13 06       	cpc	r1, r19
     f34:	04 f5       	brge	.+64     	; 0xf76 <readLoad+0x16c>
     f36:	c1 2c       	mov	r12, r1
     f38:	d1 2c       	mov	r13, r1
     f3a:	76 01       	movw	r14, r12
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
		weightSum += weightBuf[j];
     f40:	fc 01       	movw	r30, r24
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	e8 5d       	subi	r30, 0xD8	; 216
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	40 81       	ld	r20, Z
     f4c:	51 81       	ldd	r21, Z+1	; 0x01
     f4e:	05 2e       	mov	r0, r21
     f50:	00 0c       	add	r0, r0
     f52:	66 0b       	sbc	r22, r22
     f54:	77 0b       	sbc	r23, r23
     f56:	c4 0e       	add	r12, r20
     f58:	d5 1e       	adc	r13, r21
     f5a:	e6 1e       	adc	r14, r22
     f5c:	f7 1e       	adc	r15, r23
		j = ( j < 1 ) ?  9 : j - 1;
     f5e:	18 16       	cp	r1, r24
     f60:	19 06       	cpc	r1, r25
     f62:	14 f4       	brge	.+4      	; 0xf68 <readLoad+0x15e>
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <readLoad+0x162>
     f68:	89 e0       	ldi	r24, 0x09	; 9
     f6a:	90 e0       	ldi	r25, 0x00	; 0
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	a2 17       	cp	r26, r18
     f70:	b3 07       	cpc	r27, r19
     f72:	34 f3       	brlt	.-52     	; 0xf40 <readLoad+0x136>
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <readLoad+0x172>
	weightBuf[ringCountFilt] = weight1;
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
     f76:	c1 2c       	mov	r12, r1
     f78:	d1 2c       	mov	r13, r1
     f7a:	76 01       	movw	r14, r12
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
		weightSum += weightBuf[j];
		j = ( j < 1 ) ?  9 : j - 1;
	}	
	weight1 = weightSum / ( codeFilt + 1);	 
     f7c:	03 2e       	mov	r0, r19
     f7e:	00 0c       	add	r0, r0
     f80:	44 0b       	sbc	r20, r20
     f82:	55 0b       	sbc	r21, r21
     f84:	c7 01       	movw	r24, r14
     f86:	b6 01       	movw	r22, r12
     f88:	17 d6       	rcall	.+3118   	; 0x1bb8 <__divmodsi4>
     f8a:	c9 01       	movw	r24, r18

//-- divison proc
	if( codeDivision == 0 ) weight1 = ( ( weight1 + 4)  / 10 ) * 10;
     f8c:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <codeDivision>
     f90:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <codeDivision+0x1>
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	81 f4       	brne	.+32     	; 0xfb8 <readLoad+0x1ae>
     f98:	04 96       	adiw	r24, 0x04	; 4
     f9a:	6a e0       	ldi	r22, 0x0A	; 10
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	f9 d5       	rcall	.+3058   	; 0x1b92 <__divmodhi4>
     fa0:	cb 01       	movw	r24, r22
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	86 0f       	add	r24, r22
     fb4:	97 1f       	adc	r25, r23
	else weight1 = ( weight1  / codeDivision ) * codeDivision;
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <readLoad+0x1c0>
     fb8:	bf 01       	movw	r22, r30
     fba:	eb d5       	rcall	.+3030   	; 0x1b92 <__divmodhi4>
     fbc:	e6 9f       	mul	r30, r22
     fbe:	c0 01       	movw	r24, r0
     fc0:	e7 9f       	mul	r30, r23
     fc2:	90 0d       	add	r25, r0
     fc4:	f6 9f       	mul	r31, r22
     fc6:	90 0d       	add	r25, r0
     fc8:	11 24       	eor	r1, r1

	return weight1;	
}
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <main>:

int main(void)
{
	uint8_t keyBuf;
	
	initGpio();
     fd8:	15 de       	rcall	.-982    	; 0xc04 <initGpio>
	
	initADC();	
     fda:	b9 da       	rcall	.-2702   	; 0x54e <initADC>
	
	initUart();
     fdc:	fa d4       	rcall	.+2548   	; 0x19d2 <initUart>
	
	sei();	

    initUart();
     fde:	78 94       	sei

	readRomData();
     fe0:	f8 d4       	rcall	.+2544   	; 0x19d2 <initUart>
     fe2:	6f d9       	rcall	.-3362   	; 0x2c2 <readRomData>
	initCodeData();		
     fe4:	b4 de       	rcall	.-664    	; 0xd4e <initCodeData>
	loadWeight = readLoad();
     fe6:	11 df       	rcall	.-478    	; 0xe0a <readLoad>
     fe8:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
     fec:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
	enterModeRun();
     ff0:	3a d0       	rcall	.+116    	; 0x1066 <enterModeRun>
}

int returnVal;

int main(void)
{
     ff2:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
		if(command != BTN_NULL ) keyBuf = 1;
     ff4:	d1 e0       	ldi	r29, 0x01	; 1
}

int returnVal;

int main(void)
{
     ff6:	c1 2f       	mov	r28, r17
	initCodeData();		
	loadWeight = readLoad();
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
     ff8:	c2 de       	rcall	.-636    	; 0xd7e <procRelayOut>
		sciCommandProc( );	
     ffa:	aa d5       	rcall	.+2900   	; 0x1b50 <sciCommandProc>
     ffc:	14 db       	rcall	.-2520   	; 0x626 <getButton>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     ffe:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <command>
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
    1002:	8f 3f       	cpi	r24, 0xFF	; 255
    1004:	09 f0       	breq	.+2      	; 0x1008 <main+0x30>
		if(command != BTN_NULL ) keyBuf = 1;
    1006:	cd 2f       	mov	r28, r29
    1008:	00 df       	rcall	.-512    	; 0xe0a <readLoad>
    100a:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
		loadWeight = readLoad();
    100e:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
    1012:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <machineState>
    1016:	82 30       	cpi	r24, 0x02	; 2
		switch( machineState ){
    1018:	99 f0       	breq	.+38     	; 0x1040 <main+0x68>
    101a:	28 f4       	brcc	.+10     	; 0x1026 <main+0x4e>
    101c:	88 23       	and	r24, r24
    101e:	41 f0       	breq	.+16     	; 0x1030 <main+0x58>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	51 f0       	breq	.+20     	; 0x1038 <main+0x60>
    1024:	19 c0       	rjmp	.+50     	; 0x1058 <main+0x80>
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	79 f0       	breq	.+30     	; 0x1048 <main+0x70>
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	89 f0       	breq	.+34     	; 0x1050 <main+0x78>
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <main+0x80>
    1030:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_RUN			: modeRun(command)			; break;
    1034:	11 d1       	rcall	.+546    	; 0x1258 <modeRun>
    1036:	11 c0       	rjmp	.+34     	; 0x105a <main+0x82>
    1038:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_PASSWD		: modePassWord(command)		; break;
    103c:	00 d2       	rcall	.+1024   	; 0x143e <modePassWord>
    103e:	0d c0       	rjmp	.+26     	; 0x105a <main+0x82>
			case MODE_SELECT_CODE	: modeSelectCode(command)	; break;
    1040:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
    1044:	1d d1       	rcall	.+570    	; 0x1280 <modeSelectCode>
    1046:	09 c0       	rjmp	.+18     	; 0x105a <main+0x82>
			case MODE_CHANGE_CODE	: modeChangeCode(command)	; break;
    1048:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
    104c:	71 d2       	rcall	.+1250   	; 0x1530 <modeChangeCode>
    104e:	05 c0       	rjmp	.+10     	; 0x105a <main+0x82>
    1050:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_ERROR			: modeError(command)		; break;			
    1054:	55 d4       	rcall	.+2218   	; 0x1900 <modeError>
    1056:	01 c0       	rjmp	.+2      	; 0x105a <main+0x82>
    1058:	06 d0       	rcall	.+12     	; 0x1066 <enterModeRun>
    105a:	c1 30       	cpi	r28, 0x01	; 1
			default					: enterModeRun( )	; break;
    105c:	69 f6       	brne	.-102    	; 0xff8 <main+0x20>
    105e:	e3 da       	rcall	.-2618   	; 0x626 <getButton>
		}
		if(keyBuf ==  1){
    1060:	8f 3f       	cpi	r24, 0xFF	; 255
    1062:	e9 f7       	brne	.-6      	; 0x105e <main+0x86>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
    1064:	c8 cf       	rjmp	.-112    	; 0xff6 <main+0x1e>

00001066 <enterModeRun>:
#include "header.h"
#include "extern.h"

void enterModeRun(void)
{
	initCodeData();
    1066:	73 de       	rcall	.-794    	; 0xd4e <initCodeData>
	machineState = MODE_RUN;
    1068:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <machineState>
	loadWeight = readLoad();
    106c:	ce de       	rcall	.-612    	; 0xe0a <readLoad>
    106e:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
    1072:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
	displayWeight(loadWeight);
    1076:	f4 ca       	rjmp	.-2584   	; 0x660 <displayWeight>
    1078:	08 95       	ret

0000107a <enterModePassWord>:
}

void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
		fndData[i] = fndTableNum[0];
    1080:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fndTableNum>
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
    1084:	ad e9       	ldi	r26, 0x9D	; 157
    1086:	b1 e0       	ldi	r27, 0x01	; 1
    1088:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
    108a:	e9 ea       	ldi	r30, 0xA9	; 169
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	80 83       	st	Z, r24
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	1c 92       	st	X, r1
    1094:	11 97       	sbiw	r26, 0x01	; 1
		fndData[i] = fndTableNum[0];
    1096:	81 83       	std	Z+1, r24	; 0x01
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
    1098:	12 96       	adiw	r26, 0x02	; 2
    109a:	1c 92       	st	X, r1
    109c:	12 97       	sbiw	r26, 0x02	; 2
		fndData[i] = fndTableNum[0];
    109e:	82 83       	std	Z+2, r24	; 0x02
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
    10a0:	13 96       	adiw	r26, 0x03	; 3
    10a2:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
    10a4:	83 83       	std	Z+3, r24	; 0x03
	}
	blinkCmdFlag = 0x08;
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
	editDigitPoint = 3;		// 1000
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
    10b2:	08 95       	ret

000010b4 <enterModeSelectCode>:
}

void enterModeSelectCode(void)
{
	machineState = MODE_SELECT_CODE;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	codeNumber = 0;
    10ba:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
    10be:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
	fndData[3] = fndTableChar['P' - 'A'];
    10c2:	e9 ea       	ldi	r30, 0xA9	; 169
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	ae e0       	ldi	r26, 0x0E	; 14
    10c8:	b1 e0       	ldi	r27, 0x01	; 1
    10ca:	1f 96       	adiw	r26, 0x0f	; 15
    10cc:	8c 91       	ld	r24, X
    10ce:	1f 97       	sbiw	r26, 0x0f	; 15
    10d0:	83 83       	std	Z+3, r24	; 0x03
	fndData[2] = fndTableChar['O' - 'A'];
    10d2:	1e 96       	adiw	r26, 0x0e	; 14
    10d4:	8c 91       	ld	r24, X
    10d6:	1e 97       	sbiw	r26, 0x0e	; 14
    10d8:	82 83       	std	Z+2, r24	; 0x02
	fndData[1] = fndTableChar['I' - 'A'];
    10da:	18 96       	adiw	r26, 0x08	; 8
    10dc:	8c 91       	ld	r24, X
    10de:	18 97       	sbiw	r26, 0x08	; 8
    10e0:	81 83       	std	Z+1, r24	; 0x01
	fndData[0] = fndTableChar['T' - 'A'];
    10e2:	53 96       	adiw	r26, 0x13	; 19
    10e4:	8c 91       	ld	r24, X
    10e6:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;	//
    10e8:	8f e0       	ldi	r24, 0x0F	; 15
    10ea:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    10ee:	08 95       	ret

000010f0 <setEditTmpFndData>:
}

void setEditTmpFndData(int16_t arg1)
{		
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	9c 01       	movw	r18, r24
	tmpFndData[3] = arg1 / 1000;
    10f6:	ea eb       	ldi	r30, 0xBA	; 186
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	68 ee       	ldi	r22, 0xE8	; 232
    10fc:	73 e0       	ldi	r23, 0x03	; 3
    10fe:	49 d5       	rcall	.+2706   	; 0x1b92 <__divmodhi4>
    1100:	63 83       	std	Z+3, r22	; 0x03
	tmpFndData[2] = (arg1 % 1000) /100;
    1102:	c4 e6       	ldi	r28, 0x64	; 100
    1104:	d0 e0       	ldi	r29, 0x00	; 0
    1106:	be 01       	movw	r22, r28
    1108:	44 d5       	rcall	.+2696   	; 0x1b92 <__divmodhi4>
    110a:	62 83       	std	Z+2, r22	; 0x02
	tmpFndData[1] = ( arg1 % 100 ) / 10;
    110c:	c9 01       	movw	r24, r18
    110e:	be 01       	movw	r22, r28
    1110:	40 d5       	rcall	.+2688   	; 0x1b92 <__divmodhi4>
    1112:	ca e0       	ldi	r28, 0x0A	; 10
    1114:	d0 e0       	ldi	r29, 0x00	; 0
    1116:	be 01       	movw	r22, r28
    1118:	3c d5       	rcall	.+2680   	; 0x1b92 <__divmodhi4>
    111a:	61 83       	std	Z+1, r22	; 0x01
	tmpFndData[0] = arg1 % 10 ;
    111c:	c9 01       	movw	r24, r18
    111e:	be 01       	movw	r22, r28
    1120:	38 d5       	rcall	.+2672   	; 0x1b92 <__divmodhi4>
    1122:	80 83       	st	Z, r24
    1124:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <editDigitPoint>

	editDigitPoint = 0;		
	blinkCmdFlag = 0x01;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
	displayWeight1(arg1);
    112e:	c9 01       	movw	r24, r18
    1130:	6c db       	rcall	.-2344   	; 0x80a <displayWeight1>
    1132:	df 91       	pop	r29
}
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <enterModeChangeCode>:
    1138:	83 e0       	ldi	r24, 0x03	; 3

void enterModeChangeCode(void)
{
	machineState = MODE_CHANGE_CODE;
    113a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>

	switch(codeNumber){	
    113e:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <codeNumber>
    1142:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <codeNumber+0x1>
    1146:	e8 30       	cpi	r30, 0x08	; 8
    1148:	f1 05       	cpc	r31, r1
    114a:	08 f0       	brcs	.+2      	; 0x114e <enterModeChangeCode+0x16>
    114c:	82 c0       	rjmp	.+260    	; 0x1252 <enterModeChangeCode+0x11a>
    114e:	e0 5b       	subi	r30, 0xB0	; 176
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	4e c5       	rjmp	.+2716   	; 0x1bf0 <__tablejump2__>
	case CODE_POINT:
		tmpCodeData = codePoint;
    1154:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
    1158:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
    115c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1160:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		if(tmpCodeData == 0) blinkCmdFlag = 1;
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	21 f4       	brne	.+8      	; 0x1170 <enterModeChangeCode+0x38>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 1) blinkCmdFlag = 2;
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	21 f4       	brne	.+8      	; 0x117e <enterModeChangeCode+0x46>
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 2) blinkCmdFlag = 4;
    117e:	02 97       	sbiw	r24, 0x02	; 2
    1180:	21 f4       	brne	.+8      	; 0x118a <enterModeChangeCode+0x52>
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <enterModeChangeCode+0x60>
		else {
			tmpCodeData = 0;
    118a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    118e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
			blinkCmdFlag = 1; 
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
		}		
		displayWeight1(loadWeight);
    1198:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    119c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    11a0:	34 cb       	rjmp	.-2456   	; 0x80a <displayWeight1>
		break;
    11a2:	08 95       	ret
	case CODE_FILT:
		tmpCodeData = codeFilt;	//
    11a4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <codeFilt>
    11a8:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <codeFilt+0x1>
    11ac:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    11b0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 1;
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space 
    11ba:	df cb       	rjmp	.-2114   	; 0x97a <displayNumber1>
		break;
    11bc:	08 95       	ret
	case CODE_DIVISION:
		tmpCodeData = codeDivision;	//
    11be:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <codeDivision>
    11c2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <codeDivision+0x1>
    11c6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    11ca:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 1;
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    11d0:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space
    11d4:	d2 cb       	rjmp	.-2140   	; 0x97a <displayNumber1>
		break;
    11d6:	08 95       	ret
	case CODE_AUTO:
		tmpCodeData = 0;
    11d8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    11dc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 0x0f;	//
    11e0:	8f e0       	ldi	r24, 0x0F	; 15
    11e2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
			fndData[3] = 0x00;
			fndData[2] = fndTableChar['Y' - 'A'];
			fndData[1] = fndTableChar['E' - 'A'];
			fndData[0] = fndTableChar['S' - 'A'];
		} else {
			fndData[3] = 0x00;
    11e6:	e9 ea       	ldi	r30, 0xA9	; 169
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['N' - 'A'];
    11ec:	ae e0       	ldi	r26, 0x0E	; 14
    11ee:	b1 e0       	ldi	r27, 0x01	; 1
    11f0:	1d 96       	adiw	r26, 0x0d	; 13
    11f2:	8c 91       	ld	r24, X
    11f4:	1d 97       	sbiw	r26, 0x0d	; 13
    11f6:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['O' - 'A'];
    11f8:	1e 96       	adiw	r26, 0x0e	; 14
    11fa:	8c 91       	ld	r24, X
    11fc:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = 0x00;
    11fe:	10 82       	st	Z, r1
    1200:	08 95       	ret
		}
		break;
	case CODE_ALARM:
		tmpCodeData = codeAlarm;
    1202:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <codeAlarm>
    1206:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <codeAlarm+0x1>
    120a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    120e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    1212:	6e cf       	rjmp	.-292    	; 0x10f0 <setEditTmpFndData>
		break;
    1214:	08 95       	ret
	case CODE_OVER:
		tmpCodeData = codeOver;
    1216:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <codeOver>
    121a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <codeOver+0x1>
    121e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1222:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    1226:	64 cf       	rjmp	.-312    	; 0x10f0 <setEditTmpFndData>
		break;
    1228:	08 95       	ret
	case CODE_SETT:
		tmpCodeData = codeWeight;
    122a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <codeWeight>
    122e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <codeWeight+0x1>
    1232:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1236:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    123a:	5a cf       	rjmp	.-332    	; 0x10f0 <setEditTmpFndData>
		break;
    123c:	08 95       	ret
	case 7:
		editDigitPoint = 0;		// 1000
    123e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <editDigitPoint>
		blinkCmdFlag = 0x00;
    1242:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <blinkCmdFlag>
		displayNumber(adcWeightIn);
    1246:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    124a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
		break;
    124e:	49 cc       	rjmp	.-1902   	; 0xae2 <displayNumber>
	default:
		systemErrProc(ERR_SYS_NO_CODE_NUMBER);
    1250:	08 95       	ret
    1252:	82 e3       	ldi	r24, 0x32	; 50
    1254:	d9 cd       	rjmp	.-1102   	; 0xe08 <systemErrProc>
    1256:	08 95       	ret

00001258 <modeRun>:
	}
}

int modeRun(uint8_t cmd)
{
	if( cmd  == BTN_ENTER ){ 
    1258:	8f 37       	cpi	r24, 0x7F	; 127
    125a:	11 f4       	brne	.+4      	; 0x1260 <modeRun+0x8>
		enterModePassWord();
    125c:	0e df       	rcall	.-484    	; 0x107a <enterModePassWord>
		// enterModeSelectCode();
		return 0;
    125e:	0d c0       	rjmp	.+26     	; 0x127a <modeRun+0x22>
	}

	if( (PIND & 0x01) == 0) displayWeight(codeOver);
    1260:	80 99       	sbic	0x10, 0	; 16
    1262:	06 c0       	rjmp	.+12     	; 0x1270 <modeRun+0x18>
    1264:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <codeOver>
    1268:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <codeOver+0x1>
    126c:	f9 d9       	rcall	.-3086   	; 0x660 <displayWeight>
    126e:	05 c0       	rjmp	.+10     	; 0x127a <modeRun+0x22>
	else					displayWeight(loadWeight);
    1270:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    1274:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    1278:	f3 d9       	rcall	.-3098   	; 0x660 <displayWeight>
	return 0;
}
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	08 95       	ret

00001280 <modeSelectCode>:
}

int modeSelectCode(uint8_t cmd)
{

	if( cmd == BTN_ENTER ){
    1280:	8f 37       	cpi	r24, 0x7F	; 127
    1282:	11 f4       	brne	.+4      	; 0x1288 <modeSelectCode+0x8>
		enterModeChangeCode();
    1284:	59 df       	rcall	.-334    	; 0x1138 <enterModeChangeCode>
		return 0;
    1286:	ae c0       	rjmp	.+348    	; 0x13e4 <modeSelectCode+0x164>
	}

	if(cmd == BTN_CANCEL){
    1288:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    128a:	11 f4       	brne	.+4      	; 0x1290 <modeSelectCode+0x10>
    128c:	ec de       	rcall	.-552    	; 0x1066 <enterModeRun>
		return 0;
    128e:	aa c0       	rjmp	.+340    	; 0x13e4 <modeSelectCode+0x164>
	}
	
	if(cmd == BTN_UP){
    1290:	8f 3e       	cpi	r24, 0xEF	; 239
    1292:	09 f0       	breq	.+2      	; 0x1296 <modeSelectCode+0x16>
    1294:	a7 c0       	rjmp	.+334    	; 0x13e4 <modeSelectCode+0x164>
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    1296:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <codeNumber>
    129a:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <codeNumber+0x1>
    129e:	e8 30       	cpi	r30, 0x08	; 8
    12a0:	f1 05       	cpc	r31, r1
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <modeSelectCode+0x26>
    12a4:	9a c0       	rjmp	.+308    	; 0x13da <modeSelectCode+0x15a>
    12a6:	31 96       	adiw	r30, 0x01	; 1
    12a8:	f0 93 99 01 	sts	0x0199, r31	; 0x800199 <codeNumber+0x1>
    12ac:	e0 93 98 01 	sts	0x0198, r30	; 0x800198 <codeNumber>
		switch(codeNumber){
    12b0:	e8 30       	cpi	r30, 0x08	; 8
    12b2:	f1 05       	cpc	r31, r1
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <modeSelectCode+0x38>
    12b6:	8f c0       	rjmp	.+286    	; 0x13d6 <modeSelectCode+0x156>
    12b8:	e8 5a       	subi	r30, 0xA8	; 168
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	99 c4       	rjmp	.+2354   	; 0x1bf0 <__tablejump2__>
			case CODE_POINT :
				fndData[3] = fndTableChar['P' - 'A'];
    12be:	e9 ea       	ldi	r30, 0xA9	; 169
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	ae e0       	ldi	r26, 0x0E	; 14
    12c4:	b1 e0       	ldi	r27, 0x01	; 1
    12c6:	1f 96       	adiw	r26, 0x0f	; 15
    12c8:	8c 91       	ld	r24, X
    12ca:	1f 97       	sbiw	r26, 0x0f	; 15
    12cc:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['O' - 'A'];
    12ce:	1e 96       	adiw	r26, 0x0e	; 14
    12d0:	8c 91       	ld	r24, X
    12d2:	1e 97       	sbiw	r26, 0x0e	; 14
    12d4:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['I' - 'A'];
    12d6:	18 96       	adiw	r26, 0x08	; 8
    12d8:	8c 91       	ld	r24, X
    12da:	18 97       	sbiw	r26, 0x08	; 8
    12dc:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    12de:	53 96       	adiw	r26, 0x13	; 19
    12e0:	8c 91       	ld	r24, X
    12e2:	80 83       	st	Z, r24
				break;
    12e4:	7f c0       	rjmp	.+254    	; 0x13e4 <modeSelectCode+0x164>
			case CODE_FILT :
				fndData[3] = fndTableChar['F' - 'A'];
    12e6:	e9 ea       	ldi	r30, 0xA9	; 169
    12e8:	f1 e0       	ldi	r31, 0x01	; 1
    12ea:	ae e0       	ldi	r26, 0x0E	; 14
    12ec:	b1 e0       	ldi	r27, 0x01	; 1
    12ee:	15 96       	adiw	r26, 0x05	; 5
    12f0:	8c 91       	ld	r24, X
    12f2:	15 97       	sbiw	r26, 0x05	; 5
    12f4:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    12f6:	18 96       	adiw	r26, 0x08	; 8
    12f8:	8c 91       	ld	r24, X
    12fa:	18 97       	sbiw	r26, 0x08	; 8
    12fc:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['L' - 'A'];
    12fe:	1b 96       	adiw	r26, 0x0b	; 11
    1300:	8c 91       	ld	r24, X
    1302:	1b 97       	sbiw	r26, 0x0b	; 11
    1304:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1306:	53 96       	adiw	r26, 0x13	; 19
    1308:	8c 91       	ld	r24, X
    130a:	80 83       	st	Z, r24
				break;
    130c:	6b c0       	rjmp	.+214    	; 0x13e4 <modeSelectCode+0x164>
			case CODE_DIVISION :
				fndData[3] = fndTableChar['D' - 'A'];
    130e:	e9 ea       	ldi	r30, 0xA9	; 169
    1310:	f1 e0       	ldi	r31, 0x01	; 1
    1312:	ae e0       	ldi	r26, 0x0E	; 14
    1314:	b1 e0       	ldi	r27, 0x01	; 1
    1316:	13 96       	adiw	r26, 0x03	; 3
    1318:	8c 91       	ld	r24, X
    131a:	13 97       	sbiw	r26, 0x03	; 3
    131c:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    131e:	18 96       	adiw	r26, 0x08	; 8
    1320:	8c 91       	ld	r24, X
    1322:	18 97       	sbiw	r26, 0x08	; 8
    1324:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['V' - 'A'];
    1326:	55 96       	adiw	r26, 0x15	; 21
    1328:	9c 91       	ld	r25, X
    132a:	91 83       	std	Z+1, r25	; 0x01
				fndData[0] = fndTableChar['I' - 'A'];
    132c:	80 83       	st	Z, r24
				break;
    132e:	5a c0       	rjmp	.+180    	; 0x13e4 <modeSelectCode+0x164>
			case CODE_AUTO :
				fndData[3] = fndTableChar['A' - 'A'];
    1330:	e9 ea       	ldi	r30, 0xA9	; 169
    1332:	f1 e0       	ldi	r31, 0x01	; 1
    1334:	ae e0       	ldi	r26, 0x0E	; 14
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	8c 91       	ld	r24, X
    133a:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['U' - 'A'];
    133c:	54 96       	adiw	r26, 0x14	; 20
    133e:	8c 91       	ld	r24, X
    1340:	54 97       	sbiw	r26, 0x14	; 20
    1342:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    1344:	53 96       	adiw	r26, 0x13	; 19
    1346:	8c 91       	ld	r24, X
    1348:	53 97       	sbiw	r26, 0x13	; 19
    134a:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['O' - 'A'];
    134c:	1e 96       	adiw	r26, 0x0e	; 14
    134e:	8c 91       	ld	r24, X
    1350:	80 83       	st	Z, r24
				break;
    1352:	48 c0       	rjmp	.+144    	; 0x13e4 <modeSelectCode+0x164>
			case CODE_ALARM :
				fndData[3] = fndTableChar['A' - 'A'];
    1354:	ae e0       	ldi	r26, 0x0E	; 14
    1356:	b1 e0       	ldi	r27, 0x01	; 1
    1358:	8c 91       	ld	r24, X
    135a:	e9 ea       	ldi	r30, 0xA9	; 169
    135c:	f1 e0       	ldi	r31, 0x01	; 1
    135e:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['L' - 'A'];
    1360:	1b 96       	adiw	r26, 0x0b	; 11
    1362:	9c 91       	ld	r25, X
    1364:	1b 97       	sbiw	r26, 0x0b	; 11
    1366:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['A' - 'A'];
    1368:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    136a:	51 96       	adiw	r26, 0x11	; 17
    136c:	8c 91       	ld	r24, X
    136e:	80 83       	st	Z, r24
				break;
    1370:	39 c0       	rjmp	.+114    	; 0x13e4 <modeSelectCode+0x164>
			case CODE_OVER :
				fndData[3] = fndTableChar['O' - 'A'];
    1372:	e9 ea       	ldi	r30, 0xA9	; 169
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	ae e0       	ldi	r26, 0x0E	; 14
    1378:	b1 e0       	ldi	r27, 0x01	; 1
    137a:	1e 96       	adiw	r26, 0x0e	; 14
    137c:	8c 91       	ld	r24, X
    137e:	1e 97       	sbiw	r26, 0x0e	; 14
    1380:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['V' - 'A'];
    1382:	55 96       	adiw	r26, 0x15	; 21
    1384:	8c 91       	ld	r24, X
    1386:	55 97       	sbiw	r26, 0x15	; 21
    1388:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
    138a:	14 96       	adiw	r26, 0x04	; 4
    138c:	8c 91       	ld	r24, X
    138e:	14 97       	sbiw	r26, 0x04	; 4
    1390:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    1392:	51 96       	adiw	r26, 0x11	; 17
    1394:	8c 91       	ld	r24, X
    1396:	80 83       	st	Z, r24
				break;
    1398:	25 c0       	rjmp	.+74     	; 0x13e4 <modeSelectCode+0x164>
			case CODE_SETT :
				fndData[3] = fndTableChar['S' - 'A'];
    139a:	e9 ea       	ldi	r30, 0xA9	; 169
    139c:	f1 e0       	ldi	r31, 0x01	; 1
    139e:	ae e0       	ldi	r26, 0x0E	; 14
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	52 96       	adiw	r26, 0x12	; 18
    13a4:	8c 91       	ld	r24, X
    13a6:	52 97       	sbiw	r26, 0x12	; 18
    13a8:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['E' - 'A'];
    13aa:	14 96       	adiw	r26, 0x04	; 4
    13ac:	8c 91       	ld	r24, X
    13ae:	14 97       	sbiw	r26, 0x04	; 4
    13b0:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    13b2:	53 96       	adiw	r26, 0x13	; 19
    13b4:	8c 91       	ld	r24, X
    13b6:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    13b8:	80 83       	st	Z, r24
				break;
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <modeSelectCode+0x164>
			case CODE_ADC :
				fndData[3] = 0x40;
    13bc:	e9 ea       	ldi	r30, 0xA9	; 169
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	80 e4       	ldi	r24, 0x40	; 64
    13c2:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['A' - 'A'];
    13c4:	ae e0       	ldi	r26, 0x0E	; 14
    13c6:	b1 e0       	ldi	r27, 0x01	; 1
    13c8:	9c 91       	ld	r25, X
    13ca:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['D' - 'A'];
    13cc:	13 96       	adiw	r26, 0x03	; 3
    13ce:	9c 91       	ld	r25, X
				fndData[0] = 0x40;
    13d0:	91 83       	std	Z+1, r25	; 0x01
				break;
    13d2:	80 83       	st	Z, r24
			default:	
				enterModeSelectCode();			
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <modeSelectCode+0x164>
    13d6:	6e de       	rcall	.-804    	; 0x10b4 <enterModeSelectCode>
				break;
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <modeSelectCode+0x164>
		enterModeRun();
		return 0;
	}
	
	if(cmd == BTN_UP){
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    13da:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
    13de:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
    13e2:	6d cf       	rjmp	.-294    	; 0x12be <modeSelectCode+0x3e>

	if(cmd == BTN_LEFT){
		return 0;
	}
	return 0;		
}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 95       	ret

000013ea <enterModeError>:
	return 0;
}

void enterModeError(int errNo)
{
	cntModeErr = timerCounter2;
    13ea:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <timerCounter2>
    13ee:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <timerCounter2+0x1>
    13f2:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <timerCounter2+0x2>
    13f6:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <timerCounter2+0x3>
    13fa:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <cntModeErr>
    13fe:	50 93 81 01 	sts	0x0181, r21	; 0x800181 <cntModeErr+0x1>
    1402:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <cntModeErr+0x2>
    1406:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <cntModeErr+0x3>
	mStateBk = machineState;
    140a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <machineState>
    140e:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <mStateBk>
	machineState = MODE_ERROR;
    1412:	24 e0       	ldi	r18, 0x04	; 4
    1414:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <machineState>
	//codeNumberBk = codeNumber;
	//tmpCodeDataBk = tmpCodeData;
	
	fndData[3] = fndTableChar['E' - 'A'];
    1418:	e9 ea       	ldi	r30, 0xA9	; 169
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <fndTableChar+0x4>
    1420:	23 83       	std	Z+3, r18	; 0x03
	fndData[2] = 0x40;
    1422:	20 e4       	ldi	r18, 0x40	; 64
    1424:	22 83       	std	Z+2, r18	; 0x02
	fndData[1] = fndTableNum[0];
    1426:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <fndTableNum>
    142a:	21 83       	std	Z+1, r18	; 0x01
	fndData[0] = fndTableNum[errNo];
    142c:	8c 5f       	subi	r24, 0xFC	; 252
    142e:	9e 4f       	sbci	r25, 0xFE	; 254
    1430:	dc 01       	movw	r26, r24
    1432:	8c 91       	ld	r24, X
    1434:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;			//
    1436:	8f e0       	ldi	r24, 0x0F	; 15
    1438:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    143c:	08 95       	ret

0000143e <modePassWord>:
		blinkCmdFlag = 0x08;
		editDigitPoint = 3;		// 1000
		return 0;
	}
*/	
	if( cmd == BTN_ENTER ){
    143e:	8f 37       	cpi	r24, 0x7F	; 127
    1440:	99 f5       	brne	.+102    	; 0x14a8 <modePassWord+0x6a>
		passwd = passWord[3] * 1000 +passWord[2] * 100 + passWord[1] * 10 + passWord[0]; 	
    1442:	ed e9       	ldi	r30, 0x9D	; 157
    1444:	f1 e0       	ldi	r31, 0x01	; 1
		if( passwd == 5737 ){
    1446:	43 81       	ldd	r20, Z+3	; 0x03
    1448:	28 ee       	ldi	r18, 0xE8	; 232
    144a:	33 e0       	ldi	r19, 0x03	; 3
    144c:	42 9f       	mul	r20, r18
    144e:	c0 01       	movw	r24, r0
    1450:	43 9f       	mul	r20, r19
    1452:	90 0d       	add	r25, r0
    1454:	11 24       	eor	r1, r1
    1456:	22 81       	ldd	r18, Z+2	; 0x02
    1458:	ac 01       	movw	r20, r24
    145a:	34 e6       	ldi	r19, 0x64	; 100
    145c:	23 9f       	mul	r18, r19
    145e:	40 0d       	add	r20, r0
    1460:	51 1d       	adc	r21, r1
    1462:	11 24       	eor	r1, r1
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	89 2f       	mov	r24, r25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	bc 01       	movw	r22, r24
    146c:	66 0f       	add	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	9c 01       	movw	r18, r24
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	cb 01       	movw	r24, r22
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	84 0f       	add	r24, r20
    1486:	95 1f       	adc	r25, r21
    1488:	20 81       	ld	r18, Z
    148a:	82 0f       	add	r24, r18
    148c:	91 1d       	adc	r25, r1
    148e:	89 36       	cpi	r24, 0x69	; 105
    1490:	96 41       	sbci	r25, 0x16	; 22
    1492:	11 f4       	brne	.+4      	; 0x1498 <modePassWord+0x5a>
			enterModeSelectCode();
    1494:	0f de       	rcall	.-994    	; 0x10b4 <enterModeSelectCode>
			return 0;
    1496:	49 c0       	rjmp	.+146    	; 0x152a <modePassWord+0xec>
		} else {
			tripNumber = 5;
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    14a0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
			enterModeError(tripNumber);
    14a4:	a2 df       	rcall	.-188    	; 0x13ea <enterModeError>
			
			// displayErr(ERR_PASS_WORD);
			// retryPassWord = 1;
			return 0;
    14a6:	41 c0       	rjmp	.+130    	; 0x152a <modePassWord+0xec>
		}
		return 0;
	}

	if(cmd == BTN_CANCEL){
    14a8:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <modePassWord+0x72>
    14ac:	dc dd       	rcall	.-1096   	; 0x1066 <enterModeRun>
		return 0;
    14ae:	3d c0       	rjmp	.+122    	; 0x152a <modePassWord+0xec>
	}
	
	if(cmd == BTN_UP){
    14b0:	8f 3e       	cpi	r24, 0xEF	; 239
    14b2:	c9 f4       	brne	.+50     	; 0x14e6 <modePassWord+0xa8>
		passWord[editDigitPoint] = ( passWord[editDigitPoint] > 8 ) ? 0 : passWord[editDigitPoint] +1;
    14b4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	fc 01       	movw	r30, r24
    14bc:	e3 56       	subi	r30, 0x63	; 99
    14be:	fe 4f       	sbci	r31, 0xFE	; 254
    14c0:	e0 81       	ld	r30, Z
    14c2:	e9 30       	cpi	r30, 0x09	; 9
    14c4:	10 f4       	brcc	.+4      	; 0x14ca <modePassWord+0x8c>
    14c6:	ef 5f       	subi	r30, 0xFF	; 255
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <modePassWord+0x8e>
    14ca:	e0 e0       	ldi	r30, 0x00	; 0
    14cc:	dc 01       	movw	r26, r24
    14ce:	a3 56       	subi	r26, 0x63	; 99
    14d0:	be 4f       	sbci	r27, 0xFE	; 254
    14d2:	ec 93       	st	X, r30
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
    14d4:	dc 01       	movw	r26, r24
    14d6:	a7 55       	subi	r26, 0x57	; 87
    14d8:	be 4f       	sbci	r27, 0xFE	; 254
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	ec 5f       	subi	r30, 0xFC	; 252
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	20 81       	ld	r18, Z
    14e2:	2c 93       	st	X, r18
		return 0;
    14e4:	22 c0       	rjmp	.+68     	; 0x152a <modePassWord+0xec>
	}

	if(cmd == BTN_LEFT){
    14e6:	8f 3d       	cpi	r24, 0xDF	; 223
    14e8:	01 f5       	brne	.+64     	; 0x152a <modePassWord+0xec>
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    14ea:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
    14ee:	88 23       	and	r24, r24
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <modePassWord+0xb8>
    14f2:	81 50       	subi	r24, 0x01	; 1
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <modePassWord+0xba>
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    14fc:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <blinkCmdFlag>
    1500:	96 95       	lsr	r25
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    1502:	19 f0       	breq	.+6      	; 0x150a <modePassWord+0xcc>
		return 0;
	}

	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    1504:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <blinkCmdFlag>
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <modePassWord+0xd2>
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    150a:	98 e0       	ldi	r25, 0x08	; 8
    150c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <blinkCmdFlag>
		
		i = passWord[editDigitPoint];
    1510:	90 e0       	ldi	r25, 0x00	; 0
		fndData[editDigitPoint] = fndTableNum[i];
    1512:	dc 01       	movw	r26, r24
    1514:	a7 55       	subi	r26, 0x57	; 87
    1516:	be 4f       	sbci	r27, 0xFE	; 254
	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
		
		i = passWord[editDigitPoint];
    1518:	fc 01       	movw	r30, r24
    151a:	e3 56       	subi	r30, 0x63	; 99
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
		fndData[editDigitPoint] = fndTableNum[i];
    151e:	e0 81       	ld	r30, Z
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ec 5f       	subi	r30, 0xFC	; 252
    1524:	fe 4f       	sbci	r31, 0xFE	; 254
    1526:	80 81       	ld	r24, Z
    1528:	8c 93       	st	X, r24
		return 0;
	}
	return 0;
}
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	08 95       	ret

00001530 <modeChangeCode>:

int modeChangeCode(uint8_t cmd)
{
	int16_t tmp;
	
	if(cmd == BTN_ENTER){
    1530:	8f 37       	cpi	r24, 0x7F	; 127
    1532:	09 f0       	breq	.+2      	; 0x1536 <modeChangeCode+0x6>
    1534:	5b c0       	rjmp	.+182    	; 0x15ec <modeChangeCode+0xbc>
		if( codeNumber == CODE_SETT ) {
    1536:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <codeNumber>
    153a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <codeNumber+0x1>
    153e:	86 30       	cpi	r24, 0x06	; 6
    1540:	91 05       	cpc	r25, r1
    1542:	09 f0       	breq	.+2      	; 0x1546 <modeChangeCode+0x16>
    1544:	3d c0       	rjmp	.+122    	; 0x15c0 <modeChangeCode+0x90>
			tmp = adcWeightIn - codeAdcZero;
    1546:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    154a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    154e:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <codeAdcZero>
    1552:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <codeAdcZero+0x1>
    1556:	82 1b       	sub	r24, r18
    1558:	93 0b       	sbc	r25, r19
			if(tmp < 0 ) tmp = - tmp;
			if( tmp < 20 ){
    155a:	9c 01       	movw	r18, r24
    155c:	22 f4       	brpl	.+8      	; 0x1566 <modeChangeCode+0x36>
    155e:	22 27       	eor	r18, r18
    1560:	33 27       	eor	r19, r19
    1562:	28 1b       	sub	r18, r24
    1564:	39 0b       	sbc	r19, r25
    1566:	24 31       	cpi	r18, 0x14	; 20
    1568:	31 05       	cpc	r19, r1
    156a:	44 f4       	brge	.+16     	; 0x157c <modeChangeCode+0x4c>
				tripNumber = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    1574:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
				enterModeError(tripNumber);
    1578:	38 df       	rcall	.-400    	; 0x13ea <enterModeError>
    157a:	bf c1       	rjmp	.+894    	; 0x18fa <modeChangeCode+0x3ca>
			} else if ( adcWeightIn > 1000 ){
    157c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    1580:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    1584:	89 3e       	cpi	r24, 0xE9	; 233
    1586:	93 40       	sbci	r25, 0x03	; 3
    1588:	44 f0       	brlt	.+16     	; 0x159a <modeChangeCode+0x6a>
				tripNumber = 2;
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    1592:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
				enterModeError(tripNumber);				
    1596:	29 df       	rcall	.-430    	; 0x13ea <enterModeError>
    1598:	b0 c1       	rjmp	.+864    	; 0x18fa <modeChangeCode+0x3ca>
			} else {
				saveCode(CODE_SETT,tmpCodeData);
    159a:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <tmpCodeData>
    159e:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <tmpCodeData+0x1>
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				saveCode(CODE_SPAN_ADC,adcWeightIn);
    15aa:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <adcWeightIn>
    15ae:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    15b2:	88 e0       	ldi	r24, 0x08	; 8
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				calcWeightCoeff();
    15ba:	3c db       	rcall	.-2440   	; 0xc34 <calcWeightCoeff>
				enterModeRun();
    15bc:	54 dd       	rcall	.-1368   	; 0x1066 <enterModeRun>
    15be:	9d c1       	rjmp	.+826    	; 0x18fa <modeChangeCode+0x3ca>
    15c0:	83 30       	cpi	r24, 0x03	; 3
			}
			return 0;
		} else if(codeNumber == CODE_AUTO){
    15c2:	91 05       	cpc	r25, r1
    15c4:	59 f4       	brne	.+22     	; 0x15dc <modeChangeCode+0xac>
    15c6:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <adcWeightIn>
				saveCode(CODE_ZERO_ADC,adcWeightIn);
				calcWeightOffset();
				enterModeRun();
			}
*/
				saveCode(CODE_ZERO_ADC,adcWeightIn);
    15ca:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    15ce:	89 e0       	ldi	r24, 0x09	; 9
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				calcWeightOffset();
    15d6:	83 db       	rcall	.-2298   	; 0xcde <calcWeightOffset>
				enterModeRun();						
    15d8:	46 dd       	rcall	.-1396   	; 0x1066 <enterModeRun>
    15da:	8f c1       	rjmp	.+798    	; 0x18fa <modeChangeCode+0x3ca>
    15dc:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <tmpCodeData>
		} else {
			saveCode(codeNumber,tmpCodeData);
    15e0:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <tmpCodeData+0x1>
    15e4:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
			enterModeRun();
    15e8:	3e dd       	rcall	.-1412   	; 0x1066 <enterModeRun>
    15ea:	87 c1       	rjmp	.+782    	; 0x18fa <modeChangeCode+0x3ca>
		}
		return 0;
	}
	
	if(cmd == BTN_CANCEL){
    15ec:	8f 3b       	cpi	r24, 0xBF	; 191
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <modeChangeCode+0xc4>
		enterModeRun();
    15f0:	3a dd       	rcall	.-1420   	; 0x1066 <enterModeRun>
    15f2:	83 c1       	rjmp	.+774    	; 0x18fa <modeChangeCode+0x3ca>
		return 0;
    15f4:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <codeNumber>
	}

	if(codeNumber == CODE_ADC )	{
    15f8:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <codeNumber+0x1>
    15fc:	27 30       	cpi	r18, 0x07	; 7
    15fe:	31 05       	cpc	r19, r1
    1600:	31 f4       	brne	.+12     	; 0x160e <modeChangeCode+0xde>
		displayNumber(adcWeightIn);
    1602:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    1606:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    160a:	6b da       	rcall	.-2858   	; 0xae2 <displayNumber>
    160c:	76 c1       	rjmp	.+748    	; 0x18fa <modeChangeCode+0x3ca>
		return 0;
    160e:	8f 3e       	cpi	r24, 0xEF	; 239
	}

	if(cmd == BTN_UP){
    1610:	09 f0       	breq	.+2      	; 0x1614 <modeChangeCode+0xe4>
    1612:	fa c0       	rjmp	.+500    	; 0x1808 <modeChangeCode+0x2d8>
    1614:	22 30       	cpi	r18, 0x02	; 2
		switch(codeNumber){
    1616:	31 05       	cpc	r19, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <modeChangeCode+0xec>
    161a:	58 c0       	rjmp	.+176    	; 0x16cc <modeChangeCode+0x19c>
    161c:	44 f4       	brge	.+16     	; 0x162e <modeChangeCode+0xfe>
    161e:	21 15       	cp	r18, r1
    1620:	31 05       	cpc	r19, r1
    1622:	71 f0       	breq	.+28     	; 0x1640 <modeChangeCode+0x110>
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <modeChangeCode+0xfc>
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <modeChangeCode+0x17a>
    162c:	ed c0       	rjmp	.+474    	; 0x1808 <modeChangeCode+0x2d8>
    162e:	23 30       	cpi	r18, 0x03	; 3
    1630:	31 05       	cpc	r19, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <modeChangeCode+0x106>
    1634:	82 c0       	rjmp	.+260    	; 0x173a <modeChangeCode+0x20a>
    1636:	27 30       	cpi	r18, 0x07	; 7
    1638:	31 05       	cpc	r19, r1
    163a:	0c f4       	brge	.+2      	; 0x163e <modeChangeCode+0x10e>
    163c:	ad c0       	rjmp	.+346    	; 0x1798 <modeChangeCode+0x268>
    163e:	e4 c0       	rjmp	.+456    	; 0x1808 <modeChangeCode+0x2d8>
    1640:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_POINT:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    1644:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	0c f0       	brlt	.+2      	; 0x1650 <modeChangeCode+0x120>
    164e:	45 c1       	rjmp	.+650    	; 0x18da <modeChangeCode+0x3aa>
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1656:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    165a:	00 97       	sbiw	r24, 0x00	; 0
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    165c:	21 f4       	brne	.+8      	; 0x1666 <modeChangeCode+0x136>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1664:	14 c0       	rjmp	.+40     	; 0x168e <modeChangeCode+0x15e>
    1666:	81 30       	cpi	r24, 0x01	; 1
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    1668:	91 05       	cpc	r25, r1
    166a:	21 f4       	brne	.+8      	; 0x1674 <modeChangeCode+0x144>
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1672:	0d c0       	rjmp	.+26     	; 0x168e <modeChangeCode+0x15e>
    1674:	02 97       	sbiw	r24, 0x02	; 2
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    1676:	21 f4       	brne	.+8      	; 0x1680 <modeChangeCode+0x150>
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    167e:	07 c0       	rjmp	.+14     	; 0x168e <modeChangeCode+0x15e>
    1680:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
			else {
				tmpCodeData = 0;
    1684:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    1688:	81 e0       	ldi	r24, 0x01	; 1
				blinkCmdFlag = 1;
    168a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    168e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}
			codePoint = tmpCodeData;
    1692:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1696:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
    169a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
			displayWeight1(loadWeight);
    169e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    16a2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    16a6:	b1 d8       	rcall	.-3742   	; 0x80a <displayWeight1>
    16a8:	28 c1       	rjmp	.+592    	; 0x18fa <modeChangeCode+0x3ca>
			//displayNumber(loadWeight);
			break;
    16aa:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_FILT:
			tmpCodeData = ( tmpCodeData > 8 ) ? 0 : tmpCodeData + 1;
    16ae:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    16b2:	89 30       	cpi	r24, 0x09	; 9
    16b4:	91 05       	cpc	r25, r1
    16b6:	14 f4       	brge	.+4      	; 0x16bc <modeChangeCode+0x18c>
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <modeChangeCode+0x190>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16c4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			//displayWeight(tmpCodeData);
			displayNumber1(tmpCodeData);
    16c8:	58 d9       	rcall	.-3408   	; 0x97a <displayNumber1>
    16ca:	17 c1       	rjmp	.+558    	; 0x18fa <modeChangeCode+0x3ca>
			break;
    16cc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_DIVISION:
			switch(tmpCodeData){
    16d0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	89 f0       	breq	.+34     	; 0x16fc <modeChangeCode+0x1cc>
    16da:	1c f4       	brge	.+6      	; 0x16e2 <modeChangeCode+0x1b2>
    16dc:	89 2b       	or	r24, r25
    16de:	39 f0       	breq	.+14     	; 0x16ee <modeChangeCode+0x1be>
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <modeChangeCode+0x1f2>
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	91 05       	cpc	r25, r1
    16e6:	89 f0       	breq	.+34     	; 0x170a <modeChangeCode+0x1da>
    16e8:	05 97       	sbiw	r24, 0x05	; 5
    16ea:	b1 f0       	breq	.+44     	; 0x1718 <modeChangeCode+0x1e8>
    16ec:	1a c0       	rjmp	.+52     	; 0x1722 <modeChangeCode+0x1f2>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
				case 0: tmpCodeData = 1; break;
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16f6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    16fa:	19 c0       	rjmp	.+50     	; 0x172e <modeChangeCode+0x1fe>
    16fc:	82 e0       	ldi	r24, 0x02	; 2
				case 1: tmpCodeData = 2; break;
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1704:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    1708:	12 c0       	rjmp	.+36     	; 0x172e <modeChangeCode+0x1fe>
    170a:	85 e0       	ldi	r24, 0x05	; 5
				case 2: tmpCodeData = 5; break;
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1712:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    1716:	0b c0       	rjmp	.+22     	; 0x172e <modeChangeCode+0x1fe>
    1718:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
				case 5: tmpCodeData = 0; break;
    171c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    1720:	06 c0       	rjmp	.+12     	; 0x172e <modeChangeCode+0x1fe>
				default: tmpCodeData = 1; break;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    172a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			}
			displayNumber1(tmpCodeData);
    172e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
    1732:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1736:	21 d9       	rcall	.-3518   	; 0x97a <displayNumber1>
    1738:	e0 c0       	rjmp	.+448    	; 0x18fa <modeChangeCode+0x3ca>
			break;
    173a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_AUTO:
			if(tmpCodeData){
    173e:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1742:	89 2b       	or	r24, r25
    1744:	91 f0       	breq	.+36     	; 0x176a <modeChangeCode+0x23a>
    1746:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
				tmpCodeData = 0;
    174a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    174e:	e9 ea       	ldi	r30, 0xA9	; 169
				fndData[3] = 0x00;
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	13 82       	std	Z+3, r1	; 0x03
    1754:	ae e0       	ldi	r26, 0x0E	; 14
				fndData[2] = fndTableChar['N' - 'A'];
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	1d 96       	adiw	r26, 0x0d	; 13
    175a:	8c 91       	ld	r24, X
    175c:	1d 97       	sbiw	r26, 0x0d	; 13
    175e:	82 83       	std	Z+2, r24	; 0x02
    1760:	1e 96       	adiw	r26, 0x0e	; 14
				fndData[1] = fndTableChar['O' - 'A'];
    1762:	8c 91       	ld	r24, X
    1764:	81 83       	std	Z+1, r24	; 0x01
    1766:	10 82       	st	Z, r1
				fndData[0] = 0x00;
    1768:	c8 c0       	rjmp	.+400    	; 0x18fa <modeChangeCode+0x3ca>
    176a:	81 e0       	ldi	r24, 0x01	; 1
			} else {
				tmpCodeData = 1;
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1772:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    1776:	e9 ea       	ldi	r30, 0xA9	; 169
				fndData[3] = 0x00;
    1778:	f1 e0       	ldi	r31, 0x01	; 1
    177a:	13 82       	std	Z+3, r1	; 0x03
    177c:	ae e0       	ldi	r26, 0x0E	; 14
				fndData[2] = fndTableChar['Y' - 'A'];
    177e:	b1 e0       	ldi	r27, 0x01	; 1
    1780:	58 96       	adiw	r26, 0x18	; 24
    1782:	8c 91       	ld	r24, X
    1784:	58 97       	sbiw	r26, 0x18	; 24
    1786:	82 83       	std	Z+2, r24	; 0x02
    1788:	14 96       	adiw	r26, 0x04	; 4
				fndData[1] = fndTableChar['E' - 'A'];
    178a:	8c 91       	ld	r24, X
    178c:	14 97       	sbiw	r26, 0x04	; 4
    178e:	81 83       	std	Z+1, r24	; 0x01
    1790:	52 96       	adiw	r26, 0x12	; 18
				fndData[0] = fndTableChar['S' - 'A'];
    1792:	8c 91       	ld	r24, X
    1794:	80 83       	st	Z, r24
    1796:	b1 c0       	rjmp	.+354    	; 0x18fa <modeChangeCode+0x3ca>
    1798:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
			}
			break;
		case CODE_ALARM:
		case CODE_OVER:
		case CODE_SETT:
			tmpFndData[editDigitPoint] = ( tmpFndData[editDigitPoint] > 8 ) ? 0 : tmpFndData[editDigitPoint] +1;
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	fc 01       	movw	r30, r24
    17a0:	e6 54       	subi	r30, 0x46	; 70
    17a2:	fe 4f       	sbci	r31, 0xFE	; 254
    17a4:	20 81       	ld	r18, Z
    17a6:	29 30       	cpi	r18, 0x09	; 9
    17a8:	10 f4       	brcc	.+4      	; 0x17ae <modeChangeCode+0x27e>
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <modeChangeCode+0x280>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	ea eb       	ldi	r30, 0xBA	; 186
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	dc 01       	movw	r26, r24
    17b6:	a6 54       	subi	r26, 0x46	; 70
    17b8:	be 4f       	sbci	r27, 0xFE	; 254
    17ba:	2c 93       	st	X, r18
    17bc:	43 81       	ldd	r20, Z+3	; 0x03
			tmpCodeData = tmpFndData[3] * 1000 +tmpFndData[2]*100 + tmpFndData[1] * 10 + tmpFndData[0];
    17be:	28 ee       	ldi	r18, 0xE8	; 232
    17c0:	33 e0       	ldi	r19, 0x03	; 3
    17c2:	42 9f       	mul	r20, r18
    17c4:	c0 01       	movw	r24, r0
    17c6:	43 9f       	mul	r20, r19
    17c8:	90 0d       	add	r25, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	22 81       	ldd	r18, Z+2	; 0x02
    17ce:	34 e6       	ldi	r19, 0x64	; 100
    17d0:	23 9f       	mul	r18, r19
    17d2:	80 0d       	add	r24, r0
    17d4:	91 1d       	adc	r25, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	21 81       	ldd	r18, Z+1	; 0x01
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	24 0f       	add	r18, r20
    17f0:	35 1f       	adc	r19, r21
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	20 81       	ld	r18, Z
    17f8:	82 0f       	add	r24, r18
    17fa:	91 1d       	adc	r25, r1
    17fc:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1800:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			displayWeight1(tmpCodeData);
    1804:	02 d8       	rcall	.-4092   	; 0x80a <displayWeight1>
    1806:	79 c0       	rjmp	.+242    	; 0x18fa <modeChangeCode+0x3ca>
			//displayNumber(tmpCodeData);
			break;
    1808:	8f 3d       	cpi	r24, 0xDF	; 223
		}
	}

	if(cmd == BTN_LEFT){
    180a:	09 f0       	breq	.+2      	; 0x180e <modeChangeCode+0x2de>
    180c:	76 c0       	rjmp	.+236    	; 0x18fa <modeChangeCode+0x3ca>
    180e:	21 15       	cp	r18, r1
		switch(codeNumber){
    1810:	31 05       	cpc	r19, r1
    1812:	41 f0       	breq	.+16     	; 0x1824 <modeChangeCode+0x2f4>
    1814:	0c f4       	brge	.+2      	; 0x1818 <modeChangeCode+0x2e8>
    1816:	71 c0       	rjmp	.+226    	; 0x18fa <modeChangeCode+0x3ca>
    1818:	24 50       	subi	r18, 0x04	; 4
    181a:	31 09       	sbc	r19, r1
    181c:	23 30       	cpi	r18, 0x03	; 3
    181e:	31 05       	cpc	r19, r1
    1820:	b8 f1       	brcs	.+110    	; 0x1890 <modeChangeCode+0x360>
    1822:	6b c0       	rjmp	.+214    	; 0x18fa <modeChangeCode+0x3ca>
    1824:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    1828:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    182c:	18 16       	cp	r1, r24
    182e:	19 06       	cpc	r1, r25
    1830:	0c f0       	brlt	.+2      	; 0x1834 <modeChangeCode+0x304>
    1832:	58 c0       	rjmp	.+176    	; 0x18e4 <modeChangeCode+0x3b4>
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    183a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    183e:	00 97       	sbiw	r24, 0x00	; 0
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    1840:	21 f4       	brne	.+8      	; 0x184a <modeChangeCode+0x31a>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <modeChangeCode+0x342>
    184a:	81 30       	cpi	r24, 0x01	; 1
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    184c:	91 05       	cpc	r25, r1
    184e:	21 f4       	brne	.+8      	; 0x1858 <modeChangeCode+0x328>
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <modeChangeCode+0x342>
    1858:	02 97       	sbiw	r24, 0x02	; 2
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    185a:	21 f4       	brne	.+8      	; 0x1864 <modeChangeCode+0x334>
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <modeChangeCode+0x342>
    1864:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
			else {
				tmpCodeData = 0;
    1868:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    186c:	81 e0       	ldi	r24, 0x01	; 1
				blinkCmdFlag = 1;
    186e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1872:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}
			codePoint = tmpCodeData;
    1876:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    187a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
    187e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
    1882:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
			displayWeight1(loadWeight);
    1886:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    188a:	0e 94 05 04 	call	0x80a	; 0x80a <displayWeight1>
    188e:	35 c0       	rjmp	.+106    	; 0x18fa <modeChangeCode+0x3ca>
			//displayNumber(loadWeight);
			break;
    1890:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    1894:	88 23       	and	r24, r24
    1896:	69 f1       	breq	.+90     	; 0x18f2 <modeChangeCode+0x3c2>
    1898:	81 50       	subi	r24, 0x01	; 1
    189a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
    189e:	81 30       	cpi	r24, 0x01	; 1
			switch(editDigitPoint){
    18a0:	51 f0       	breq	.+20     	; 0x18b6 <modeChangeCode+0x386>
    18a2:	28 f0       	brcs	.+10     	; 0x18ae <modeChangeCode+0x37e>
    18a4:	82 30       	cpi	r24, 0x02	; 2
    18a6:	59 f0       	breq	.+22     	; 0x18be <modeChangeCode+0x38e>
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	81 f4       	brne	.+32     	; 0x18cc <modeChangeCode+0x39c>
    18ac:	0c c0       	rjmp	.+24     	; 0x18c6 <modeChangeCode+0x396>
    18ae:	81 e0       	ldi	r24, 0x01	; 1
				case 0 : blinkCmdFlag = 0x01; break;
    18b0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <modeChangeCode+0x39c>
    18b6:	82 e0       	ldi	r24, 0x02	; 2
				case 1 : blinkCmdFlag = 0x02; break;
    18b8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <modeChangeCode+0x39c>
    18be:	84 e0       	ldi	r24, 0x04	; 4
				case 2 : blinkCmdFlag = 0x04; break;
    18c0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <modeChangeCode+0x39c>
    18c6:	88 e0       	ldi	r24, 0x08	; 8
				case 3 : blinkCmdFlag = 0x08; break;
    18c8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    18cc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}	
			displayWeight1(tmpCodeData);
    18d0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    18d4:	0e 94 05 04 	call	0x80a	; 0x80a <displayWeight1>
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <modeChangeCode+0x3ca>
			// displayNumber(tmpCodeData);
			break;
    18da:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
	}

	if(cmd == BTN_UP){
		switch(codeNumber){
		case CODE_POINT:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    18de:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    18e2:	bd ce       	rjmp	.-646    	; 0x165e <modeChangeCode+0x12e>
    18e4:	82 e0       	ldi	r24, 0x02	; 2
	}

	if(cmd == BTN_LEFT){
		switch(codeNumber){
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    18ec:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    18f0:	b5 cf       	rjmp	.-150    	; 0x185c <modeChangeCode+0x32c>
    18f2:	83 e0       	ldi	r24, 0x03	; 3
			//displayNumber(loadWeight);
			break;
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    18f4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
    18f8:	e6 cf       	rjmp	.-52     	; 0x18c6 <modeChangeCode+0x396>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
			// displayNumber(tmpCodeData);
			break;
		}
	}
	return 0;
}
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	08 95       	ret

00001900 <modeError>:
    1900:	cf 93       	push	r28
	fndData[0] = fndTableNum[errNo];
	blinkCmdFlag = 0x0f;			//
}

int modeError(uint8_t cmd)
{
    1902:	df 93       	push	r29
    1904:	c8 2f       	mov	r28, r24
	int i;
	uint8_t tmp;
	
	if( elaspMsecTime(cntModeErr) > 3000 ) {
    1906:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <cntModeErr>
    190a:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <cntModeErr+0x1>
    190e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <cntModeErr+0x2>
    1912:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <cntModeErr+0x3>
    1916:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <elaspMsecTime>
    191a:	69 3b       	cpi	r22, 0xB9	; 185
    191c:	7b 40       	sbci	r23, 0x0B	; 11
    191e:	81 05       	cpc	r24, r1
    1920:	91 05       	cpc	r25, r1
    1922:	08 f4       	brcc	.+2      	; 0x1926 <modeError+0x26>
    1924:	4b c0       	rjmp	.+150    	; 0x19bc <modeError+0xbc>
		machineState = mStateBk;		
    1926:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    192a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
		switch(mStateBk){
    192e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	31 f0       	breq	.+12     	; 0x1942 <modeError+0x42>
    1936:	18 f0       	brcs	.+6      	; 0x193e <modeError+0x3e>
    1938:	83 30       	cpi	r24, 0x03	; 3
    193a:	e1 f0       	breq	.+56     	; 0x1974 <modeError+0x74>
    193c:	45 c0       	rjmp	.+138    	; 0x19c8 <modeError+0xc8>
		case MODE_RUN:
			enterModeRun();
    193e:	93 db       	rcall	.-2266   	; 0x1066 <enterModeRun>
			break;
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <modeError+0xc8>
		case MODE_PASSWD:
			machineState = MODE_PASSWD;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
    1948:	ad e9       	ldi	r26, 0x9D	; 157
    194a:	b1 e0       	ldi	r27, 0x01	; 1
    194c:	c9 ea       	ldi	r28, 0xA9	; 169
    194e:	d1 e0       	ldi	r29, 0x01	; 1
    1950:	21 ea       	ldi	r18, 0xA1	; 161
    1952:	31 e0       	ldi	r19, 0x01	; 1
			for( i = 0 ; i < 4 ; i++){
				tmp = passWord[i];
    1954:	ed 91       	ld	r30, X+
				fndData[i] = fndTableNum[tmp];
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	ec 5f       	subi	r30, 0xFC	; 252
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	80 81       	ld	r24, Z
    195e:	89 93       	st	Y+, r24
		case MODE_RUN:
			enterModeRun();
			break;
		case MODE_PASSWD:
			machineState = MODE_PASSWD;
			for( i = 0 ; i < 4 ; i++){
    1960:	a2 17       	cp	r26, r18
    1962:	b3 07       	cpc	r27, r19
    1964:	b9 f7       	brne	.-18     	; 0x1954 <modeError+0x54>
				tmp = passWord[i];
				fndData[i] = fndTableNum[tmp];
			}
			blinkCmdFlag = 0x08;
    1966:	88 e0       	ldi	r24, 0x08	; 8
    1968:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
			editDigitPoint = 3;		// 1000
    196c:	83 e0       	ldi	r24, 0x03	; 3
    196e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
			break;
    1972:	2a c0       	rjmp	.+84     	; 0x19c8 <modeError+0xc8>
		case MODE_CHANGE_CODE	:
			
			if(codeNumber == CODE_AUTO){
    1974:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <codeNumber>
    1978:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <codeNumber+0x1>
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	a9 f4       	brne	.+42     	; 0x19ac <modeError+0xac>
				tmpCodeData = 0;
    1982:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    1986:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
				blinkCmdFlag = 0x0f;	//
    198a:	8f e0       	ldi	r24, 0x0F	; 15
    198c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
				fndData[3] = 0x00;
    1990:	e9 ea       	ldi	r30, 0xA9	; 169
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['N' - 'A'];
    1996:	ae e0       	ldi	r26, 0x0E	; 14
    1998:	b1 e0       	ldi	r27, 0x01	; 1
    199a:	1d 96       	adiw	r26, 0x0d	; 13
    199c:	8c 91       	ld	r24, X
    199e:	1d 97       	sbiw	r26, 0x0d	; 13
    19a0:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['O' - 'A'];
    19a2:	1e 96       	adiw	r26, 0x0e	; 14
    19a4:	8c 91       	ld	r24, X
    19a6:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = 0x00;
    19a8:	10 82       	st	Z, r1
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <modeError+0xc8>
			} else if ( codeNumber == CODE_SETT ) {
    19ac:	06 97       	sbiw	r24, 0x06	; 6
    19ae:	61 f4       	brne	.+24     	; 0x19c8 <modeError+0xc8>
				setEditTmpFndData(tmpCodeData);
    19b0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
    19b4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    19b8:	9b db       	rcall	.-2250   	; 0x10f0 <setEditTmpFndData>
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <modeError+0xc8>
			}
		}
	} else if(cmd == BTN_ENTER ){
    19bc:	cf 37       	cpi	r28, 0x7F	; 127
    19be:	21 f4       	brne	.+8      	; 0x19c8 <modeError+0xc8>
		machineState = mStateBk;
    19c0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    19c4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	}
	return 0;
}
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	08 95       	ret

000019d2 <initUart>:
	for( i = 0 ; i < 9 ; i++){
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;	
}
    19d2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    19d6:	87 e6       	ldi	r24, 0x67	; 103
    19d8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    19dc:	ed e9       	ldi	r30, 0x9D	; 157
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	86 60       	ori	r24, 0x06	; 6
    19e4:	80 83       	st	Z, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	87 7f       	andi	r24, 0xF7	; 247
    19ea:	80 83       	st	Z, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	8f 7c       	andi	r24, 0xCF	; 207
    19f0:	80 83       	st	Z, r24
    19f2:	88 e9       	ldi	r24, 0x98	; 152
    19f4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    19f8:	08 95       	ret

000019fa <transmitByte>:
    19fa:	eb e9       	ldi	r30, 0x9B	; 155
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	90 81       	ld	r25, Z
    1a00:	95 ff       	sbrs	r25, 5
    1a02:	fd cf       	rjmp	.-6      	; 0x19fe <transmitByte+0x4>
    1a04:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1a08:	08 95       	ret

00001a0a <__vector_30>:
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	0b b6       	in	r0, 0x3b	; 59
    1a16:	0f 92       	push	r0
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1a2c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagStx.1888>
    1a30:	81 11       	cpse	r24, r1
    1a32:	0a c0       	rjmp	.+20     	; 0x1a48 <__vector_30+0x3e>
    1a34:	92 30       	cpi	r25, 0x02	; 2
    1a36:	81 f5       	brne	.+96     	; 0x1a98 <__vector_30+0x8e>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <gUartIndex.1887>
    1a3e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <gUartRxBuffer>
    1a42:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <flagStx.1888>
    1a46:	28 c0       	rjmp	.+80     	; 0x1a98 <__vector_30+0x8e>
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	31 f5       	brne	.+76     	; 0x1a98 <__vector_30+0x8e>
    1a4c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <gUartIndex.1887>
    1a50:	8e 0f       	add	r24, r30
    1a52:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <gUartIndex.1887>
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	e4 59       	subi	r30, 0x94	; 148
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	90 83       	st	Z, r25
    1a5e:	93 30       	cpi	r25, 0x03	; 3
    1a60:	d9 f4       	brne	.+54     	; 0x1a98 <__vector_30+0x8e>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <gflagConnect+0x1>
    1a6a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <gflagConnect>
    1a6e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <flagStx.1888>
    1a72:	ec e6       	ldi	r30, 0x6C	; 108
    1a74:	f1 e0       	ldi	r31, 0x01	; 1
    1a76:	a6 e7       	ldi	r26, 0x76	; 118
    1a78:	b1 e0       	ldi	r27, 0x01	; 1
    1a7a:	22 e7       	ldi	r18, 0x72	; 114
    1a7c:	31 e0       	ldi	r19, 0x01	; 1
    1a7e:	81 91       	ld	r24, Z+
    1a80:	8d 93       	st	X+, r24
    1a82:	e2 17       	cp	r30, r18
    1a84:	f3 07       	cpc	r31, r19
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <__vector_30+0x74>
    1a88:	86 e0       	ldi	r24, 0x06	; 6
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <i.1885+0x1>
    1a90:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <i.1885>
    1a94:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <gUartIndex.1887>
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <sendToLargeFnd>:

void sendToLargeFnd( )
{
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29

	int i;
	char retVal[10]={0};

	RS485_TX_EN;
    1abe:	df 9a       	sbi	0x1b, 7	; 27

	gUartTxBuffer[0] = 0xAA;
    1ac0:	e6 e7       	ldi	r30, 0x76	; 118
    1ac2:	f1 e0       	ldi	r31, 0x01	; 1
    1ac4:	8a ea       	ldi	r24, 0xAA	; 170
    1ac6:	80 83       	st	Z, r24
	gUartTxBuffer[1] = 0x09;	
    1ac8:	89 e0       	ldi	r24, 0x09	; 9
    1aca:	81 83       	std	Z+1, r24	; 0x01

	// toAscii(loadWeight,codePoint, retVal);
	if( loadWeight < 0){
    1acc:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <loadWeight>
    1ad0:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <loadWeight+0x1>
    1ad4:	33 23       	and	r19, r19
    1ad6:	3c f4       	brge	.+14     	; 0x1ae6 <sendToLargeFnd+0x30>
		gUartTxBuffer[2] = retVal[0];
    1ad8:	12 82       	std	Z+2, r1	; 0x02
		gUartTxBuffer[3] = retVal[1];
    1ada:	13 82       	std	Z+3, r1	; 0x03
		gUartTxBuffer[4] = retVal[2];
    1adc:	14 82       	std	Z+4, r1	; 0x04
		gUartTxBuffer[5] = retVal[3];
    1ade:	15 82       	std	Z+5, r1	; 0x05
		gUartTxBuffer[7] = 0xbb;
    1ae0:	8b eb       	ldi	r24, 0xBB	; 187
    1ae2:	87 83       	std	Z+7, r24	; 0x07
    1ae4:	1a c0       	rjmp	.+52     	; 0x1b1a <sendToLargeFnd+0x64>
	} else {
		gUartTxBuffer[2] = loadWeight/1000;
    1ae6:	e6 e7       	ldi	r30, 0x76	; 118
    1ae8:	f1 e0       	ldi	r31, 0x01	; 1
    1aea:	c9 01       	movw	r24, r18
    1aec:	68 ee       	ldi	r22, 0xE8	; 232
    1aee:	73 e0       	ldi	r23, 0x03	; 3
    1af0:	50 d0       	rcall	.+160    	; 0x1b92 <__divmodhi4>
    1af2:	62 83       	std	Z+2, r22	; 0x02
		gUartTxBuffer[3] = (loadWeight%1000)/100;
    1af4:	c4 e6       	ldi	r28, 0x64	; 100
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	be 01       	movw	r22, r28
    1afa:	4b d0       	rcall	.+150    	; 0x1b92 <__divmodhi4>
    1afc:	63 83       	std	Z+3, r22	; 0x03
		gUartTxBuffer[4] = (loadWeight%100)/10;
    1afe:	c9 01       	movw	r24, r18
    1b00:	be 01       	movw	r22, r28
    1b02:	47 d0       	rcall	.+142    	; 0x1b92 <__divmodhi4>
    1b04:	ca e0       	ldi	r28, 0x0A	; 10
    1b06:	d0 e0       	ldi	r29, 0x00	; 0
    1b08:	be 01       	movw	r22, r28
    1b0a:	43 d0       	rcall	.+134    	; 0x1b92 <__divmodhi4>
    1b0c:	64 83       	std	Z+4, r22	; 0x04
		gUartTxBuffer[5] = loadWeight%10;
    1b0e:	c9 01       	movw	r24, r18
    1b10:	be 01       	movw	r22, r28
    1b12:	3f d0       	rcall	.+126    	; 0x1b92 <__divmodhi4>
    1b14:	85 83       	std	Z+5, r24	; 0x05
    1b16:	8b eb       	ldi	r24, 0xBB	; 187
		gUartTxBuffer[7] = 0xbb;
    1b18:	87 83       	std	Z+7, r24	; 0x07
    1b1a:	8f e5       	ldi	r24, 0x5F	; 95
    1b1c:	9d e6       	ldi	r25, 0x6D	; 109
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <sendToLargeFnd+0x68>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <sendToLargeFnd+0x6e>
    1b24:	00 00       	nop
    1b26:	c6 e7       	ldi	r28, 0x76	; 118
    1b28:	d1 e0       	ldi	r29, 0x01	; 1
    1b2a:	0e e7       	ldi	r16, 0x7E	; 126
    1b2c:	11 e0       	ldi	r17, 0x01	; 1
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
		transmitByte( gUartTxBuffer[i]);
    1b2e:	89 91       	ld	r24, Y+
    1b30:	64 df       	rcall	.-312    	; 0x19fa <transmitByte>
    1b32:	c0 17       	cp	r28, r16
		gUartTxBuffer[4] = (loadWeight%100)/10;
		gUartTxBuffer[5] = loadWeight%10;
		gUartTxBuffer[7] = 0xbb;
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
    1b34:	d1 07       	cpc	r29, r17
    1b36:	d9 f7       	brne	.-10     	; 0x1b2e <sendToLargeFnd+0x78>
    1b38:	8f e3       	ldi	r24, 0x3F	; 63
    1b3a:	9c e9       	ldi	r25, 0x9C	; 156
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <sendToLargeFnd+0x86>
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <sendToLargeFnd+0x8c>
    1b42:	00 00       	nop
    1b44:	df 98       	cbi	0x1b, 7	; 27
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;
    1b46:	df 91       	pop	r29
}
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <sciCommandProc>:
    1b50:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <startCount.1918>
void sciCommandProc()
{
	static uint32_t startCount=0;

	
	if( elaspMsecTime(startCount) > 500 ){
    1b54:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <startCount.1918+0x1>
    1b58:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <startCount.1918+0x2>
    1b5c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <startCount.1918+0x3>
    1b60:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <elaspMsecTime>
    1b64:	65 3f       	cpi	r22, 0xF5	; 245
    1b66:	71 40       	sbci	r23, 0x01	; 1
    1b68:	81 05       	cpc	r24, r1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	88 f0       	brcs	.+34     	; 0x1b90 <sciCommandProc+0x40>
		startCount = timerCounter2;
    1b6e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
    1b72:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
    1b76:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
    1b7a:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
    1b7e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <startCount.1918>
    1b82:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <startCount.1918+0x1>
    1b86:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <startCount.1918+0x2>
    1b8a:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <startCount.1918+0x3>
		sendToLargeFnd( );
    1b8e:	93 cf       	rjmp	.-218    	; 0x1ab6 <sendToLargeFnd>
    1b90:	08 95       	ret

00001b92 <__divmodhi4>:
    1b92:	97 fb       	bst	r25, 7
    1b94:	07 2e       	mov	r0, r23
    1b96:	16 f4       	brtc	.+4      	; 0x1b9c <__divmodhi4+0xa>
    1b98:	00 94       	com	r0
    1b9a:	06 d0       	rcall	.+12     	; 0x1ba8 <__divmodhi4_neg1>
    1b9c:	77 fd       	sbrc	r23, 7
    1b9e:	08 d0       	rcall	.+16     	; 0x1bb0 <__divmodhi4_neg2>
    1ba0:	36 d0       	rcall	.+108    	; 0x1c0e <__udivmodhi4>
    1ba2:	07 fc       	sbrc	r0, 7
    1ba4:	05 d0       	rcall	.+10     	; 0x1bb0 <__divmodhi4_neg2>
    1ba6:	3e f4       	brtc	.+14     	; 0x1bb6 <__divmodhi4_exit>

00001ba8 <__divmodhi4_neg1>:
    1ba8:	90 95       	com	r25
    1baa:	81 95       	neg	r24
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	08 95       	ret

00001bb0 <__divmodhi4_neg2>:
    1bb0:	70 95       	com	r23
    1bb2:	61 95       	neg	r22
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb6 <__divmodhi4_exit>:
    1bb6:	08 95       	ret

00001bb8 <__divmodsi4>:
    1bb8:	05 2e       	mov	r0, r21
    1bba:	97 fb       	bst	r25, 7
    1bbc:	16 f4       	brtc	.+4      	; 0x1bc2 <__divmodsi4+0xa>
    1bbe:	00 94       	com	r0
    1bc0:	0f d0       	rcall	.+30     	; 0x1be0 <__negsi2>
    1bc2:	57 fd       	sbrc	r21, 7
    1bc4:	05 d0       	rcall	.+10     	; 0x1bd0 <__divmodsi4_neg2>
    1bc6:	37 d0       	rcall	.+110    	; 0x1c36 <__udivmodsi4>
    1bc8:	07 fc       	sbrc	r0, 7
    1bca:	02 d0       	rcall	.+4      	; 0x1bd0 <__divmodsi4_neg2>
    1bcc:	46 f4       	brtc	.+16     	; 0x1bde <__divmodsi4_exit>
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <__negsi2>

00001bd0 <__divmodsi4_neg2>:
    1bd0:	50 95       	com	r21
    1bd2:	40 95       	com	r20
    1bd4:	30 95       	com	r19
    1bd6:	21 95       	neg	r18
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	4f 4f       	sbci	r20, 0xFF	; 255
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255

00001bde <__divmodsi4_exit>:
    1bde:	08 95       	ret

00001be0 <__negsi2>:
    1be0:	90 95       	com	r25
    1be2:	80 95       	com	r24
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	08 95       	ret

00001bf0 <__tablejump2__>:
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	00 24       	eor	r0, r0
    1bf6:	00 1c       	adc	r0, r0
    1bf8:	0b be       	out	0x3b, r0	; 59
    1bfa:	07 90       	elpm	r0, Z+
    1bfc:	f6 91       	elpm	r31, Z
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	09 94       	ijmp

00001c02 <__mulshisi3>:
    1c02:	b7 ff       	sbrs	r27, 7
    1c04:	3a c0       	rjmp	.+116    	; 0x1c7a <__muluhisi3>

00001c06 <__mulohisi3>:
    1c06:	39 d0       	rcall	.+114    	; 0x1c7a <__muluhisi3>
    1c08:	82 1b       	sub	r24, r18
    1c0a:	93 0b       	sbc	r25, r19
    1c0c:	08 95       	ret

00001c0e <__udivmodhi4>:
    1c0e:	aa 1b       	sub	r26, r26
    1c10:	bb 1b       	sub	r27, r27
    1c12:	51 e1       	ldi	r21, 0x11	; 17
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <__udivmodhi4_ep>

00001c16 <__udivmodhi4_loop>:
    1c16:	aa 1f       	adc	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	a6 17       	cp	r26, r22
    1c1c:	b7 07       	cpc	r27, r23
    1c1e:	10 f0       	brcs	.+4      	; 0x1c24 <__udivmodhi4_ep>
    1c20:	a6 1b       	sub	r26, r22
    1c22:	b7 0b       	sbc	r27, r23

00001c24 <__udivmodhi4_ep>:
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	5a 95       	dec	r21
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__udivmodhi4_loop>
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	08 95       	ret

00001c36 <__udivmodsi4>:
    1c36:	a1 e2       	ldi	r26, 0x21	; 33
    1c38:	1a 2e       	mov	r1, r26
    1c3a:	aa 1b       	sub	r26, r26
    1c3c:	bb 1b       	sub	r27, r27
    1c3e:	fd 01       	movw	r30, r26
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <__udivmodsi4_ep>

00001c42 <__udivmodsi4_loop>:
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	ee 1f       	adc	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	a2 17       	cp	r26, r18
    1c4c:	b3 07       	cpc	r27, r19
    1c4e:	e4 07       	cpc	r30, r20
    1c50:	f5 07       	cpc	r31, r21
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__udivmodsi4_ep>
    1c54:	a2 1b       	sub	r26, r18
    1c56:	b3 0b       	sbc	r27, r19
    1c58:	e4 0b       	sbc	r30, r20
    1c5a:	f5 0b       	sbc	r31, r21

00001c5c <__udivmodsi4_ep>:
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	77 1f       	adc	r23, r23
    1c60:	88 1f       	adc	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	1a 94       	dec	r1
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <__udivmodsi4_loop>
    1c68:	60 95       	com	r22
    1c6a:	70 95       	com	r23
    1c6c:	80 95       	com	r24
    1c6e:	90 95       	com	r25
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	bd 01       	movw	r22, r26
    1c76:	cf 01       	movw	r24, r30
    1c78:	08 95       	ret

00001c7a <__muluhisi3>:
    1c7a:	09 d0       	rcall	.+18     	; 0x1c8e <__umulhisi3>
    1c7c:	a5 9f       	mul	r26, r21
    1c7e:	90 0d       	add	r25, r0
    1c80:	b4 9f       	mul	r27, r20
    1c82:	90 0d       	add	r25, r0
    1c84:	a4 9f       	mul	r26, r20
    1c86:	80 0d       	add	r24, r0
    1c88:	91 1d       	adc	r25, r1
    1c8a:	11 24       	eor	r1, r1
    1c8c:	08 95       	ret

00001c8e <__umulhisi3>:
    1c8e:	a2 9f       	mul	r26, r18
    1c90:	b0 01       	movw	r22, r0
    1c92:	b3 9f       	mul	r27, r19
    1c94:	c0 01       	movw	r24, r0
    1c96:	a3 9f       	mul	r26, r19
    1c98:	70 0d       	add	r23, r0
    1c9a:	81 1d       	adc	r24, r1
    1c9c:	11 24       	eor	r1, r1
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	b2 9f       	mul	r27, r18
    1ca2:	70 0d       	add	r23, r0
    1ca4:	81 1d       	adc	r24, r1
    1ca6:	11 24       	eor	r1, r1
    1ca8:	91 1d       	adc	r25, r1
    1caa:	08 95       	ret

00001cac <_exit>:
    1cac:	f8 94       	cli

00001cae <__stop_program>:
    1cae:	ff cf       	rjmp	.-2      	; 0x1cae <__stop_program>
