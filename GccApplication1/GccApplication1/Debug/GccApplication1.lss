
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001c70  00001d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800128  00800128  00001d2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026a5  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcc  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001da4  00000000  00000000  000055ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  00007394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cb  00000000  00000000  000078e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a67  00000000  00000000  000082af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009d16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__vector_10>
      2a:	00 00       	nop
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
      54:	81 c2       	rjmp	.+1282   	; 0x558 <__vector_21>
      56:	00 00       	nop
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_30>
      7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb 00       	.word	0x00fb	; ????
      8e:	00 01       	movw	r0, r0
      90:	05 01       	movw	r0, r10
      92:	0a 01       	movw	r0, r20
      94:	0f 01       	movw	r0, r30
      96:	14 01       	movw	r2, r8
      98:	19 01       	movw	r2, r18
      9a:	27 01       	movw	r4, r14
      9c:	1e 01       	movw	r2, r28
      9e:	23 01       	movw	r4, r6
      a0:	4e 08       	sbc	r4, r14
      a2:	76 08       	sbc	r7, r6
      a4:	83 08       	sbc	r8, r3
      a6:	90 08       	sbc	r9, r0
      a8:	a5 08       	sbc	r10, r5
      aa:	af 08       	sbc	r10, r15
      ac:	b9 08       	sbc	r11, r9
      ae:	c3 08       	sbc	r12, r3
      b0:	03 09       	sbc	r16, r3
      b2:	17 09       	sbc	r17, r7
      b4:	2b 09       	sbc	r18, r11
      b6:	3c 09       	sbc	r19, r12
      b8:	4e 09       	sbc	r20, r14
      ba:	5d 09       	sbc	r21, r13
      bc:	71 09       	sbc	r23, r1
      be:	82 09       	sbc	r24, r2

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e1       	ldi	r29, 0x10	; 16
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 e7       	ldi	r30, 0x70	; 112
      d4:	fc e1       	ldi	r31, 0x1C	; 28
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a7 3d       	cpi	r26, 0xD7	; 215
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	14 d7       	rcall	.+3624   	; 0xf20 <main>
      f8:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <_exit>

000000fc <__bad_interrupt>:
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <at93c46_ewen>:
#include "extern.h"

#define DELAY_SPI	10
void at93c46_ewen(void)
{
	cbi(PORTB,CS);
      fe:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	8f b9       	out	0x0f, r24	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	8f e3       	ldi	r24, 0x3F	; 63
     106:	9c e9       	ldi	r25, 0x9C	; 156
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <at93c46_ewen+0xa>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <at93c46_ewen+0x10>
     10e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     110:	80 e6       	ldi	r24, 0x60	; 96
     112:	8f b9       	out	0x0f, r24	; 15
     114:	8f e3       	ldi	r24, 0x3F	; 63
     116:	9c e9       	ldi	r25, 0x9C	; 156
     118:	01 97       	sbiw	r24, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <at93c46_ewen+0x1a>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <at93c46_ewen+0x20>
     11e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     120:	c0 9a       	sbi	0x18, 0	; 24
     122:	08 95       	ret

00000124 <at93c46_ewds>:
}

void at93c46_ewds(void)
{
	cbi(PORTB,CS);
     124:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	8f b9       	out	0x0f, r24	; 15
     12a:	8f e3       	ldi	r24, 0x3F	; 63
     12c:	9c e9       	ldi	r25, 0x9C	; 156
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <at93c46_ewds+0xa>
     132:	00 c0       	rjmp	.+0      	; 0x134 <at93c46_ewds+0x10>
     134:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     136:	80 e6       	ldi	r24, 0x60	; 96
     138:	8f b9       	out	0x0f, r24	; 15
     13a:	8f e3       	ldi	r24, 0x3F	; 63
     13c:	9c e9       	ldi	r25, 0x9C	; 156
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <at93c46_ewds+0x1a>
     142:	00 c0       	rjmp	.+0      	; 0x144 <at93c46_ewds+0x20>
     144:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     146:	c0 9a       	sbi	0x18, 0	; 24
     148:	08 95       	ret

0000014a <at93c46_read>:
}
uint8_t at93c46_read(uint8_t addr)
{
	uint8_t high, low;
	
	cbi(PORTB, CS);
     14a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x03;
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	9f b9       	out	0x0f, r25	; 15
     150:	ef e3       	ldi	r30, 0x3F	; 63
     152:	fc e9       	ldi	r31, 0x9C	; 156
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <at93c46_read+0xa>
     158:	00 c0       	rjmp	.+0      	; 0x15a <at93c46_read+0x10>
     15a:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr;
     15c:	8f b9       	out	0x0f, r24	; 15
     15e:	8f e3       	ldi	r24, 0x3F	; 63
     160:	9c e9       	ldi	r25, 0x9C	; 156
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <at93c46_read+0x18>
     166:	00 c0       	rjmp	.+0      	; 0x168 <at93c46_read+0x1e>
     168:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x00;
     16a:	1f b8       	out	0x0f, r1	; 15
     16c:	ef e3       	ldi	r30, 0x3F	; 63
     16e:	fc e9       	ldi	r31, 0x9C	; 156
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <at93c46_read+0x26>
     174:	00 c0       	rjmp	.+0      	; 0x176 <at93c46_read+0x2c>
     176:	00 00       	nop
	_delay_ms(DELAY_SPI);
	high = SPDR;
     178:	2f b1       	in	r18, 0x0f	; 15
	SPDR = 0x00;
     17a:	1f b8       	out	0x0f, r1	; 15
     17c:	8f e3       	ldi	r24, 0x3F	; 63
     17e:	9c e9       	ldi	r25, 0x9C	; 156
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <at93c46_read+0x36>
     184:	00 c0       	rjmp	.+0      	; 0x186 <at93c46_read+0x3c>
     186:	00 00       	nop
	_delay_ms(DELAY_SPI);
	low = SPDR;
     188:	9f b1       	in	r25, 0x0f	; 15
	sbi(PORTB, CS);
     18a:	c0 9a       	sbi	0x18, 0	; 24
	return (high << 1) + (low >> 7);
     18c:	22 0f       	add	r18, r18
     18e:	89 2f       	mov	r24, r25
     190:	88 1f       	adc	r24, r24
     192:	88 27       	eor	r24, r24
     194:	88 1f       	adc	r24, r24
}
     196:	82 0f       	add	r24, r18
     198:	08 95       	ret

0000019a <at93c46_write>:

void at93c46_write(uint8_t addr, uint8_t dat)
{
	cbi(PORTB, CS);
     19a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     19c:	92 e0       	ldi	r25, 0x02	; 2
     19e:	9f b9       	out	0x0f, r25	; 15
     1a0:	ef e3       	ldi	r30, 0x3F	; 63
     1a2:	fc e9       	ldi	r31, 0x9C	; 156
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <at93c46_write+0xa>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <at93c46_write+0x10>
     1aa:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr | 0x80;
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	8f b9       	out	0x0f, r24	; 15
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	9c e9       	ldi	r25, 0x9C	; 156
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <at93c46_write+0x1a>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <at93c46_write+0x20>
     1ba:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = dat;
     1bc:	6f b9       	out	0x0f, r22	; 15
     1be:	ef e3       	ldi	r30, 0x3F	; 63
     1c0:	fc e9       	ldi	r31, 0x9C	; 156
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <at93c46_write+0x28>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <at93c46_write+0x2e>
     1c8:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB, CS);
     1ca:	c0 9a       	sbi	0x18, 0	; 24
     1cc:	8f ed       	ldi	r24, 0xDF	; 223
     1ce:	9e e2       	ldi	r25, 0x2E	; 46
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <at93c46_write+0x36>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <at93c46_write+0x3c>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <saveCode>:
	_delay_ms(3);
}

int16_t saveCode(int codeNo,int16_t codeData)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
     1e4:	eb 01       	movw	r28, r22
	uint8_t tmpSPI1,tmpSPI2;
	uint8_t tmpData1,tmpData2;

	switch(codeNo){
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	91 05       	cpc	r25, r1
     1ea:	88 f5       	brcc	.+98     	; 0x24e <saveCode+0x74>
     1ec:	fc 01       	movw	r30, r24
     1ee:	ea 5b       	subi	r30, 0xBA	; 186
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__tablejump2__>
		case 0: codePoint		= codeData; break;
     1f6:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <codePoint+0x1>
     1fa:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <codePoint>
     1fe:	27 c0       	rjmp	.+78     	; 0x24e <saveCode+0x74>
		case 1: codeFilt		= codeData; break;
     200:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <codeFilt+0x1>
     204:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <codeFilt>
     208:	22 c0       	rjmp	.+68     	; 0x24e <saveCode+0x74>
		case 2: codeDivision	= codeData; break;
     20a:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <codeDivision+0x1>
     20e:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <codeDivision>
     212:	1d c0       	rjmp	.+58     	; 0x24e <saveCode+0x74>
		case 3: codeAutoZero	= codeData; break;
     214:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <codeAutoZero+0x1>
     218:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <codeAutoZero>
     21c:	18 c0       	rjmp	.+48     	; 0x24e <saveCode+0x74>
		case 4: codeAlarm		= codeData; break;
     21e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <codeAlarm+0x1>
     222:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <codeAlarm>
     226:	13 c0       	rjmp	.+38     	; 0x24e <saveCode+0x74>
		case 5: codeOver		= codeData; break;
     228:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <codeOver+0x1>
     22c:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <codeOver>
     230:	0e c0       	rjmp	.+28     	; 0x24e <saveCode+0x74>
		case 6: codeWeight		= codeData; break;
     232:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <codeWeight+0x1>
     236:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <codeWeight>
     23a:	09 c0       	rjmp	.+18     	; 0x24e <saveCode+0x74>
		case 8: codeAdcSpan		= codeData; break;
     23c:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <codeAdcSpan+0x1>
     240:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <codeAdcSpan>
     244:	04 c0       	rjmp	.+8      	; 0x24e <saveCode+0x74>
		case 9: codeAdcZero		= codeData; break;
     246:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <codeAdcZero+0x1>
     24a:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <codeAdcZero>
	
//	initCodeData();
	tmpData1 = (uint8_t)(codeData >> 8 );
	tmpData2 = (uint8_t)(codeData % 256);
	
	at93c46_ewen();	
     24e:	57 df       	rcall	.-338    	; 0xfe <at93c46_ewen>
	at93c46_write(codeNo * 2, tmpData1);
     250:	00 0f       	add	r16, r16
     252:	6d 2f       	mov	r22, r29
     254:	80 2f       	mov	r24, r16
     256:	a1 df       	rcall	.-190    	; 0x19a <at93c46_write>
	at93c46_write(codeNo * 2+1, tmpData2);
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	10 0f       	add	r17, r16
     25c:	be 01       	movw	r22, r28
     25e:	70 78       	andi	r23, 0x80	; 128
     260:	77 23       	and	r23, r23
     262:	2c f4       	brge	.+10     	; 0x26e <saveCode+0x94>
     264:	61 50       	subi	r22, 0x01	; 1
     266:	71 09       	sbc	r23, r1
     268:	7f 6f       	ori	r23, 0xFF	; 255
     26a:	6f 5f       	subi	r22, 0xFF	; 255
     26c:	7f 4f       	sbci	r23, 0xFF	; 255
     26e:	81 2f       	mov	r24, r17
	at93c46_ewds();
     270:	94 df       	rcall	.-216    	; 0x19a <at93c46_write>
     272:	58 df       	rcall	.-336    	; 0x124 <at93c46_ewds>
		
	tmpSPI1 = at93c46_read(codeNo * 2    );
     274:	80 2f       	mov	r24, r16
     276:	69 df       	rcall	.-302    	; 0x14a <at93c46_read>
     278:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     27a:	81 2f       	mov	r24, r17
     27c:	66 df       	rcall	.-308    	; 0x14a <at93c46_read>
     27e:	2c 2f       	mov	r18, r28
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	32 2f       	mov	r19, r18
     284:	22 27       	eor	r18, r18
     286:	a9 01       	movw	r20, r18
}
     288:	48 0f       	add	r20, r24
     28a:	51 1d       	adc	r21, r1
     28c:	ca 01       	movw	r24, r20
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <readCode>:
     298:	cf 93       	push	r28

int16_t readCode(int codeNo)
{
     29a:	df 93       	push	r29
	uint8_t tmpSPI1,tmpSPI2;

	tmpSPI1 = at93c46_read(codeNo * 2    );
     29c:	d8 2f       	mov	r29, r24
     29e:	dd 0f       	add	r29, r29
     2a0:	8d 2f       	mov	r24, r29
     2a2:	53 df       	rcall	.-346    	; 0x14a <at93c46_read>
     2a4:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	8d 0f       	add	r24, r29
     2aa:	4f df       	rcall	.-354    	; 0x14a <at93c46_read>
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     2ac:	2c 2f       	mov	r18, r28
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	32 2f       	mov	r19, r18
     2b2:	22 27       	eor	r18, r18
}
     2b4:	a9 01       	movw	r20, r18
     2b6:	48 0f       	add	r20, r24
     2b8:	51 1d       	adc	r21, r1
     2ba:	ca 01       	movw	r24, r20
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <readRomData>:

int readRomData(void)
{	

	codePoint = readCode(0);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	e8 df       	rcall	.-48     	; 0x298 <readCode>
     2c8:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
     2cc:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     2d0:	03 97       	sbiw	r24, 0x03	; 3
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <readRomData+0x14>
     2d4:	53 c0       	rjmp	.+166    	; 0x37c <readRomData+0xba>
	
	codeFilt		= readCode(1);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	de df       	rcall	.-68     	; 0x298 <readCode>
     2dc:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <codeFilt+0x1>
     2e0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <codeFilt>
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     2e4:	0a 97       	sbiw	r24, 0x0a	; 10
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <readRomData+0x28>
     2e8:	4c c0       	rjmp	.+152    	; 0x382 <readRomData+0xc0>

	codeDivision	= readCode(2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	d4 df       	rcall	.-88     	; 0x298 <readCode>
     2f0:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <codeDivision+0x1>
     2f4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <codeDivision>
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     2f8:	06 97       	sbiw	r24, 0x06	; 6
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <readRomData+0x3c>

	codeAutoZero	= readCode(3);
     2fc:	45 c0       	rjmp	.+138    	; 0x388 <readRomData+0xc6>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	ca df       	rcall	.-108    	; 0x298 <readCode>
     304:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <codeAutoZero+0x1>
     308:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <codeAutoZero>
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     30c:	02 97       	sbiw	r24, 0x02	; 2
     30e:	08 f0       	brcs	.+2      	; 0x312 <readRomData+0x50>

	codeAlarm		= readCode(4);
     310:	3e c0       	rjmp	.+124    	; 0x38e <readRomData+0xcc>
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	c0 df       	rcall	.-128    	; 0x298 <readCode>
     318:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <codeAlarm+0x1>
     31c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <codeAlarm>
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	97 42       	sbci	r25, 0x27	; 39

	codeOver		= readCode(5);
     324:	b8 f5       	brcc	.+110    	; 0x394 <readRomData+0xd2>
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	b6 df       	rcall	.-148    	; 0x298 <readCode>
     32c:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <codeOver+0x1>
     330:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <codeOver>
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     334:	80 31       	cpi	r24, 0x10	; 16
     336:	97 42       	sbci	r25, 0x27	; 39

	codeWeight		= readCode(6);
     338:	80 f5       	brcc	.+96     	; 0x39a <readRomData+0xd8>
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ac df       	rcall	.-168    	; 0x298 <readCode>
     340:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <codeWeight+0x1>
     344:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <codeWeight>
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	97 42       	sbci	r25, 0x27	; 39

	codeAdcSpan	= readCode(8);
     34c:	48 f5       	brcc	.+82     	; 0x3a0 <readRomData+0xde>
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a2 df       	rcall	.-188    	; 0x298 <readCode>
     354:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <codeAdcSpan+0x1>
     358:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <codeAdcSpan>
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     35c:	80 31       	cpi	r24, 0x10	; 16
     35e:	97 42       	sbci	r25, 0x27	; 39

	codeAdcZero	= readCode(9);
     360:	10 f5       	brcc	.+68     	; 0x3a6 <readRomData+0xe4>
     362:	89 e0       	ldi	r24, 0x09	; 9
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	98 df       	rcall	.-208    	; 0x298 <readCode>
     368:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <codeAdcZero+0x1>
     36c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <codeAdcZero>
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     370:	80 31       	cpi	r24, 0x10	; 16
     372:	97 42       	sbci	r25, 0x27	; 39
     374:	d8 f4       	brcc	.+54     	; 0x3ac <readRomData+0xea>
	
	return -1;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	9f ef       	ldi	r25, 0xFF	; 255
     37a:	08 95       	ret

int readRomData(void)
{	

	codePoint = readCode(0);
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     37c:	86 e4       	ldi	r24, 0x46	; 70
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 95       	ret
	
	codeFilt		= readCode(1);
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     382:	87 e4       	ldi	r24, 0x47	; 71
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	08 95       	ret

	codeDivision	= readCode(2);
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     388:	88 e4       	ldi	r24, 0x48	; 72
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	08 95       	ret

	codeAutoZero	= readCode(3);
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     38e:	89 e4       	ldi	r24, 0x49	; 73
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret

	codeAlarm		= readCode(4);
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     394:	8a e4       	ldi	r24, 0x4A	; 74
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret

	codeOver		= readCode(5);
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     39a:	8b e4       	ldi	r24, 0x4B	; 75
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret

	codeWeight		= readCode(6);
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     3a0:	8c e4       	ldi	r24, 0x4C	; 76
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

	codeAdcSpan	= readCode(8);
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     3a6:	8e e4       	ldi	r24, 0x4E	; 78
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret

	codeAdcZero	= readCode(9);
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     3ac:	8f e4       	ldi	r24, 0x4F	; 79
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	
	return -1;
}
     3b0:	08 95       	ret

000003b2 <elaspMsecTime>:
}

uint8_t getCommand(void)
{
	return getButton();
}
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     3c2:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     3c6:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     3ca:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     3ce:	06 17       	cp	r16, r22
     3d0:	17 07       	cpc	r17, r23
     3d2:	28 07       	cpc	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	a8 f4       	brcc	.+42     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3d8:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     3dc:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     3e0:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     3e4:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     3e8:	01 50       	subi	r16, 0x01	; 1
     3ea:	11 09       	sbc	r17, r1
     3ec:	21 09       	sbc	r18, r1
     3ee:	31 09       	sbc	r19, r1
     3f0:	68 01       	movw	r12, r16
     3f2:	79 01       	movw	r14, r18
     3f4:	c6 1a       	sub	r12, r22
     3f6:	d7 0a       	sbc	r13, r23
     3f8:	e8 0a       	sbc	r14, r24
     3fa:	f9 0a       	sbc	r15, r25
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	10 c0       	rjmp	.+32     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     402:	00 91 84 01 	lds	r16, 0x0184	; 0x800184 <timerCounter2>
     406:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <timerCounter2+0x1>
     40a:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <timerCounter2+0x2>
     40e:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <timerCounter2+0x3>
     412:	68 01       	movw	r12, r16
     414:	79 01       	movw	r14, r18
     416:	c6 1a       	sub	r12, r22
     418:	d7 0a       	sbc	r13, r23
     41a:	e8 0a       	sbc	r14, r24
     41c:	f9 0a       	sbc	r15, r25
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <__vector_10>:
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0b b6       	in	r0, 0x3b	; 59
     43c:	0f 92       	push	r0
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
     44e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     452:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     456:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     45a:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	a1 1d       	adc	r26, r1
     462:	b1 1d       	adc	r27, r1
     464:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <timerCounter2>
     468:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <timerCounter2+0x1>
     46c:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <timerCounter2+0x2>
     470:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <timerCounter2+0x3>
     474:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <blinkCount.1898>
     478:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <blinkCount.1898+0x1>
     47c:	81 39       	cpi	r24, 0x91	; 145
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	92 07       	cpc	r25, r18
     482:	08 f0       	brcs	.+2      	; 0x486 <__vector_10+0x56>
     484:	50 c0       	rjmp	.+160    	; 0x526 <__vector_10+0xf6>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <blinkCount.1898+0x1>
     48c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <blinkCount.1898>
     490:	89 2b       	or	r24, r25
     492:	39 f4       	brne	.+14     	; 0x4a2 <__vector_10+0x72>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <blinkFlagState.1899>
     49a:	91 11       	cpse	r25, r1
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <blinkFlagState.1899>
     4a2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fndDigitCount.1897>
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	10 f4       	brcc	.+4      	; 0x4ae <__vector_10+0x7e>
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__vector_10+0x80>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fndDigitCount.1897>
     4b4:	e8 2f       	mov	r30, r24
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	e7 55       	subi	r30, 0x57	; 87
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	90 81       	ld	r25, Z
     4be:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <blinkFlagState.1899>
     4c2:	22 23       	and	r18, r18
     4c4:	11 f1       	breq	.+68     	; 0x50a <__vector_10+0xda>
     4c6:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <blinkCmdFlag>
     4ca:	32 2f       	mov	r19, r18
     4cc:	3f 70       	andi	r19, 0x0F	; 15
     4ce:	3f 30       	cpi	r19, 0x0F	; 15
     4d0:	a9 f0       	breq	.+42     	; 0x4fc <__vector_10+0xcc>
     4d2:	81 11       	cpse	r24, r1
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__vector_10+0xac>
     4d6:	20 ff       	sbrs	r18, 0
     4d8:	18 c0       	rjmp	.+48     	; 0x50a <__vector_10+0xda>
     4da:	12 c0       	rjmp	.+36     	; 0x500 <__vector_10+0xd0>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	19 f4       	brne	.+6      	; 0x4e6 <__vector_10+0xb6>
     4e0:	21 ff       	sbrs	r18, 1
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <__vector_10+0xda>
     4e4:	0f c0       	rjmp	.+30     	; 0x504 <__vector_10+0xd4>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <__vector_10+0xc0>
     4ea:	22 ff       	sbrs	r18, 2
     4ec:	0e c0       	rjmp	.+28     	; 0x50a <__vector_10+0xda>
     4ee:	0c c0       	rjmp	.+24     	; 0x508 <__vector_10+0xd8>
     4f0:	83 30       	cpi	r24, 0x03	; 3
     4f2:	59 f4       	brne	.+22     	; 0x50a <__vector_10+0xda>
     4f4:	23 ff       	sbrs	r18, 3
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <__vector_10+0xda>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <__vector_10+0xda>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_10+0xda>
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	03 c0       	rjmp	.+6      	; 0x50a <__vector_10+0xda>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	01 c0       	rjmp	.+2      	; 0x50a <__vector_10+0xda>
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	8b b3       	in	r24, 0x1b	; 27
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	8b bb       	out	0x1b, r24	; 27
     510:	2b b3       	in	r18, 0x1b	; 27
     512:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <fndDigitCount.1897>
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	e0 50       	subi	r30, 0x00	; 0
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	80 81       	ld	r24, Z
     51e:	82 2b       	or	r24, r18
     520:	8b bb       	out	0x1b, r24	; 27
     522:	95 bb       	out	0x15, r25	; 21
     524:	05 c0       	rjmp	.+10     	; 0x530 <__vector_10+0x100>
     526:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <blinkCount.1898+0x1>
     52a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <blinkCount.1898>
     52e:	b2 cf       	rjmp	.-156    	; 0x494 <__vector_10+0x64>
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0b be       	out	0x3b, r0	; 59
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <initADC>:
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	87 b9       	out	0x07, r24	; 7
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	86 b9       	out	0x06, r24	; 6
     556:	08 95       	ret

00000558 <__vector_21>:
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	0b b6       	in	r0, 0x3b	; 59
     564:	0f 92       	push	r0
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	7f 93       	push	r23
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
     57a:	24 b1       	in	r18, 0x04	; 4
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	83 70       	andi	r24, 0x03	; 3
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	98 2f       	mov	r25, r24
     584:	88 27       	eor	r24, r24
     586:	82 0f       	add	r24, r18
     588:	91 1d       	adc	r25, r1
     58a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <testjk+0x1>
     58e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <testjk>
     592:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <adcRingCount.1909>
     596:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <adcRingCount.1909+0x1>
     59a:	fa 01       	movw	r30, r20
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ea 5b       	subi	r30, 0xBA	; 186
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <adcWeight>
     5a8:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <adcWeight+0x1>
     5ac:	60 81       	ld	r22, Z
     5ae:	71 81       	ldd	r23, Z+1	; 0x01
     5b0:	26 1b       	sub	r18, r22
     5b2:	37 0b       	sbc	r19, r23
     5b4:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <adcWeightIn>
     5b8:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     5bc:	71 83       	std	Z+1, r23	; 0x01
     5be:	60 83       	st	Z, r22
     5c0:	82 0f       	add	r24, r18
     5c2:	93 1f       	adc	r25, r19
     5c4:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <adcWeight+0x1>
     5c8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <adcWeight>
     5cc:	4f 30       	cpi	r20, 0x0F	; 15
     5ce:	51 05       	cpc	r21, r1
     5d0:	1c f4       	brge	.+6      	; 0x5d8 <__vector_21+0x80>
     5d2:	4f 5f       	subi	r20, 0xFF	; 255
     5d4:	5f 4f       	sbci	r21, 0xFF	; 255
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__vector_21+0x84>
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <adcRingCount.1909+0x1>
     5e0:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <adcRingCount.1909>
     5e4:	9c 01       	movw	r18, r24
     5e6:	99 23       	and	r25, r25
     5e8:	14 f4       	brge	.+4      	; 0x5ee <__vector_21+0x96>
     5ea:	21 5f       	subi	r18, 0xF1	; 241
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	35 95       	asr	r19
     5f0:	27 95       	ror	r18
     5f2:	35 95       	asr	r19
     5f4:	27 95       	ror	r18
     5f6:	35 95       	asr	r19
     5f8:	27 95       	ror	r18
     5fa:	35 95       	asr	r19
     5fc:	27 95       	ror	r18
     5fe:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <adcWeightIn+0x1>
     602:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <adcWeightIn>
     606:	36 9a       	sbi	0x06, 6	; 6
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	7f 91       	pop	r23
     612:	6f 91       	pop	r22
     614:	5f 91       	pop	r21
     616:	4f 91       	pop	r20
     618:	3f 91       	pop	r19
     61a:	2f 91       	pop	r18
     61c:	0f 90       	pop	r0
     61e:	0b be       	out	0x3b, r0	; 59
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <getButton>:
     62a:	86 b3       	in	r24, 0x16	; 22
     62c:	8f 60       	ori	r24, 0x0F	; 15
     62e:	8f 3f       	cpi	r24, 0xFF	; 255
     630:	c1 f0       	breq	.+48     	; 0x662 <getButton+0x38>
     632:	2f ef       	ldi	r18, 0xFF	; 255
     634:	39 ef       	ldi	r19, 0xF9	; 249
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	21 50       	subi	r18, 0x01	; 1
     63a:	30 40       	sbci	r19, 0x00	; 0
     63c:	80 40       	sbci	r24, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <getButton+0xe>
     640:	00 c0       	rjmp	.+0      	; 0x642 <getButton+0x18>
     642:	00 00       	nop
     644:	86 b3       	in	r24, 0x16	; 22
     646:	8f 60       	ori	r24, 0x0F	; 15
     648:	8f 3f       	cpi	r24, 0xFF	; 255
     64a:	59 f0       	breq	.+22     	; 0x662 <getButton+0x38>
     64c:	86 b3       	in	r24, 0x16	; 22
     64e:	8f 60       	ori	r24, 0x0F	; 15
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	21 ee       	ldi	r18, 0xE1	; 225
     654:	34 e0       	ldi	r19, 0x04	; 4
     656:	91 50       	subi	r25, 0x01	; 1
     658:	20 40       	sbci	r18, 0x00	; 0
     65a:	30 40       	sbci	r19, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <getButton+0x2c>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <getButton+0x36>
     660:	00 00       	nop
     662:	08 95       	ret

00000664 <displayWeight>:

uint8_t tmpDigit[4];

void displayWeight(int16_t weightIn)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     66a:	99 23       	and	r25, r25
     66c:	0c f0       	brlt	.+2      	; 0x670 <displayWeight+0xc>
     66e:	4c c0       	rjmp	.+152    	; 0x708 <displayWeight+0xa4>
		tmpWeight = -weightIn;
     670:	31 95       	neg	r19
     672:	21 95       	neg	r18
     674:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){ 
     676:	27 3e       	cpi	r18, 0xE7	; 231
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	38 07       	cpc	r19, r24
     67c:	3c f0       	brlt	.+14     	; 0x68c <displayWeight+0x28>
			tmpDigit[2] = 9;
     67e:	e0 ec       	ldi	r30, 0xC0	; 192
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	89 e0       	ldi	r24, 0x09	; 9
     684:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = 9;
     686:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = 9;
     688:	80 83       	st	Z, r24
     68a:	13 c0       	rjmp	.+38     	; 0x6b2 <displayWeight+0x4e>
		} else {
			tmpDigit[2] = tmpWeight/100;
     68c:	e0 ec       	ldi	r30, 0xC0	; 192
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	c9 01       	movw	r24, r18
     692:	64 e6       	ldi	r22, 0x64	; 100
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     69a:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     69c:	ca e0       	ldi	r28, 0x0A	; 10
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     6a6:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     6a8:	c9 01       	movw	r24, r18
     6aa:	be 01       	movw	r22, r28
     6ac:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     6b0:	80 83       	st	Z, r24
		}
		fndData[3] = 0x40;
     6b2:	a9 ea       	ldi	r26, 0xA9	; 169
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	13 96       	adiw	r26, 0x03	; 3
     6ba:	8c 93       	st	X, r24
     6bc:	13 97       	sbiw	r26, 0x03	; 3
		for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     6be:	c0 ec       	ldi	r28, 0xC0	; 192
     6c0:	d1 e0       	ldi	r29, 0x01	; 1
     6c2:	e8 81       	ld	r30, Y
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ec 5f       	subi	r30, 0xFC	; 252
     6c8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ca:	80 81       	ld	r24, Z
     6cc:	8c 93       	st	X, r24
     6ce:	e9 81       	ldd	r30, Y+1	; 0x01
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ec 5f       	subi	r30, 0xFC	; 252
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	80 81       	ld	r24, Z
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	8c 93       	st	X, r24
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	ea 81       	ldd	r30, Y+2	; 0x02
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	ec 5f       	subi	r30, 0xFC	; 252
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	80 81       	ld	r24, Z
     6e8:	12 96       	adiw	r26, 0x02	; 2
     6ea:	8c 93       	st	X, r24
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     6ec:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     6f0:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <displayWeight+0x96>
     6f8:	87 c0       	rjmp	.+270    	; 0x808 <displayWeight+0x1a4>
     6fa:	fc 01       	movw	r30, r24
     6fc:	e7 55       	subi	r30, 0x57	; 87
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	80 81       	ld	r24, Z
     702:	80 68       	ori	r24, 0x80	; 128
     704:	80 83       	st	Z, r24
     706:	80 c0       	rjmp	.+256    	; 0x808 <displayWeight+0x1a4>
		return;
	}

	if(weightIn > 9999 ){
     708:	20 31       	cpi	r18, 0x10	; 16
     70a:	87 e2       	ldi	r24, 0x27	; 39
     70c:	38 07       	cpc	r19, r24
     70e:	44 f0       	brlt	.+16     	; 0x720 <displayWeight+0xbc>
		tmpDigit[3] = 9;
     710:	e0 ec       	ldi	r30, 0xC0	; 192
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	89 e0       	ldi	r24, 0x09	; 9
     716:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     718:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     71a:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;		
     71c:	80 83       	st	Z, r24
     71e:	5e c0       	rjmp	.+188    	; 0x7dc <displayWeight+0x178>
	} else {
		tmpDigit[3] = weightIn/ 1000;
     720:	e0 ec       	ldi	r30, 0xC0	; 192
     722:	f1 e0       	ldi	r31, 0x01	; 1
     724:	c9 01       	movw	r24, r18
     726:	68 ee       	ldi	r22, 0xE8	; 232
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     72e:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     730:	c4 e6       	ldi	r28, 0x64	; 100
     732:	d0 e0       	ldi	r29, 0x00	; 0
     734:	be 01       	movw	r22, r28
     736:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     73a:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     73c:	c9 01       	movw	r24, r18
     73e:	be 01       	movw	r22, r28
     740:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     744:	ca e0       	ldi	r28, 0x0A	; 10
     746:	d0 e0       	ldi	r29, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     74e:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     750:	c9 01       	movw	r24, r18
     752:	be 01       	movw	r22, r28
     754:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     758:	80 83       	st	Z, r24
     75a:	40 c0       	rjmp	.+128    	; 0x7dc <displayWeight+0x178>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     75c:	ec 91       	ld	r30, X
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ec 5f       	subi	r30, 0xFC	; 252
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	80 81       	ld	r24, Z
     766:	8d 93       	st	X+, r24
     768:	a2 17       	cp	r26, r18
     76a:	b3 07       	cpc	r27, r19
     76c:	b9 f7       	brne	.-18     	; 0x75c <displayWeight+0xf8>
	
	if(codePoint <= 0 ){
     76e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     772:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     776:	18 16       	cp	r1, r24
     778:	19 06       	cpc	r1, r25
     77a:	8c f0       	brlt	.+34     	; 0x79e <displayWeight+0x13a>
		if(tmpDigit[3] == fndTableNum[0] ) {
     77c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <tmpDigit+0x3>
     780:	8f 33       	cpi	r24, 0x3F	; 63
     782:	89 f5       	brne	.+98     	; 0x7e6 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     784:	e0 ec       	ldi	r30, 0xC0	; 192
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] ) {
     78a:	82 81       	ldd	r24, Z+2	; 0x02
     78c:	8f 33       	cpi	r24, 0x3F	; 63
     78e:	59 f5       	brne	.+86     	; 0x7e6 <displayWeight+0x182>
				tmpDigit[2] = 0x00;
     790:	12 82       	std	Z+2, r1	; 0x02
				if(tmpDigit[1] == fndTableNum[0] ) {
     792:	81 81       	ldd	r24, Z+1	; 0x01
     794:	8f 33       	cpi	r24, 0x3F	; 63
     796:	39 f5       	brne	.+78     	; 0x7e6 <displayWeight+0x182>
					tmpDigit[1] = 0x00;
     798:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <tmpDigit+0x1>
     79c:	24 c0       	rjmp	.+72     	; 0x7e6 <displayWeight+0x182>
				}
			}
		}
	}
	else if(codePoint == 1 ){
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	91 05       	cpc	r25, r1
     7a2:	79 f4       	brne	.+30     	; 0x7c2 <displayWeight+0x15e>
		tmpDigit[1] |= 0x80;
     7a4:	e0 ec       	ldi	r30, 0xC0	; 192
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	81 81       	ldd	r24, Z+1	; 0x01
     7aa:	80 68       	ori	r24, 0x80	; 128
     7ac:	81 83       	std	Z+1, r24	; 0x01
		if(tmpDigit[3] == fndTableNum[0] ) {
     7ae:	83 81       	ldd	r24, Z+3	; 0x03
     7b0:	8f 33       	cpi	r24, 0x3F	; 63
     7b2:	c9 f4       	brne	.+50     	; 0x7e6 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     7b4:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] )
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	8f 33       	cpi	r24, 0x3F	; 63
     7ba:	a9 f4       	brne	.+42     	; 0x7e6 <displayWeight+0x182>
				tmpDigit[2] = 0x00;
     7bc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <tmpDigit+0x2>
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <displayWeight+0x182>
		}
	}
	else if(codePoint == 2 ){
     7c2:	02 97       	sbiw	r24, 0x02	; 2
     7c4:	81 f4       	brne	.+32     	; 0x7e6 <displayWeight+0x182>
		tmpDigit[2] |= 0x80;
     7c6:	e0 ec       	ldi	r30, 0xC0	; 192
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	82 81       	ldd	r24, Z+2	; 0x02
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	82 83       	std	Z+2, r24	; 0x02
		if(tmpDigit[3] == fndTableNum[0] ) {
     7d0:	83 81       	ldd	r24, Z+3	; 0x03
     7d2:	8f 33       	cpi	r24, 0x3F	; 63
     7d4:	41 f4       	brne	.+16     	; 0x7e6 <displayWeight+0x182>
			tmpDigit[3] = 0x00;
     7d6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <tmpDigit+0x3>
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <displayWeight+0x182>
     7dc:	a0 ec       	ldi	r26, 0xC0	; 192
     7de:	b1 e0       	ldi	r27, 0x01	; 1
     7e0:	24 ec       	ldi	r18, 0xC4	; 196
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	bb cf       	rjmp	.-138    	; 0x75c <displayWeight+0xf8>
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     7e6:	e9 ea       	ldi	r30, 0xA9	; 169
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	a0 ec       	ldi	r26, 0xC0	; 192
     7ec:	b1 e0       	ldi	r27, 0x01	; 1
     7ee:	8c 91       	ld	r24, X
     7f0:	80 83       	st	Z, r24
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	8c 91       	ld	r24, X
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	81 83       	std	Z+1, r24	; 0x01
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	8c 91       	ld	r24, X
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	82 83       	std	Z+2, r24	; 0x02
     802:	13 96       	adiw	r26, 0x03	; 3
     804:	8c 91       	ld	r24, X
     806:	83 83       	std	Z+3, r24	; 0x03
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <displayWeight1>:

void displayWeight1(int16_t weightIn)
{
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     81c:	99 23       	and	r25, r25
     81e:	0c f0       	brlt	.+2      	; 0x822 <displayWeight1+0x14>
     820:	4a c0       	rjmp	.+148    	; 0x8b6 <displayWeight1+0xa8>
		tmpWeight = -weightIn;
     822:	31 95       	neg	r19
     824:	21 95       	neg	r18
     826:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     828:	27 3e       	cpi	r18, 0xE7	; 231
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	38 07       	cpc	r19, r24
     82e:	4c f0       	brlt	.+18     	; 0x842 <displayWeight1+0x34>
			tmpDigit[3] = 0x40;
     830:	e0 ec       	ldi	r30, 0xC0	; 192
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	80 e4       	ldi	r24, 0x40	; 64
     836:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     838:	87 e6       	ldi	r24, 0x67	; 103
     83a:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     83c:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     83e:	80 83       	st	Z, r24
     840:	2c c0       	rjmp	.+88     	; 0x89a <displayWeight1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     842:	e0 ec       	ldi	r30, 0xC0	; 192
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	80 e4       	ldi	r24, 0x40	; 64
     848:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     84a:	c9 01       	movw	r24, r18
     84c:	64 e6       	ldi	r22, 0x64	; 100
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     854:	7b 01       	movw	r14, r22
     856:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     858:	0a e0       	ldi	r16, 0x0A	; 10
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	b8 01       	movw	r22, r16
     85e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     862:	eb 01       	movw	r28, r22
     864:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     866:	c9 01       	movw	r24, r18
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     86e:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     870:	29 ea       	ldi	r18, 0xA9	; 169
     872:	31 e0       	ldi	r19, 0x01	; 1
     874:	99 27       	eor	r25, r25
     876:	dc 01       	movw	r26, r24
     878:	ac 5f       	subi	r26, 0xFC	; 252
     87a:	be 4f       	sbci	r27, 0xFE	; 254
     87c:	8c 91       	ld	r24, X
     87e:	f9 01       	movw	r30, r18
     880:	80 83       	st	Z, r24
     882:	dd 27       	eor	r29, r29
     884:	cc 5f       	subi	r28, 0xFC	; 252
     886:	de 4f       	sbci	r29, 0xFE	; 254
     888:	88 81       	ld	r24, Y
     88a:	81 83       	std	Z+1, r24	; 0x01
     88c:	f7 01       	movw	r30, r14
     88e:	ff 27       	eor	r31, r31
     890:	ec 5f       	subi	r30, 0xFC	; 252
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	80 81       	ld	r24, Z
     896:	f9 01       	movw	r30, r18
     898:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     89a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     89e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <displayWeight1+0x9a>
     8a6:	64 c0       	rjmp	.+200    	; 0x970 <displayWeight1+0x162>
     8a8:	fc 01       	movw	r30, r24
     8aa:	e7 55       	subi	r30, 0x57	; 87
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	80 81       	ld	r24, Z
     8b0:	80 68       	ori	r24, 0x80	; 128
     8b2:	80 83       	st	Z, r24
     8b4:	5d c0       	rjmp	.+186    	; 0x970 <displayWeight1+0x162>
		return;
	}

	if(weightIn > 9999 ){
     8b6:	80 31       	cpi	r24, 0x10	; 16
     8b8:	f7 e2       	ldi	r31, 0x27	; 39
     8ba:	9f 07       	cpc	r25, r31
     8bc:	44 f0       	brlt	.+16     	; 0x8ce <displayWeight1+0xc0>
		tmpDigit[3] = 9;
     8be:	e0 ec       	ldi	r30, 0xC0	; 192
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	89 e0       	ldi	r24, 0x09	; 9
     8c4:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     8c6:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     8c8:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     8ca:	80 83       	st	Z, r24
     8cc:	3b c0       	rjmp	.+118    	; 0x944 <displayWeight1+0x136>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     8ce:	e0 ec       	ldi	r30, 0xC0	; 192
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	68 ee       	ldi	r22, 0xE8	; 232
     8d4:	73 e0       	ldi	r23, 0x03	; 3
     8d6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     8da:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     8dc:	c4 e6       	ldi	r28, 0x64	; 100
     8de:	d0 e0       	ldi	r29, 0x00	; 0
     8e0:	be 01       	movw	r22, r28
     8e2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     8e6:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     8e8:	c9 01       	movw	r24, r18
     8ea:	be 01       	movw	r22, r28
     8ec:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     8f0:	ca e0       	ldi	r28, 0x0A	; 10
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	be 01       	movw	r22, r28
     8f6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     8fa:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     8fc:	c9 01       	movw	r24, r18
     8fe:	be 01       	movw	r22, r28
     900:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     904:	80 83       	st	Z, r24
     906:	1e c0       	rjmp	.+60     	; 0x944 <displayWeight1+0x136>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     908:	ec 91       	ld	r30, X
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ec 5f       	subi	r30, 0xFC	; 252
     90e:	fe 4f       	sbci	r31, 0xFE	; 254
     910:	80 81       	ld	r24, Z
     912:	8d 93       	st	X+, r24
     914:	a2 17       	cp	r26, r18
     916:	b3 07       	cpc	r27, r19
     918:	b9 f7       	brne	.-18     	; 0x908 <displayWeight1+0xfa>
	
	if(codePoint == 1 )			tmpDigit[1] |= 0x80;
     91a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     91e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	91 05       	cpc	r25, r1
     926:	31 f4       	brne	.+12     	; 0x934 <displayWeight1+0x126>
     928:	e0 ec       	ldi	r30, 0xC0	; 192
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	81 81       	ldd	r24, Z+1	; 0x01
     92e:	80 68       	ori	r24, 0x80	; 128
     930:	81 83       	std	Z+1, r24	; 0x01
     932:	0d c0       	rjmp	.+26     	; 0x94e <displayWeight1+0x140>
	else if(codePoint == 2 )	tmpDigit[2] |= 0x80;
     934:	02 97       	sbiw	r24, 0x02	; 2
     936:	59 f4       	brne	.+22     	; 0x94e <displayWeight1+0x140>
     938:	e0 ec       	ldi	r30, 0xC0	; 192
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	82 81       	ldd	r24, Z+2	; 0x02
     93e:	80 68       	ori	r24, 0x80	; 128
     940:	82 83       	std	Z+2, r24	; 0x02
     942:	05 c0       	rjmp	.+10     	; 0x94e <displayWeight1+0x140>
     944:	a0 ec       	ldi	r26, 0xC0	; 192
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	24 ec       	ldi	r18, 0xC4	; 196
     94a:	31 e0       	ldi	r19, 0x01	; 1
     94c:	dd cf       	rjmp	.-70     	; 0x908 <displayWeight1+0xfa>

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     94e:	e9 ea       	ldi	r30, 0xA9	; 169
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	a0 ec       	ldi	r26, 0xC0	; 192
     954:	b1 e0       	ldi	r27, 0x01	; 1
     956:	8c 91       	ld	r24, X
     958:	80 83       	st	Z, r24
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	8c 91       	ld	r24, X
     95e:	11 97       	sbiw	r26, 0x01	; 1
     960:	81 83       	std	Z+1, r24	; 0x01
     962:	12 96       	adiw	r26, 0x02	; 2
     964:	8c 91       	ld	r24, X
     966:	12 97       	sbiw	r26, 0x02	; 2
     968:	82 83       	std	Z+2, r24	; 0x02
     96a:	13 96       	adiw	r26, 0x03	; 3
     96c:	8c 91       	ld	r24, X
     96e:	83 83       	std	Z+3, r24	; 0x03
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <displayNumber1>:

void displayNumber1(int16_t weightIn)
{
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     98c:	99 23       	and	r25, r25
     98e:	0c f0       	brlt	.+2      	; 0x992 <displayNumber1+0x14>
     990:	4a c0       	rjmp	.+148    	; 0xa26 <displayNumber1+0xa8>
		tmpWeight = -weightIn;
     992:	31 95       	neg	r19
     994:	21 95       	neg	r18
     996:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     998:	27 3e       	cpi	r18, 0xE7	; 231
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	38 07       	cpc	r19, r24
     99e:	4c f0       	brlt	.+18     	; 0x9b2 <displayNumber1+0x34>
			tmpDigit[3] = 0x40;
     9a0:	e0 ec       	ldi	r30, 0xC0	; 192
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     9a8:	87 e6       	ldi	r24, 0x67	; 103
     9aa:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     9ac:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     9ae:	80 83       	st	Z, r24
     9b0:	2c c0       	rjmp	.+88     	; 0xa0a <displayNumber1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     9b2:	e0 ec       	ldi	r30, 0xC0	; 192
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     9ba:	c9 01       	movw	r24, r18
     9bc:	64 e6       	ldi	r22, 0x64	; 100
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     9c4:	7b 01       	movw	r14, r22
     9c6:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     9c8:	0a e0       	ldi	r16, 0x0A	; 10
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	b8 01       	movw	r22, r16
     9ce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     9d2:	eb 01       	movw	r28, r22
     9d4:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     9d6:	c9 01       	movw	r24, r18
     9d8:	b8 01       	movw	r22, r16
     9da:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     9de:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     9e0:	29 ea       	ldi	r18, 0xA9	; 169
     9e2:	31 e0       	ldi	r19, 0x01	; 1
     9e4:	99 27       	eor	r25, r25
     9e6:	dc 01       	movw	r26, r24
     9e8:	ac 5f       	subi	r26, 0xFC	; 252
     9ea:	be 4f       	sbci	r27, 0xFE	; 254
     9ec:	8c 91       	ld	r24, X
     9ee:	f9 01       	movw	r30, r18
     9f0:	80 83       	st	Z, r24
     9f2:	dd 27       	eor	r29, r29
     9f4:	cc 5f       	subi	r28, 0xFC	; 252
     9f6:	de 4f       	sbci	r29, 0xFE	; 254
     9f8:	88 81       	ld	r24, Y
     9fa:	81 83       	std	Z+1, r24	; 0x01
     9fc:	f7 01       	movw	r30, r14
     9fe:	ff 27       	eor	r31, r31
     a00:	ec 5f       	subi	r30, 0xFC	; 252
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	80 81       	ld	r24, Z
     a06:	f9 01       	movw	r30, r18
     a08:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     a0a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
     a0e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	09 f4       	brne	.+2      	; 0xa18 <displayNumber1+0x9a>
     a16:	60 c0       	rjmp	.+192    	; 0xad8 <displayNumber1+0x15a>
     a18:	fc 01       	movw	r30, r24
     a1a:	e7 55       	subi	r30, 0x57	; 87
     a1c:	fe 4f       	sbci	r31, 0xFE	; 254
     a1e:	80 81       	ld	r24, Z
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	80 83       	st	Z, r24
     a24:	59 c0       	rjmp	.+178    	; 0xad8 <displayNumber1+0x15a>
		return;
	}

	if(weightIn > 9999 ){
     a26:	80 31       	cpi	r24, 0x10	; 16
     a28:	f7 e2       	ldi	r31, 0x27	; 39
     a2a:	9f 07       	cpc	r25, r31
     a2c:	44 f0       	brlt	.+16     	; 0xa3e <displayNumber1+0xc0>
		tmpDigit[3] = 9;
     a2e:	e0 ec       	ldi	r30, 0xC0	; 192
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	89 e0       	ldi	r24, 0x09	; 9
     a34:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     a36:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     a38:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     a3a:	80 83       	st	Z, r24
     a3c:	37 c0       	rjmp	.+110    	; 0xaac <displayNumber1+0x12e>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     a3e:	e0 ec       	ldi	r30, 0xC0	; 192
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	68 ee       	ldi	r22, 0xE8	; 232
     a44:	73 e0       	ldi	r23, 0x03	; 3
     a46:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     a4a:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     a4c:	c4 e6       	ldi	r28, 0x64	; 100
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
     a50:	be 01       	movw	r22, r28
     a52:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     a56:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     a58:	c9 01       	movw	r24, r18
     a5a:	be 01       	movw	r22, r28
     a5c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     a60:	ca e0       	ldi	r28, 0x0A	; 10
     a62:	d0 e0       	ldi	r29, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     a6a:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     a6c:	c9 01       	movw	r24, r18
     a6e:	be 01       	movw	r22, r28
     a70:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__divmodhi4>
     a74:	80 83       	st	Z, r24
     a76:	1a c0       	rjmp	.+52     	; 0xaac <displayNumber1+0x12e>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     a78:	ec 91       	ld	r30, X
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ec 5f       	subi	r30, 0xFC	; 252
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	80 81       	ld	r24, Z
     a82:	8d 93       	st	X+, r24
     a84:	a2 17       	cp	r26, r18
     a86:	b3 07       	cpc	r27, r19
     a88:	b9 f7       	brne	.-18     	; 0xa78 <displayNumber1+0xfa>
	
	if(tmpDigit[3] == fndTableNum[0] ) {
     a8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <tmpDigit+0x3>
     a8e:	8f 33       	cpi	r24, 0x3F	; 63
     a90:	91 f4       	brne	.+36     	; 0xab6 <displayNumber1+0x138>
		tmpDigit[3] = 0x00;
     a92:	e0 ec       	ldi	r30, 0xC0	; 192
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	13 82       	std	Z+3, r1	; 0x03
		if(tmpDigit[2] == fndTableNum[0] ) {
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	8f 33       	cpi	r24, 0x3F	; 63
     a9c:	61 f4       	brne	.+24     	; 0xab6 <displayNumber1+0x138>
			tmpDigit[2] = 0x00;
     a9e:	12 82       	std	Z+2, r1	; 0x02
			if(tmpDigit[1] == fndTableNum[0] ) {
     aa0:	81 81       	ldd	r24, Z+1	; 0x01
     aa2:	8f 33       	cpi	r24, 0x3F	; 63
     aa4:	41 f4       	brne	.+16     	; 0xab6 <displayNumber1+0x138>
				tmpDigit[1] = 0x00;
     aa6:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <tmpDigit+0x1>
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <displayNumber1+0x138>
     aac:	a0 ec       	ldi	r26, 0xC0	; 192
     aae:	b1 e0       	ldi	r27, 0x01	; 1
     ab0:	24 ec       	ldi	r18, 0xC4	; 196
     ab2:	31 e0       	ldi	r19, 0x01	; 1
     ab4:	e1 cf       	rjmp	.-62     	; 0xa78 <displayNumber1+0xfa>
			}
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     ab6:	e9 ea       	ldi	r30, 0xA9	; 169
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	a0 ec       	ldi	r26, 0xC0	; 192
     abc:	b1 e0       	ldi	r27, 0x01	; 1
     abe:	8c 91       	ld	r24, X
     ac0:	80 83       	st	Z, r24
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	8c 91       	ld	r24, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	81 83       	std	Z+1, r24	; 0x01
     aca:	12 96       	adiw	r26, 0x02	; 2
     acc:	8c 91       	ld	r24, X
     ace:	12 97       	sbiw	r26, 0x02	; 2
     ad0:	82 83       	std	Z+2, r24	; 0x02
     ad2:	13 96       	adiw	r26, 0x03	; 3
     ad4:	8c 91       	ld	r24, X
     ad6:	83 83       	std	Z+3, r24	; 0x03
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	08 95       	ret

00000ae6 <displayNumber>:

void displayNumber(int16_t weightIn)
{
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
	int i;
	int16_t	tmpWeight;
	static uint32_t startmsecCount;
	if( elaspMsecTime(startmsecCount) < 300 ) return;
     af4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <startmsecCount.1968>
     af8:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <startmsecCount.1968+0x1>
     afc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <startmsecCount.1968+0x2>
     b00:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <startmsecCount.1968+0x3>
     b04:	56 dc       	rcall	.-1876   	; 0x3b2 <elaspMsecTime>
     b06:	6c 32       	cpi	r22, 0x2C	; 44
     b08:	71 40       	sbci	r23, 0x01	; 1
     b0a:	81 05       	cpc	r24, r1
     b0c:	91 05       	cpc	r25, r1
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <displayNumber+0x2c>
     b10:	71 c0       	rjmp	.+226    	; 0xbf4 <displayNumber+0x10e>

	startmsecCount = timerCounter2;
     b12:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     b16:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     b1a:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     b1e:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     b22:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <startmsecCount.1968>
     b26:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <startmsecCount.1968+0x1>
     b2a:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <startmsecCount.1968+0x2>
     b2e:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <startmsecCount.1968+0x3>

	if(weightIn < 0 ){
     b32:	dd 23       	and	r29, r29
     b34:	cc f5       	brge	.+114    	; 0xba8 <displayNumber+0xc2>
		tmpWeight = -weightIn;
     b36:	d1 95       	neg	r29
     b38:	c1 95       	neg	r28
     b3a:	d1 09       	sbc	r29, r1
		if(tmpWeight > 998 ){
     b3c:	c7 3e       	cpi	r28, 0xE7	; 231
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	d8 07       	cpc	r29, r24
     b42:	4c f0       	brlt	.+18     	; 0xb56 <displayNumber+0x70>
			tmpDigit[3] = 0x40;
     b44:	e0 ec       	ldi	r30, 0xC0	; 192
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     b4c:	87 e6       	ldi	r24, 0x67	; 103
     b4e:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     b50:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     b52:	80 83       	st	Z, r24
     b54:	4f c0       	rjmp	.+158    	; 0xbf4 <displayNumber+0x10e>
			
			} else {
			tmpDigit[3] = 0x40;
     b56:	e0 ec       	ldi	r30, 0xC0	; 192
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     b5e:	ce 01       	movw	r24, r28
     b60:	64 e6       	ldi	r22, 0x64	; 100
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	f6 d7       	rcall	.+4076   	; 0x1b52 <__divmodhi4>
     b66:	9b 01       	movw	r18, r22
     b68:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     b6a:	0a e0       	ldi	r16, 0x0A	; 10
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	b8 01       	movw	r22, r16
     b70:	f0 d7       	rcall	.+4064   	; 0x1b52 <__divmodhi4>
     b72:	7b 01       	movw	r14, r22
     b74:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     b76:	ce 01       	movw	r24, r28
     b78:	b8 01       	movw	r22, r16
     b7a:	eb d7       	rcall	.+4054   	; 0x1b52 <__divmodhi4>
     b7c:	80 83       	st	Z, r24
     b7e:	c9 ea       	ldi	r28, 0xA9	; 169
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     b80:	d1 e0       	ldi	r29, 0x01	; 1
     b82:	99 27       	eor	r25, r25
     b84:	dc 01       	movw	r26, r24
     b86:	ac 5f       	subi	r26, 0xFC	; 252
     b88:	be 4f       	sbci	r27, 0xFE	; 254
     b8a:	8c 91       	ld	r24, X
     b8c:	88 83       	st	Y, r24
     b8e:	f7 01       	movw	r30, r14
     b90:	ff 27       	eor	r31, r31
     b92:	ec 5f       	subi	r30, 0xFC	; 252
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	80 81       	ld	r24, Z
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	33 27       	eor	r19, r19
     b9c:	f9 01       	movw	r30, r18
     b9e:	ec 5f       	subi	r30, 0xFC	; 252
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	80 81       	ld	r24, Z
     ba4:	8a 83       	std	Y+2, r24	; 0x02
     ba6:	26 c0       	rjmp	.+76     	; 0xbf4 <displayNumber+0x10e>
     ba8:	e0 ec       	ldi	r30, 0xC0	; 192
		}
		return;
	}

	tmpDigit[3] = weightIn/1000;
     baa:	f1 e0       	ldi	r31, 0x01	; 1
     bac:	ce 01       	movw	r24, r28
     bae:	68 ee       	ldi	r22, 0xE8	; 232
     bb0:	73 e0       	ldi	r23, 0x03	; 3
     bb2:	cf d7       	rcall	.+3998   	; 0x1b52 <__divmodhi4>
     bb4:	63 83       	std	Z+3, r22	; 0x03
	tmpDigit[2] = (weightIn%1000)/100;
     bb6:	24 e6       	ldi	r18, 0x64	; 100
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	ca d7       	rcall	.+3988   	; 0x1b52 <__divmodhi4>
     bbe:	62 83       	std	Z+2, r22	; 0x02
	tmpDigit[1] = (weightIn%100)/10;
     bc0:	ce 01       	movw	r24, r28
     bc2:	b9 01       	movw	r22, r18
     bc4:	c6 d7       	rcall	.+3980   	; 0x1b52 <__divmodhi4>
     bc6:	2a e0       	ldi	r18, 0x0A	; 10
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	b9 01       	movw	r22, r18
     bcc:	c2 d7       	rcall	.+3972   	; 0x1b52 <__divmodhi4>
     bce:	61 83       	std	Z+1, r22	; 0x01
	tmpDigit[0] = weightIn%10;	
     bd0:	ce 01       	movw	r24, r28
     bd2:	b9 01       	movw	r22, r18
     bd4:	be d7       	rcall	.+3964   	; 0x1b52 <__divmodhi4>
     bd6:	80 83       	st	Z, r24
     bd8:	df 01       	movw	r26, r30
     bda:	c9 ea       	ldi	r28, 0xA9	; 169
     bdc:	d1 e0       	ldi	r29, 0x01	; 1
     bde:	24 ec       	ldi	r18, 0xC4	; 196
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	ed 91       	ld	r30, X+
	for(i=0;i < 4 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 5f       	subi	r30, 0xFC	; 252
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	80 81       	ld	r24, Z
     bec:	89 93       	st	Y+, r24
     bee:	a2 17       	cp	r26, r18
     bf0:	b3 07       	cpc	r27, r19
     bf2:	b9 f7       	brne	.-18     	; 0xbe2 <displayNumber+0xfc>
     bf4:	df 91       	pop	r29
}
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret

00000c02 <initGpio>:
     c02:	8f e0       	ldi	r24, 0x0F	; 15

void initGpio()
{
	DDRA		= 0x0f;   // FND Control Port
     c04:	8a bb       	out	0x1a, r24	; 26
	DDRB		= 0x07;   // SSI and Button
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	87 bb       	out	0x17, r24	; 23
	DDRC		= 0xff;   // FND Data Port
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	84 bb       	out	0x14, r24	; 20
	DDRD		= 0x08;   // UART and reserved
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xfe;
     c12:	8e ef       	ldi	r24, 0xFE	; 254
     c14:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7e;
     c16:	8e e7       	ldi	r24, 0x7E	; 126
     c18:	83 b9       	out	0x03, r24	; 3

	TIMSK =  0x40;
     c1a:	80 e4       	ldi	r24, 0x40	; 64
     c1c:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;
     c1e:	14 bc       	out	0x24, r1	; 36
	TCCR2 =  0x03;
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	85 bd       	out	0x25, r24	; 37

	sbi(PORTB,CS);
     c24:	c0 9a       	sbi	0x18, 0	; 24
	SPCR = 0x5D;
     c26:	8d e5       	ldi	r24, 0x5D	; 93
     c28:	8d b9       	out	0x0d, r24	; 13
	SPSR= 0x00;
     c2a:	1e b8       	out	0x0e, r1	; 14
	
	sbi(PORTE,LED_ALARM);
     c2c:	1e 9a       	sbi	0x03, 6	; 3
	sbi(PORTE,LED_OVER);
     c2e:	1f 9a       	sbi	0x03, 7	; 3
     c30:	08 95       	ret

00000c32 <calcWeightCoeff>:
void calcWeightCoeff()
{
	calcFactor = (int32_t ) codeWeight * 1024 ;

	// calcFactor = calcFactor / ( codeAdcSpan - codeAdcZero );
	calcFactor = calcFactor / codeAdcSpan;
     c32:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <codeWeight>
     c36:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <codeWeight+0x1>
     c3a:	cb 01       	movw	r24, r22
     c3c:	77 0f       	add	r23, r23
     c3e:	aa 0b       	sbc	r26, r26
     c40:	bb 0b       	sbc	r27, r27
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	05 2e       	mov	r0, r21
     c48:	5a e0       	ldi	r21, 0x0A	; 10
     c4a:	66 0f       	add	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	5a 95       	dec	r21
     c54:	d1 f7       	brne	.-12     	; 0xc4a <calcWeightCoeff+0x18>
     c56:	50 2d       	mov	r21, r0
     c58:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <codeAdcSpan>
     c5c:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <codeAdcSpan+0x1>
     c60:	03 2e       	mov	r0, r19
     c62:	00 0c       	add	r0, r0
     c64:	44 0b       	sbc	r20, r20
     c66:	55 0b       	sbc	r21, r21
     c68:	87 d7       	rcall	.+3854   	; 0x1b78 <__divmodsi4>
     c6a:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <calcFactor>
     c6e:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <calcFactor+0x1>
     c72:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <calcFactor+0x2>
     c76:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <calcFactor+0x3>

	//calcOffset = (int32_t ) codeWeight * 1024;
	//calcOffset = - calcOffset * codeAdcZero / ( codeAdcSpan - codeAdcZero);
	calcOffset = -(int32_t )( codeAutoZero * 1024);
     c7a:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <codeAutoZero>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	92 2f       	mov	r25, r18
     c84:	99 0f       	add	r25, r25
     c86:	99 0f       	add	r25, r25
     c88:	09 2e       	mov	r0, r25
     c8a:	00 0c       	add	r0, r0
     c8c:	aa 0b       	sbc	r26, r26
     c8e:	bb 0b       	sbc	r27, r27
     c90:	b0 95       	com	r27
     c92:	a0 95       	com	r26
     c94:	90 95       	com	r25
     c96:	81 95       	neg	r24
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	af 4f       	sbci	r26, 0xFF	; 255
     c9c:	bf 4f       	sbci	r27, 0xFF	; 255
     c9e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <calcOffset>
     ca2:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <calcOffset+0x1>
     ca6:	a0 93 cc 01 	sts	0x01CC, r26	; 0x8001cc <calcOffset+0x2>
     caa:	b0 93 cd 01 	sts	0x01CD, r27	; 0x8001cd <calcOffset+0x3>
     cae:	08 95       	ret

00000cb0 <initCodeData>:
}

void initCodeData(){

	calcWeightCoeff();
     cb0:	c0 df       	rcall	.-128    	; 0xc32 <calcWeightCoeff>
	alarmOn = 0;
     cb2:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <alarmOn+0x1>
     cb6:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <alarmOn>
	overOn	= 0;
     cba:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <overOn+0x1>
     cbe:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <overOn>
	gflagConnect = 0;
     cc2:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <gflagConnect+0x1>
     cc6:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <gflagConnect>
	tripNumber = 0;
     cca:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <tripNumber+0x1>
     cce:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <tripNumber>
	codeNumber = 0;
     cd2:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
     cd6:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
	blinkCmdFlag = 0x00;
     cda:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <blinkCmdFlag>
     cde:	08 95       	ret

00000ce0 <procRelayOut>:
}


void procRelayOut(void)
{
	overOn  = ( loadWeight > codeOver  ) ? 1 : 0;
     ce0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
     ce4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <codeOver>
     cf0:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <codeOver+0x1>
     cf4:	48 17       	cp	r20, r24
     cf6:	59 07       	cpc	r21, r25
     cf8:	14 f0       	brlt	.+4      	; 0xcfe <procRelayOut+0x1e>
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <overOn+0x1>
     d02:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <overOn>
	alarmOn = ( loadWeight > codeAlarm ) ? 1 : 0;
     d06:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <codeAlarm>
     d0a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <codeAlarm+0x1>
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	14 f0       	brlt	.+4      	; 0xd1c <procRelayOut+0x3c>
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <alarmOn+0x1>
     d20:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <alarmOn>
	
//--- alarm 
	if( alarmOn){
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	1c f4       	brge	.+6      	; 0xd30 <procRelayOut+0x50>
		sbi(PORTA,RELAY_ALARM);
     d2a:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTE,LED_ALARM); 
     d2c:	1e 98       	cbi	0x03, 6	; 3
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <procRelayOut+0x54>
	} else {
		cbi(PORTA,RELAY_ALARM);
     d30:	de 98       	cbi	0x1b, 6	; 27
		sbi(PORTE,LED_ALARM);
     d32:	1e 9a       	sbi	0x03, 6	; 3
	}
	
//--- over relay led	
	if( overOn){
     d34:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <overOn>
     d38:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <overOn+0x1>
     d3c:	89 2b       	or	r24, r25
     d3e:	19 f0       	breq	.+6      	; 0xd46 <procRelayOut+0x66>
		sbi(PORTA,RELAY_OVER);
     d40:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTE,LED_OVER);
     d42:	1f 98       	cbi	0x03, 7	; 3
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <procRelayOut+0x6a>
	} else {
		cbi(PORTA,RELAY_OVER);
     d46:	dd 98       	cbi	0x1b, 5	; 27
		sbi(PORTE,LED_OVER);
     d48:	1f 9a       	sbi	0x03, 7	; 3
	}

// test button 
	if( (PIND & 0x01) == 0){
     d4a:	80 99       	sbic	0x10, 0	; 16
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <procRelayOut+0x76>
		// displayWeight(codeOver);
		sbi(PORTA,RELAY_ALARM);
     d4e:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTE,LED_ALARM);
     d50:	1e 98       	cbi	0x03, 6	; 3

		sbi(PORTA,RELAY_OVER);
     d52:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTE,LED_OVER);
     d54:	1f 98       	cbi	0x03, 7	; 3
     d56:	08 95       	ret

00000d58 <systemErrProc>:
	}
}

void systemErrProc( uint8_t err_no)
{
     d58:	08 95       	ret

00000d5a <readLoad>:
	
}

int16_t readLoad(void)
{
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
	static int ringCountFilt = 0;
	int16_t weight1;
	int32_t weightSum;
	static uint32_t startmsecCount=0;
	
	if( elaspMsecTime(startmsecCount) < 100 ) return loadWeight ;
     d66:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <startmsecCount.2012>
     d6a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <startmsecCount.2012+0x1>
     d6e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <startmsecCount.2012+0x2>
     d72:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <startmsecCount.2012+0x3>
     d76:	1d db       	rcall	.-2502   	; 0x3b2 <elaspMsecTime>
     d78:	64 36       	cpi	r22, 0x64	; 100
     d7a:	71 05       	cpc	r23, r1
     d7c:	81 05       	cpc	r24, r1
     d7e:	91 05       	cpc	r25, r1
     d80:	28 f4       	brcc	.+10     	; 0xd8c <readLoad+0x32>
     d82:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
     d86:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
     d8a:	c3 c0       	rjmp	.+390    	; 0xf12 <readLoad+0x1b8>
	startmsecCount = timerCounter2;
     d8c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
     d90:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
     d94:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
     d98:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
     d9c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <startmsecCount.2012>
     da0:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <startmsecCount.2012+0x1>
     da4:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <startmsecCount.2012+0x2>
     da8:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <startmsecCount.2012+0x3>

	if(adcWeightIn > 1020 ){
     dac:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
     db0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     db4:	8d 3f       	cpi	r24, 0xFD	; 253
     db6:	93 40       	sbci	r25, 0x03	; 3
     db8:	54 f0       	brlt	.+20     	; 0xdce <readLoad+0x74>
		tripNumber = 3;
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
     dc2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
		enterModeError(tripNumber);
     dc6:	b5 d2       	rcall	.+1386   	; 0x1332 <enterModeError>
		return 0;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a2 c0       	rjmp	.+324    	; 0xf12 <readLoad+0x1b8>
	} else if ( adcWeightIn <= 0 ){
     dce:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
     dd2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
     dd6:	18 16       	cp	r1, r24
     dd8:	19 06       	cpc	r1, r25
     dda:	54 f0       	brlt	.+20     	; 0xdf0 <readLoad+0x96>
		tripNumber = 4;
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
     de4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
		enterModeError(tripNumber);
     de8:	a4 d2       	rcall	.+1352   	; 0x1332 <enterModeError>
		return 0;		
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	91 c0       	rjmp	.+290    	; 0xf12 <readLoad+0x1b8>
	}

	weight1 = (int16_t) ( calcFactor * (adcWeightIn - codeAdcZero) / 1024) ;
     df0:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <adcWeightIn>
     df4:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>

	weightBuf[ringCountFilt] = weight1;
     df8:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <ringCountFilt.2009>
     dfc:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <ringCountFilt.2009+0x1>
     e00:	f7 01       	movw	r30, r14
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	e8 5d       	subi	r30, 0xD8	; 216
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <codeAdcZero>
     e0e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <codeAdcZero+0x1>
     e12:	a8 1b       	sub	r26, r24
     e14:	b9 0b       	sbc	r27, r25
     e16:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <calcFactor>
     e1a:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <calcFactor+0x1>
     e1e:	40 91 a5 01 	lds	r20, 0x01A5	; 0x8001a5 <calcFactor+0x2>
     e22:	50 91 a6 01 	lds	r21, 0x01A6	; 0x8001a6 <calcFactor+0x3>
     e26:	cd d6       	rcall	.+3482   	; 0x1bc2 <__mulshisi3>
     e28:	8b 01       	movw	r16, r22
     e2a:	9c 01       	movw	r18, r24
     e2c:	99 23       	and	r25, r25
     e2e:	24 f4       	brge	.+8      	; 0xe38 <readLoad+0xde>
     e30:	01 50       	subi	r16, 0x01	; 1
     e32:	1c 4f       	sbci	r17, 0xFC	; 252
     e34:	2f 4f       	sbci	r18, 0xFF	; 255
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	d9 01       	movw	r26, r18
     e3a:	c8 01       	movw	r24, r16
     e3c:	07 2e       	mov	r0, r23
     e3e:	7a e0       	ldi	r23, 0x0A	; 10
     e40:	b5 95       	asr	r27
     e42:	a7 95       	ror	r26
     e44:	97 95       	ror	r25
     e46:	87 95       	ror	r24
     e48:	7a 95       	dec	r23
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <readLoad+0xe6>
     e4c:	70 2d       	mov	r23, r0
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	e8 16       	cp	r14, r24
     e56:	f1 04       	cpc	r15, r1
     e58:	1c f4       	brge	.+6      	; 0xe60 <readLoad+0x106>
     e5a:	c7 01       	movw	r24, r14
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <readLoad+0x10a>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ringCountFilt.2009+0x1>
     e68:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ringCountFilt.2009>
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     e6c:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <codeFilt>
     e70:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <codeFilt+0x1>
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	04 f5       	brge	.+64     	; 0xebe <readLoad+0x164>
     e7e:	c1 2c       	mov	r12, r1
     e80:	d1 2c       	mov	r13, r1
     e82:	76 01       	movw	r14, r12
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
		weightSum += weightBuf[j];
     e88:	fc 01       	movw	r30, r24
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e8 5d       	subi	r30, 0xD8	; 216
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	40 81       	ld	r20, Z
     e94:	51 81       	ldd	r21, Z+1	; 0x01
     e96:	05 2e       	mov	r0, r21
     e98:	00 0c       	add	r0, r0
     e9a:	66 0b       	sbc	r22, r22
     e9c:	77 0b       	sbc	r23, r23
     e9e:	c4 0e       	add	r12, r20
     ea0:	d5 1e       	adc	r13, r21
     ea2:	e6 1e       	adc	r14, r22
     ea4:	f7 1e       	adc	r15, r23
		j = ( j < 1 ) ?  9 : j - 1;
     ea6:	18 16       	cp	r1, r24
     ea8:	19 06       	cpc	r1, r25
     eaa:	14 f4       	brge	.+4      	; 0xeb0 <readLoad+0x156>
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <readLoad+0x15a>
     eb0:	89 e0       	ldi	r24, 0x09	; 9
     eb2:	90 e0       	ldi	r25, 0x00	; 0
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	a2 17       	cp	r26, r18
     eb8:	b3 07       	cpc	r27, r19
     eba:	34 f3       	brlt	.-52     	; 0xe88 <readLoad+0x12e>
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <readLoad+0x16a>
	weightBuf[ringCountFilt] = weight1;
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
     ebe:	c1 2c       	mov	r12, r1
     ec0:	d1 2c       	mov	r13, r1
     ec2:	76 01       	movw	r14, r12
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
		weightSum += weightBuf[j];
		j = ( j < 1 ) ?  9 : j - 1;
	}	
	weight1 = weightSum / ( codeFilt + 1);	 
     ec4:	03 2e       	mov	r0, r19
     ec6:	00 0c       	add	r0, r0
     ec8:	44 0b       	sbc	r20, r20
     eca:	55 0b       	sbc	r21, r21
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	53 d6       	rcall	.+3238   	; 0x1b78 <__divmodsi4>
     ed2:	c9 01       	movw	r24, r18

//-- divison proc
	if( codeDivision == 0 ) weight1 = ( ( weight1 + 4)  / 10 ) * 10;
     ed4:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <codeDivision>
     ed8:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <codeDivision+0x1>
     edc:	30 97       	sbiw	r30, 0x00	; 0
     ede:	81 f4       	brne	.+32     	; 0xf00 <readLoad+0x1a6>
     ee0:	04 96       	adiw	r24, 0x04	; 4
     ee2:	6a e0       	ldi	r22, 0x0A	; 10
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	35 d6       	rcall	.+3178   	; 0x1b52 <__divmodhi4>
     ee8:	cb 01       	movw	r24, r22
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	66 0f       	add	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	86 0f       	add	r24, r22
     efc:	97 1f       	adc	r25, r23
	else weight1 = ( weight1  / codeDivision ) * codeDivision;
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <readLoad+0x1b8>
     f00:	bf 01       	movw	r22, r30
     f02:	27 d6       	rcall	.+3150   	; 0x1b52 <__divmodhi4>
     f04:	e6 9f       	mul	r30, r22
     f06:	c0 01       	movw	r24, r0
     f08:	e7 9f       	mul	r30, r23
     f0a:	90 0d       	add	r25, r0
     f0c:	f6 9f       	mul	r31, r22
     f0e:	90 0d       	add	r25, r0
     f10:	11 24       	eor	r1, r1

	return weight1;	
}
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	08 95       	ret

00000f20 <main>:

int main(void)
{
	uint8_t keyBuf;
	
	initGpio();
     f20:	70 de       	rcall	.-800    	; 0xc02 <initGpio>
	
	initADC();	
     f22:	15 db       	rcall	.-2518   	; 0x54e <initADC>
	
	initUart();
     f24:	36 d5       	rcall	.+2668   	; 0x1992 <initUart>
	
	sei();	

    initUart();
     f26:	78 94       	sei

	readRomData();
     f28:	34 d5       	rcall	.+2664   	; 0x1992 <initUart>
     f2a:	cb d9       	rcall	.-3178   	; 0x2c2 <readRomData>
	initCodeData();		
     f2c:	c1 de       	rcall	.-638    	; 0xcb0 <initCodeData>
	loadWeight = readLoad();
     f2e:	15 df       	rcall	.-470    	; 0xd5a <readLoad>
     f30:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
     f34:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
	enterModeRun();
     f38:	3a d0       	rcall	.+116    	; 0xfae <enterModeRun>
}

int returnVal;

int main(void)
{
     f3a:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
		if(command != BTN_NULL ) keyBuf = 1;
     f3c:	d1 e0       	ldi	r29, 0x01	; 1
}

int returnVal;

int main(void)
{
     f3e:	c1 2f       	mov	r28, r17
	initCodeData();		
	loadWeight = readLoad();
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
     f40:	cf de       	rcall	.-610    	; 0xce0 <procRelayOut>
		sciCommandProc( );	
     f42:	e6 d5       	rcall	.+3020   	; 0x1b10 <sciCommandProc>
     f44:	72 db       	rcall	.-2332   	; 0x62a <getButton>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     f46:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <command>
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	09 f0       	breq	.+2      	; 0xf50 <main+0x30>
		if(command != BTN_NULL ) keyBuf = 1;
     f4e:	cd 2f       	mov	r28, r29
     f50:	04 df       	rcall	.-504    	; 0xd5a <readLoad>
     f52:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
		loadWeight = readLoad();
     f56:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
     f5a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <machineState>
     f5e:	82 30       	cpi	r24, 0x02	; 2
		switch( machineState ){
     f60:	99 f0       	breq	.+38     	; 0xf88 <main+0x68>
     f62:	28 f4       	brcc	.+10     	; 0xf6e <main+0x4e>
     f64:	88 23       	and	r24, r24
     f66:	41 f0       	breq	.+16     	; 0xf78 <main+0x58>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	51 f0       	breq	.+20     	; 0xf80 <main+0x60>
     f6c:	19 c0       	rjmp	.+50     	; 0xfa0 <main+0x80>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	79 f0       	breq	.+30     	; 0xf90 <main+0x70>
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	89 f0       	breq	.+34     	; 0xf98 <main+0x78>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <main+0x80>
     f78:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_RUN			: modeRun(command)			; break;
     f7c:	11 d1       	rcall	.+546    	; 0x11a0 <modeRun>
     f7e:	11 c0       	rjmp	.+34     	; 0xfa2 <main+0x82>
     f80:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_PASSWD		: modePassWord(command)		; break;
     f84:	00 d2       	rcall	.+1024   	; 0x1386 <modePassWord>
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <main+0x82>
			case MODE_SELECT_CODE	: modeSelectCode(command)	; break;
     f88:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
     f8c:	1d d1       	rcall	.+570    	; 0x11c8 <modeSelectCode>
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <main+0x82>
			case MODE_CHANGE_CODE	: modeChangeCode(command)	; break;
     f90:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
     f94:	71 d2       	rcall	.+1250   	; 0x1478 <modeChangeCode>
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <main+0x82>
     f98:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <command>
			case MODE_ERROR			: modeError(command)		; break;			
     f9c:	91 d4       	rcall	.+2338   	; 0x18c0 <modeError>
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <main+0x82>
     fa0:	06 d0       	rcall	.+12     	; 0xfae <enterModeRun>
     fa2:	c1 30       	cpi	r28, 0x01	; 1
			default					: enterModeRun( )	; break;
     fa4:	69 f6       	brne	.-102    	; 0xf40 <main+0x20>
     fa6:	41 db       	rcall	.-2430   	; 0x62a <getButton>
		}
		if(keyBuf ==  1){
     fa8:	8f 3f       	cpi	r24, 0xFF	; 255
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <main+0x86>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     fac:	c8 cf       	rjmp	.-112    	; 0xf3e <main+0x1e>

00000fae <enterModeRun>:
#include "header.h"
#include "extern.h"

void enterModeRun(void)
{
	initCodeData();
     fae:	80 de       	rcall	.-768    	; 0xcb0 <initCodeData>
	machineState = MODE_RUN;
     fb0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <machineState>
	loadWeight = readLoad();
     fb4:	d2 de       	rcall	.-604    	; 0xd5a <readLoad>
     fb6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <loadWeight+0x1>
     fba:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <loadWeight>
	displayWeight(loadWeight);
     fbe:	52 cb       	rjmp	.-2396   	; 0x664 <displayWeight>
     fc0:	08 95       	ret

00000fc2 <enterModePassWord>:
}

void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
		fndData[i] = fndTableNum[0];
     fc8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fndTableNum>
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     fcc:	ad e9       	ldi	r26, 0x9D	; 157
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     fd2:	e9 ea       	ldi	r30, 0xA9	; 169
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	80 83       	st	Z, r24
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	1c 92       	st	X, r1
     fdc:	11 97       	sbiw	r26, 0x01	; 1
		fndData[i] = fndTableNum[0];
     fde:	81 83       	std	Z+1, r24	; 0x01
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	1c 92       	st	X, r1
     fe4:	12 97       	sbiw	r26, 0x02	; 2
		fndData[i] = fndTableNum[0];
     fe6:	82 83       	std	Z+2, r24	; 0x02
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     fe8:	13 96       	adiw	r26, 0x03	; 3
     fea:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     fec:	83 83       	std	Z+3, r24	; 0x03
	}
	blinkCmdFlag = 0x08;
     fee:	88 e0       	ldi	r24, 0x08	; 8
     ff0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
	editDigitPoint = 3;		// 1000
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
     ffa:	08 95       	ret

00000ffc <enterModeSelectCode>:
}

void enterModeSelectCode(void)
{
	machineState = MODE_SELECT_CODE;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	codeNumber = 0;
    1002:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
    1006:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
	fndData[3] = fndTableChar['P' - 'A'];
    100a:	e9 ea       	ldi	r30, 0xA9	; 169
    100c:	f1 e0       	ldi	r31, 0x01	; 1
    100e:	ae e0       	ldi	r26, 0x0E	; 14
    1010:	b1 e0       	ldi	r27, 0x01	; 1
    1012:	1f 96       	adiw	r26, 0x0f	; 15
    1014:	8c 91       	ld	r24, X
    1016:	1f 97       	sbiw	r26, 0x0f	; 15
    1018:	83 83       	std	Z+3, r24	; 0x03
	fndData[2] = fndTableChar['O' - 'A'];
    101a:	1e 96       	adiw	r26, 0x0e	; 14
    101c:	8c 91       	ld	r24, X
    101e:	1e 97       	sbiw	r26, 0x0e	; 14
    1020:	82 83       	std	Z+2, r24	; 0x02
	fndData[1] = fndTableChar['I' - 'A'];
    1022:	18 96       	adiw	r26, 0x08	; 8
    1024:	8c 91       	ld	r24, X
    1026:	18 97       	sbiw	r26, 0x08	; 8
    1028:	81 83       	std	Z+1, r24	; 0x01
	fndData[0] = fndTableChar['T' - 'A'];
    102a:	53 96       	adiw	r26, 0x13	; 19
    102c:	8c 91       	ld	r24, X
    102e:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;	//
    1030:	8f e0       	ldi	r24, 0x0F	; 15
    1032:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1036:	08 95       	ret

00001038 <setEditTmpFndData>:
}

void setEditTmpFndData(int16_t arg1)
{		
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	9c 01       	movw	r18, r24
	tmpFndData[3] = arg1 / 1000;
    103e:	ea eb       	ldi	r30, 0xBA	; 186
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	68 ee       	ldi	r22, 0xE8	; 232
    1044:	73 e0       	ldi	r23, 0x03	; 3
    1046:	85 d5       	rcall	.+2826   	; 0x1b52 <__divmodhi4>
    1048:	63 83       	std	Z+3, r22	; 0x03
	tmpFndData[2] = (arg1 % 1000) /100;
    104a:	c4 e6       	ldi	r28, 0x64	; 100
    104c:	d0 e0       	ldi	r29, 0x00	; 0
    104e:	be 01       	movw	r22, r28
    1050:	80 d5       	rcall	.+2816   	; 0x1b52 <__divmodhi4>
    1052:	62 83       	std	Z+2, r22	; 0x02
	tmpFndData[1] = ( arg1 % 100 ) / 10;
    1054:	c9 01       	movw	r24, r18
    1056:	be 01       	movw	r22, r28
    1058:	7c d5       	rcall	.+2808   	; 0x1b52 <__divmodhi4>
    105a:	ca e0       	ldi	r28, 0x0A	; 10
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	be 01       	movw	r22, r28
    1060:	78 d5       	rcall	.+2800   	; 0x1b52 <__divmodhi4>
    1062:	61 83       	std	Z+1, r22	; 0x01
	tmpFndData[0] = arg1 % 10 ;
    1064:	c9 01       	movw	r24, r18
    1066:	be 01       	movw	r22, r28
    1068:	74 d5       	rcall	.+2792   	; 0x1b52 <__divmodhi4>
    106a:	80 83       	st	Z, r24
    106c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <editDigitPoint>

	editDigitPoint = 0;		
	blinkCmdFlag = 0x01;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
	displayWeight1(arg1);
    1076:	c9 01       	movw	r24, r18
    1078:	ca db       	rcall	.-2156   	; 0x80e <displayWeight1>
    107a:	df 91       	pop	r29
}
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <enterModeChangeCode>:
    1080:	83 e0       	ldi	r24, 0x03	; 3

void enterModeChangeCode(void)
{
	machineState = MODE_CHANGE_CODE;
    1082:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>

	switch(codeNumber){	
    1086:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <codeNumber>
    108a:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <codeNumber+0x1>
    108e:	e8 30       	cpi	r30, 0x08	; 8
    1090:	f1 05       	cpc	r31, r1
    1092:	08 f0       	brcs	.+2      	; 0x1096 <enterModeChangeCode+0x16>
    1094:	82 c0       	rjmp	.+260    	; 0x119a <__stack+0x9b>
    1096:	e0 5b       	subi	r30, 0xB0	; 176
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	8a c5       	rjmp	.+2836   	; 0x1bb0 <__tablejump2__>
	case CODE_POINT:
		tmpCodeData = codePoint;
    109c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <codePoint>
    10a0:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <codePoint+0x1>
    10a4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    10a8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		if(tmpCodeData == 0) blinkCmdFlag = 1;
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	21 f4       	brne	.+8      	; 0x10b8 <enterModeChangeCode+0x38>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 1) blinkCmdFlag = 2;
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <enterModeChangeCode+0x46>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 2) blinkCmdFlag = 4;
    10c6:	02 97       	sbiw	r24, 0x02	; 2
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <enterModeChangeCode+0x52>
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <enterModeChangeCode+0x60>
		else {
			tmpCodeData = 0;
    10d2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    10d6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
			blinkCmdFlag = 1; 
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
		}		
		displayWeight1(loadWeight);
    10e0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    10e4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    10e8:	92 cb       	rjmp	.-2268   	; 0x80e <displayWeight1>
		break;
    10ea:	08 95       	ret
	case CODE_FILT:
		tmpCodeData = codeFilt;	//
    10ec:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <codeFilt>
    10f0:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <codeFilt+0x1>
    10f4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    10f8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 1;
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space 
    1102:	3d cc       	rjmp	.-1926   	; 0x97e <displayNumber1>
		break;
    1104:	08 95       	ret
	case CODE_DIVISION:
		tmpCodeData = codeDivision;	//
    1106:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <codeDivision>
    110a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <codeDivision+0x1>
    110e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1112:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 1;
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space
    111c:	30 cc       	rjmp	.-1952   	; 0x97e <displayNumber1>
		break;
    111e:	08 95       	ret
	case CODE_AUTO:
		tmpCodeData = 0;
    1120:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    1124:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
		blinkCmdFlag = 0x0f;	//
    1128:	8f e0       	ldi	r24, 0x0F	; 15
    112a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
			fndData[3] = 0x00;
			fndData[2] = fndTableChar['Y' - 'A'];
			fndData[1] = fndTableChar['E' - 'A'];
			fndData[0] = fndTableChar['S' - 'A'];
		} else {
			fndData[3] = 0x00;
    112e:	e9 ea       	ldi	r30, 0xA9	; 169
    1130:	f1 e0       	ldi	r31, 0x01	; 1
    1132:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['N' - 'A'];
    1134:	ae e0       	ldi	r26, 0x0E	; 14
    1136:	b1 e0       	ldi	r27, 0x01	; 1
    1138:	1d 96       	adiw	r26, 0x0d	; 13
    113a:	8c 91       	ld	r24, X
    113c:	1d 97       	sbiw	r26, 0x0d	; 13
    113e:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['O' - 'A'];
    1140:	1e 96       	adiw	r26, 0x0e	; 14
    1142:	8c 91       	ld	r24, X
    1144:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = 0x00;
    1146:	10 82       	st	Z, r1
    1148:	08 95       	ret
		}
		break;
	case CODE_ALARM:
		tmpCodeData = codeAlarm;
    114a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <codeAlarm>
    114e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <codeAlarm+0x1>
    1152:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1156:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    115a:	6e cf       	rjmp	.-292    	; 0x1038 <setEditTmpFndData>
		break;
    115c:	08 95       	ret
	case CODE_OVER:
		tmpCodeData = codeOver;
    115e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <codeOver>
    1162:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <codeOver+0x1>
    1166:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    116a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    116e:	64 cf       	rjmp	.-312    	; 0x1038 <setEditTmpFndData>
		break;
    1170:	08 95       	ret
	case CODE_SETT:
		tmpCodeData = codeWeight;
    1172:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <codeWeight>
    1176:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <codeWeight+0x1>
    117a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    117e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
		setEditTmpFndData(tmpCodeData);
    1182:	5a cf       	rjmp	.-332    	; 0x1038 <setEditTmpFndData>
		break;
    1184:	08 95       	ret
	case 7:
		editDigitPoint = 0;		// 1000
    1186:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <editDigitPoint>
		blinkCmdFlag = 0x00;
    118a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <blinkCmdFlag>
		displayNumber(adcWeightIn);
    118e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    1192:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
		break;
    1196:	a7 cc       	rjmp	.-1714   	; 0xae6 <displayNumber>
	default:
		systemErrProc(ERR_SYS_NO_CODE_NUMBER);
    1198:	08 95       	ret
    119a:	82 e3       	ldi	r24, 0x32	; 50
    119c:	dd cd       	rjmp	.-1094   	; 0xd58 <systemErrProc>
    119e:	08 95       	ret

000011a0 <modeRun>:
	}
}

int modeRun(uint8_t cmd)
{
	if( cmd  == BTN_ENTER ){ 
    11a0:	8f 37       	cpi	r24, 0x7F	; 127
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <modeRun+0x8>
		enterModePassWord();
    11a4:	0e df       	rcall	.-484    	; 0xfc2 <enterModePassWord>
		// enterModeSelectCode();
		return 0;
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <modeRun+0x22>
	}

	if( (PIND & 0x01) == 0) displayWeight(codeOver);
    11a8:	80 99       	sbic	0x10, 0	; 16
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <modeRun+0x18>
    11ac:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <codeOver>
    11b0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <codeOver+0x1>
    11b4:	57 da       	rcall	.-2898   	; 0x664 <displayWeight>
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <modeRun+0x22>
	else					displayWeight(loadWeight);
    11b8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    11bc:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    11c0:	51 da       	rcall	.-2910   	; 0x664 <displayWeight>
	return 0;
}
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <modeSelectCode>:
}

int modeSelectCode(uint8_t cmd)
{

	if( cmd == BTN_ENTER ){
    11c8:	8f 37       	cpi	r24, 0x7F	; 127
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <modeSelectCode+0x8>
		enterModeChangeCode();
    11cc:	59 df       	rcall	.-334    	; 0x1080 <enterModeChangeCode>
		return 0;
    11ce:	ae c0       	rjmp	.+348    	; 0x132c <modeSelectCode+0x164>
	}

	if(cmd == BTN_CANCEL){
    11d0:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <modeSelectCode+0x10>
    11d4:	ec de       	rcall	.-552    	; 0xfae <enterModeRun>
		return 0;
    11d6:	aa c0       	rjmp	.+340    	; 0x132c <modeSelectCode+0x164>
	}
	
	if(cmd == BTN_UP){
    11d8:	8f 3e       	cpi	r24, 0xEF	; 239
    11da:	09 f0       	breq	.+2      	; 0x11de <modeSelectCode+0x16>
    11dc:	a7 c0       	rjmp	.+334    	; 0x132c <modeSelectCode+0x164>
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    11de:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <codeNumber>
    11e2:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <codeNumber+0x1>
    11e6:	e8 30       	cpi	r30, 0x08	; 8
    11e8:	f1 05       	cpc	r31, r1
    11ea:	0c f0       	brlt	.+2      	; 0x11ee <modeSelectCode+0x26>
    11ec:	9a c0       	rjmp	.+308    	; 0x1322 <modeSelectCode+0x15a>
    11ee:	31 96       	adiw	r30, 0x01	; 1
    11f0:	f0 93 99 01 	sts	0x0199, r31	; 0x800199 <codeNumber+0x1>
    11f4:	e0 93 98 01 	sts	0x0198, r30	; 0x800198 <codeNumber>
		switch(codeNumber){
    11f8:	e8 30       	cpi	r30, 0x08	; 8
    11fa:	f1 05       	cpc	r31, r1
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <modeSelectCode+0x38>
    11fe:	8f c0       	rjmp	.+286    	; 0x131e <modeSelectCode+0x156>
    1200:	e8 5a       	subi	r30, 0xA8	; 168
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	d5 c4       	rjmp	.+2474   	; 0x1bb0 <__tablejump2__>
			case CODE_POINT :
				fndData[3] = fndTableChar['P' - 'A'];
    1206:	e9 ea       	ldi	r30, 0xA9	; 169
    1208:	f1 e0       	ldi	r31, 0x01	; 1
    120a:	ae e0       	ldi	r26, 0x0E	; 14
    120c:	b1 e0       	ldi	r27, 0x01	; 1
    120e:	1f 96       	adiw	r26, 0x0f	; 15
    1210:	8c 91       	ld	r24, X
    1212:	1f 97       	sbiw	r26, 0x0f	; 15
    1214:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['O' - 'A'];
    1216:	1e 96       	adiw	r26, 0x0e	; 14
    1218:	8c 91       	ld	r24, X
    121a:	1e 97       	sbiw	r26, 0x0e	; 14
    121c:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['I' - 'A'];
    121e:	18 96       	adiw	r26, 0x08	; 8
    1220:	8c 91       	ld	r24, X
    1222:	18 97       	sbiw	r26, 0x08	; 8
    1224:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1226:	53 96       	adiw	r26, 0x13	; 19
    1228:	8c 91       	ld	r24, X
    122a:	80 83       	st	Z, r24
				break;
    122c:	7f c0       	rjmp	.+254    	; 0x132c <modeSelectCode+0x164>
			case CODE_FILT :
				fndData[3] = fndTableChar['F' - 'A'];
    122e:	e9 ea       	ldi	r30, 0xA9	; 169
    1230:	f1 e0       	ldi	r31, 0x01	; 1
    1232:	ae e0       	ldi	r26, 0x0E	; 14
    1234:	b1 e0       	ldi	r27, 0x01	; 1
    1236:	15 96       	adiw	r26, 0x05	; 5
    1238:	8c 91       	ld	r24, X
    123a:	15 97       	sbiw	r26, 0x05	; 5
    123c:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    123e:	18 96       	adiw	r26, 0x08	; 8
    1240:	8c 91       	ld	r24, X
    1242:	18 97       	sbiw	r26, 0x08	; 8
    1244:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['L' - 'A'];
    1246:	1b 96       	adiw	r26, 0x0b	; 11
    1248:	8c 91       	ld	r24, X
    124a:	1b 97       	sbiw	r26, 0x0b	; 11
    124c:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    124e:	53 96       	adiw	r26, 0x13	; 19
    1250:	8c 91       	ld	r24, X
    1252:	80 83       	st	Z, r24
				break;
    1254:	6b c0       	rjmp	.+214    	; 0x132c <modeSelectCode+0x164>
			case CODE_DIVISION :
				fndData[3] = fndTableChar['D' - 'A'];
    1256:	e9 ea       	ldi	r30, 0xA9	; 169
    1258:	f1 e0       	ldi	r31, 0x01	; 1
    125a:	ae e0       	ldi	r26, 0x0E	; 14
    125c:	b1 e0       	ldi	r27, 0x01	; 1
    125e:	13 96       	adiw	r26, 0x03	; 3
    1260:	8c 91       	ld	r24, X
    1262:	13 97       	sbiw	r26, 0x03	; 3
    1264:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    1266:	18 96       	adiw	r26, 0x08	; 8
    1268:	8c 91       	ld	r24, X
    126a:	18 97       	sbiw	r26, 0x08	; 8
    126c:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['V' - 'A'];
    126e:	55 96       	adiw	r26, 0x15	; 21
    1270:	9c 91       	ld	r25, X
    1272:	91 83       	std	Z+1, r25	; 0x01
				fndData[0] = fndTableChar['I' - 'A'];
    1274:	80 83       	st	Z, r24
				break;
    1276:	5a c0       	rjmp	.+180    	; 0x132c <modeSelectCode+0x164>
			case CODE_AUTO :
				fndData[3] = fndTableChar['A' - 'A'];
    1278:	e9 ea       	ldi	r30, 0xA9	; 169
    127a:	f1 e0       	ldi	r31, 0x01	; 1
    127c:	ae e0       	ldi	r26, 0x0E	; 14
    127e:	b1 e0       	ldi	r27, 0x01	; 1
    1280:	8c 91       	ld	r24, X
    1282:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['U' - 'A'];
    1284:	54 96       	adiw	r26, 0x14	; 20
    1286:	8c 91       	ld	r24, X
    1288:	54 97       	sbiw	r26, 0x14	; 20
    128a:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    128c:	53 96       	adiw	r26, 0x13	; 19
    128e:	8c 91       	ld	r24, X
    1290:	53 97       	sbiw	r26, 0x13	; 19
    1292:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['O' - 'A'];
    1294:	1e 96       	adiw	r26, 0x0e	; 14
    1296:	8c 91       	ld	r24, X
    1298:	80 83       	st	Z, r24
				break;
    129a:	48 c0       	rjmp	.+144    	; 0x132c <modeSelectCode+0x164>
			case CODE_ALARM :
				fndData[3] = fndTableChar['A' - 'A'];
    129c:	ae e0       	ldi	r26, 0x0E	; 14
    129e:	b1 e0       	ldi	r27, 0x01	; 1
    12a0:	8c 91       	ld	r24, X
    12a2:	e9 ea       	ldi	r30, 0xA9	; 169
    12a4:	f1 e0       	ldi	r31, 0x01	; 1
    12a6:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['L' - 'A'];
    12a8:	1b 96       	adiw	r26, 0x0b	; 11
    12aa:	9c 91       	ld	r25, X
    12ac:	1b 97       	sbiw	r26, 0x0b	; 11
    12ae:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['A' - 'A'];
    12b0:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    12b2:	51 96       	adiw	r26, 0x11	; 17
    12b4:	8c 91       	ld	r24, X
    12b6:	80 83       	st	Z, r24
				break;
    12b8:	39 c0       	rjmp	.+114    	; 0x132c <modeSelectCode+0x164>
			case CODE_OVER :
				fndData[3] = fndTableChar['O' - 'A'];
    12ba:	e9 ea       	ldi	r30, 0xA9	; 169
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	ae e0       	ldi	r26, 0x0E	; 14
    12c0:	b1 e0       	ldi	r27, 0x01	; 1
    12c2:	1e 96       	adiw	r26, 0x0e	; 14
    12c4:	8c 91       	ld	r24, X
    12c6:	1e 97       	sbiw	r26, 0x0e	; 14
    12c8:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['V' - 'A'];
    12ca:	55 96       	adiw	r26, 0x15	; 21
    12cc:	8c 91       	ld	r24, X
    12ce:	55 97       	sbiw	r26, 0x15	; 21
    12d0:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
    12d2:	14 96       	adiw	r26, 0x04	; 4
    12d4:	8c 91       	ld	r24, X
    12d6:	14 97       	sbiw	r26, 0x04	; 4
    12d8:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    12da:	51 96       	adiw	r26, 0x11	; 17
    12dc:	8c 91       	ld	r24, X
    12de:	80 83       	st	Z, r24
				break;
    12e0:	25 c0       	rjmp	.+74     	; 0x132c <modeSelectCode+0x164>
			case CODE_SETT :
				fndData[3] = fndTableChar['S' - 'A'];
    12e2:	e9 ea       	ldi	r30, 0xA9	; 169
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	ae e0       	ldi	r26, 0x0E	; 14
    12e8:	b1 e0       	ldi	r27, 0x01	; 1
    12ea:	52 96       	adiw	r26, 0x12	; 18
    12ec:	8c 91       	ld	r24, X
    12ee:	52 97       	sbiw	r26, 0x12	; 18
    12f0:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['E' - 'A'];
    12f2:	14 96       	adiw	r26, 0x04	; 4
    12f4:	8c 91       	ld	r24, X
    12f6:	14 97       	sbiw	r26, 0x04	; 4
    12f8:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    12fa:	53 96       	adiw	r26, 0x13	; 19
    12fc:	8c 91       	ld	r24, X
    12fe:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1300:	80 83       	st	Z, r24
				break;
    1302:	14 c0       	rjmp	.+40     	; 0x132c <modeSelectCode+0x164>
			case CODE_ADC :
				fndData[3] = 0x40;
    1304:	e9 ea       	ldi	r30, 0xA9	; 169
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	80 e4       	ldi	r24, 0x40	; 64
    130a:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['A' - 'A'];
    130c:	ae e0       	ldi	r26, 0x0E	; 14
    130e:	b1 e0       	ldi	r27, 0x01	; 1
    1310:	9c 91       	ld	r25, X
    1312:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['D' - 'A'];
    1314:	13 96       	adiw	r26, 0x03	; 3
    1316:	9c 91       	ld	r25, X
				fndData[0] = 0x40;
    1318:	91 83       	std	Z+1, r25	; 0x01
				break;
    131a:	80 83       	st	Z, r24
			default:	
				enterModeSelectCode();			
    131c:	07 c0       	rjmp	.+14     	; 0x132c <modeSelectCode+0x164>
    131e:	6e de       	rcall	.-804    	; 0xffc <enterModeSelectCode>
				break;
    1320:	05 c0       	rjmp	.+10     	; 0x132c <modeSelectCode+0x164>
		enterModeRun();
		return 0;
	}
	
	if(cmd == BTN_UP){
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    1322:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <codeNumber+0x1>
    1326:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <codeNumber>
    132a:	6d cf       	rjmp	.-294    	; 0x1206 <modeSelectCode+0x3e>

	if(cmd == BTN_LEFT){
		return 0;
	}
	return 0;		
}
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	08 95       	ret

00001332 <enterModeError>:
	return 0;
}

void enterModeError(int errNo)
{
	cntModeErr = timerCounter2;
    1332:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <timerCounter2>
    1336:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <timerCounter2+0x1>
    133a:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <timerCounter2+0x2>
    133e:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <timerCounter2+0x3>
    1342:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <cntModeErr>
    1346:	50 93 81 01 	sts	0x0181, r21	; 0x800181 <cntModeErr+0x1>
    134a:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <cntModeErr+0x2>
    134e:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <cntModeErr+0x3>
	mStateBk = machineState;
    1352:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <machineState>
    1356:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <mStateBk>
	machineState = MODE_ERROR;
    135a:	24 e0       	ldi	r18, 0x04	; 4
    135c:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <machineState>
	//codeNumberBk = codeNumber;
	//tmpCodeDataBk = tmpCodeData;
	
	fndData[3] = fndTableChar['E' - 'A'];
    1360:	e9 ea       	ldi	r30, 0xA9	; 169
    1362:	f1 e0       	ldi	r31, 0x01	; 1
    1364:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <fndTableChar+0x4>
    1368:	23 83       	std	Z+3, r18	; 0x03
	fndData[2] = 0x40;
    136a:	20 e4       	ldi	r18, 0x40	; 64
    136c:	22 83       	std	Z+2, r18	; 0x02
	fndData[1] = fndTableNum[0];
    136e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <fndTableNum>
    1372:	21 83       	std	Z+1, r18	; 0x01
	fndData[0] = fndTableNum[errNo];
    1374:	8c 5f       	subi	r24, 0xFC	; 252
    1376:	9e 4f       	sbci	r25, 0xFE	; 254
    1378:	dc 01       	movw	r26, r24
    137a:	8c 91       	ld	r24, X
    137c:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;			//
    137e:	8f e0       	ldi	r24, 0x0F	; 15
    1380:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1384:	08 95       	ret

00001386 <modePassWord>:
		blinkCmdFlag = 0x08;
		editDigitPoint = 3;		// 1000
		return 0;
	}
*/	
	if( cmd == BTN_ENTER ){
    1386:	8f 37       	cpi	r24, 0x7F	; 127
    1388:	99 f5       	brne	.+102    	; 0x13f0 <modePassWord+0x6a>
		passwd = passWord[3] * 1000 +passWord[2] * 100 + passWord[1] * 10 + passWord[0]; 	
    138a:	ed e9       	ldi	r30, 0x9D	; 157
    138c:	f1 e0       	ldi	r31, 0x01	; 1
		if( passwd == 5737 ){
    138e:	43 81       	ldd	r20, Z+3	; 0x03
    1390:	28 ee       	ldi	r18, 0xE8	; 232
    1392:	33 e0       	ldi	r19, 0x03	; 3
    1394:	42 9f       	mul	r20, r18
    1396:	c0 01       	movw	r24, r0
    1398:	43 9f       	mul	r20, r19
    139a:	90 0d       	add	r25, r0
    139c:	11 24       	eor	r1, r1
    139e:	22 81       	ldd	r18, Z+2	; 0x02
    13a0:	ac 01       	movw	r20, r24
    13a2:	34 e6       	ldi	r19, 0x64	; 100
    13a4:	23 9f       	mul	r18, r19
    13a6:	40 0d       	add	r20, r0
    13a8:	51 1d       	adc	r21, r1
    13aa:	11 24       	eor	r1, r1
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	89 2f       	mov	r24, r25
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	bc 01       	movw	r22, r24
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	9c 01       	movw	r18, r24
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	cb 01       	movw	r24, r22
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	84 0f       	add	r24, r20
    13ce:	95 1f       	adc	r25, r21
    13d0:	20 81       	ld	r18, Z
    13d2:	82 0f       	add	r24, r18
    13d4:	91 1d       	adc	r25, r1
    13d6:	89 36       	cpi	r24, 0x69	; 105
    13d8:	96 41       	sbci	r25, 0x16	; 22
    13da:	11 f4       	brne	.+4      	; 0x13e0 <modePassWord+0x5a>
			enterModeSelectCode();
    13dc:	0f de       	rcall	.-994    	; 0xffc <enterModeSelectCode>
			return 0;
    13de:	49 c0       	rjmp	.+146    	; 0x1472 <modePassWord+0xec>
		} else {
			tripNumber = 5;
    13e0:	85 e0       	ldi	r24, 0x05	; 5
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    13e8:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
			enterModeError(tripNumber);
    13ec:	a2 df       	rcall	.-188    	; 0x1332 <enterModeError>
			
			// displayErr(ERR_PASS_WORD);
			// retryPassWord = 1;
			return 0;
    13ee:	41 c0       	rjmp	.+130    	; 0x1472 <modePassWord+0xec>
		}
		return 0;
	}

	if(cmd == BTN_CANCEL){
    13f0:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <modePassWord+0x72>
    13f4:	dc dd       	rcall	.-1096   	; 0xfae <enterModeRun>
		return 0;
    13f6:	3d c0       	rjmp	.+122    	; 0x1472 <modePassWord+0xec>
	}
	
	if(cmd == BTN_UP){
    13f8:	8f 3e       	cpi	r24, 0xEF	; 239
    13fa:	c9 f4       	brne	.+50     	; 0x142e <modePassWord+0xa8>
		passWord[editDigitPoint] = ( passWord[editDigitPoint] > 8 ) ? 0 : passWord[editDigitPoint] +1;
    13fc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	fc 01       	movw	r30, r24
    1404:	e3 56       	subi	r30, 0x63	; 99
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	e0 81       	ld	r30, Z
    140a:	e9 30       	cpi	r30, 0x09	; 9
    140c:	10 f4       	brcc	.+4      	; 0x1412 <modePassWord+0x8c>
    140e:	ef 5f       	subi	r30, 0xFF	; 255
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <modePassWord+0x8e>
    1412:	e0 e0       	ldi	r30, 0x00	; 0
    1414:	dc 01       	movw	r26, r24
    1416:	a3 56       	subi	r26, 0x63	; 99
    1418:	be 4f       	sbci	r27, 0xFE	; 254
    141a:	ec 93       	st	X, r30
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
    141c:	dc 01       	movw	r26, r24
    141e:	a7 55       	subi	r26, 0x57	; 87
    1420:	be 4f       	sbci	r27, 0xFE	; 254
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ec 5f       	subi	r30, 0xFC	; 252
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	20 81       	ld	r18, Z
    142a:	2c 93       	st	X, r18
		return 0;
    142c:	22 c0       	rjmp	.+68     	; 0x1472 <modePassWord+0xec>
	}

	if(cmd == BTN_LEFT){
    142e:	8f 3d       	cpi	r24, 0xDF	; 223
    1430:	01 f5       	brne	.+64     	; 0x1472 <modePassWord+0xec>
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    1432:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
    1436:	88 23       	and	r24, r24
    1438:	11 f0       	breq	.+4      	; 0x143e <modePassWord+0xb8>
    143a:	81 50       	subi	r24, 0x01	; 1
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <modePassWord+0xba>
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    1444:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <blinkCmdFlag>
    1448:	96 95       	lsr	r25
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    144a:	19 f0       	breq	.+6      	; 0x1452 <modePassWord+0xcc>
		return 0;
	}

	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    144c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <blinkCmdFlag>
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <modePassWord+0xd2>
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    1452:	98 e0       	ldi	r25, 0x08	; 8
    1454:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <blinkCmdFlag>
		
		i = passWord[editDigitPoint];
    1458:	90 e0       	ldi	r25, 0x00	; 0
		fndData[editDigitPoint] = fndTableNum[i];
    145a:	dc 01       	movw	r26, r24
    145c:	a7 55       	subi	r26, 0x57	; 87
    145e:	be 4f       	sbci	r27, 0xFE	; 254
	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
		
		i = passWord[editDigitPoint];
    1460:	fc 01       	movw	r30, r24
    1462:	e3 56       	subi	r30, 0x63	; 99
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
		fndData[editDigitPoint] = fndTableNum[i];
    1466:	e0 81       	ld	r30, Z
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ec 5f       	subi	r30, 0xFC	; 252
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	80 81       	ld	r24, Z
    1470:	8c 93       	st	X, r24
		return 0;
	}
	return 0;
}
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	08 95       	ret

00001478 <modeChangeCode>:

int modeChangeCode(uint8_t cmd)
{
	int16_t tmp;
	
	if(cmd == BTN_ENTER){
    1478:	8f 37       	cpi	r24, 0x7F	; 127
    147a:	09 f0       	breq	.+2      	; 0x147e <modeChangeCode+0x6>
    147c:	97 c0       	rjmp	.+302    	; 0x15ac <modeChangeCode+0x134>
		if( codeNumber == CODE_SETT ) {
    147e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <codeNumber>
    1482:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <codeNumber+0x1>
    1486:	86 30       	cpi	r24, 0x06	; 6
    1488:	91 05       	cpc	r25, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <modeChangeCode+0x16>
    148c:	49 c0       	rjmp	.+146    	; 0x1520 <modeChangeCode+0xa8>
			tmp = adcWeightIn - codeAdcZero;
    148e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    1492:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    1496:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <codeAdcZero>
    149a:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <codeAdcZero+0x1>
    149e:	82 1b       	sub	r24, r18
    14a0:	93 0b       	sbc	r25, r19
			if(tmp < 0 ) tmp = - tmp;
			if( tmp < 20 ){
    14a2:	9c 01       	movw	r18, r24
    14a4:	22 f4       	brpl	.+8      	; 0x14ae <modeChangeCode+0x36>
    14a6:	22 27       	eor	r18, r18
    14a8:	33 27       	eor	r19, r19
    14aa:	28 1b       	sub	r18, r24
    14ac:	39 0b       	sbc	r19, r25
    14ae:	24 31       	cpi	r18, 0x14	; 20
    14b0:	31 05       	cpc	r19, r1
    14b2:	44 f4       	brge	.+16     	; 0x14c4 <modeChangeCode+0x4c>
				tripNumber = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    14bc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
				enterModeError(tripNumber);
    14c0:	38 df       	rcall	.-400    	; 0x1332 <enterModeError>
    14c2:	fb c1       	rjmp	.+1014   	; 0x18ba <modeChangeCode+0x442>
			} else if ( adcWeightIn > 1000 ){
    14c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    14c8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    14cc:	89 3e       	cpi	r24, 0xE9	; 233
    14ce:	93 40       	sbci	r25, 0x03	; 3
    14d0:	44 f0       	brlt	.+16     	; 0x14e2 <modeChangeCode+0x6a>
				tripNumber = 2;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    14da:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
				enterModeError(tripNumber);				
    14de:	29 df       	rcall	.-430    	; 0x1332 <enterModeError>
    14e0:	ec c1       	rjmp	.+984    	; 0x18ba <modeChangeCode+0x442>
			} else {
				saveCode(CODE_SETT,tmpCodeData);
    14e2:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <tmpCodeData>
    14e6:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <tmpCodeData+0x1>
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				saveCode(CODE_SPAN_ADC,adcWeight / 16);
    14f2:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <adcWeight>
    14f6:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <adcWeight+0x1>
    14fa:	77 23       	and	r23, r23
    14fc:	14 f4       	brge	.+4      	; 0x1502 <modeChangeCode+0x8a>
    14fe:	61 5f       	subi	r22, 0xF1	; 241
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	75 95       	asr	r23
    1504:	67 95       	ror	r22
    1506:	75 95       	asr	r23
    1508:	67 95       	ror	r22
    150a:	75 95       	asr	r23
    150c:	67 95       	ror	r22
    150e:	75 95       	asr	r23
    1510:	67 95       	ror	r22
    1512:	88 e0       	ldi	r24, 0x08	; 8
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				calcWeightCoeff();
    151a:	8b db       	rcall	.-2282   	; 0xc32 <calcWeightCoeff>
				enterModeRun();
    151c:	48 dd       	rcall	.-1392   	; 0xfae <enterModeRun>
    151e:	cd c1       	rjmp	.+922    	; 0x18ba <modeChangeCode+0x442>
    1520:	83 30       	cpi	r24, 0x03	; 3
			}
			return 0;
		} else if(codeNumber == CODE_AUTO){
    1522:	91 05       	cpc	r25, r1
    1524:	09 f0       	breq	.+2      	; 0x1528 <modeChangeCode+0xb0>
    1526:	3a c0       	rjmp	.+116    	; 0x159c <modeChangeCode+0x124>
    1528:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			if(tmpCodeData == 0 ){
    152c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1530:	89 2b       	or	r24, r25
    1532:	11 f4       	brne	.+4      	; 0x1538 <modeChangeCode+0xc0>
				 enterModeRun();
    1534:	3c dd       	rcall	.-1416   	; 0xfae <enterModeRun>
    1536:	c1 c1       	rjmp	.+898    	; 0x18ba <modeChangeCode+0x442>
				 return 0;
    1538:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
			}
			
			tmp = adcWeightIn - codeAdcZero;
    153c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    1540:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <codeAdcZero>
    1544:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <codeAdcZero+0x1>
    1548:	82 1b       	sub	r24, r18
    154a:	93 0b       	sbc	r25, r19
    154c:	9c 01       	movw	r18, r24
			if(tmp < 0 ) tmp = - tmp;
			if( tmp < 20 ){
    154e:	22 f4       	brpl	.+8      	; 0x1558 <modeChangeCode+0xe0>
    1550:	22 27       	eor	r18, r18
    1552:	33 27       	eor	r19, r19
    1554:	28 1b       	sub	r18, r24
    1556:	39 0b       	sbc	r19, r25
    1558:	24 31       	cpi	r18, 0x14	; 20
    155a:	31 05       	cpc	r19, r1
    155c:	44 f4       	brge	.+16     	; 0x156e <modeChangeCode+0xf6>
    155e:	81 e0       	ldi	r24, 0x01	; 1
				tripNumber = 1;
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <tripNumber+0x1>
    1566:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <tripNumber>
				enterModeError(tripNumber);
    156a:	e3 de       	rcall	.-570    	; 0x1332 <enterModeError>
    156c:	a6 c1       	rjmp	.+844    	; 0x18ba <modeChangeCode+0x442>
    156e:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <adcWeight>
			} else {				
				saveCode(CODE_ZERO_ADC,adcWeight / 16);
    1572:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <adcWeight+0x1>
    1576:	77 23       	and	r23, r23
    1578:	14 f4       	brge	.+4      	; 0x157e <modeChangeCode+0x106>
    157a:	61 5f       	subi	r22, 0xF1	; 241
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	75 95       	asr	r23
    1580:	67 95       	ror	r22
    1582:	75 95       	asr	r23
    1584:	67 95       	ror	r22
    1586:	75 95       	asr	r23
    1588:	67 95       	ror	r22
    158a:	75 95       	asr	r23
    158c:	67 95       	ror	r22
    158e:	89 e0       	ldi	r24, 0x09	; 9
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				calcWeightCoeff();
    1596:	4d db       	rcall	.-2406   	; 0xc32 <calcWeightCoeff>
				enterModeRun();
    1598:	0a dd       	rcall	.-1516   	; 0xfae <enterModeRun>
    159a:	8f c1       	rjmp	.+798    	; 0x18ba <modeChangeCode+0x442>
			}			
		} else {
			saveCode(codeNumber,tmpCodeData);
    159c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <tmpCodeData>
    15a0:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <tmpCodeData+0x1>
    15a4:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
			enterModeRun();
    15a8:	02 dd       	rcall	.-1532   	; 0xfae <enterModeRun>
    15aa:	87 c1       	rjmp	.+782    	; 0x18ba <modeChangeCode+0x442>
		}
		return 0;
	}
	
	if(cmd == BTN_CANCEL){
    15ac:	8f 3b       	cpi	r24, 0xBF	; 191
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <modeChangeCode+0x13c>
		enterModeRun();
    15b0:	fe dc       	rcall	.-1540   	; 0xfae <enterModeRun>
    15b2:	83 c1       	rjmp	.+774    	; 0x18ba <modeChangeCode+0x442>
		return 0;
    15b4:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <codeNumber>
	}

	if(codeNumber == CODE_ADC )	{
    15b8:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <codeNumber+0x1>
    15bc:	27 30       	cpi	r18, 0x07	; 7
    15be:	31 05       	cpc	r19, r1
    15c0:	31 f4       	brne	.+12     	; 0x15ce <modeChangeCode+0x156>
		displayNumber(adcWeightIn);
    15c2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adcWeightIn>
    15c6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <adcWeightIn+0x1>
    15ca:	8d da       	rcall	.-2790   	; 0xae6 <displayNumber>
    15cc:	76 c1       	rjmp	.+748    	; 0x18ba <modeChangeCode+0x442>
		return 0;
    15ce:	8f 3e       	cpi	r24, 0xEF	; 239
	}

	if(cmd == BTN_UP){
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <modeChangeCode+0x15c>
    15d2:	fa c0       	rjmp	.+500    	; 0x17c8 <modeChangeCode+0x350>
    15d4:	22 30       	cpi	r18, 0x02	; 2
		switch(codeNumber){
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <modeChangeCode+0x164>
    15da:	58 c0       	rjmp	.+176    	; 0x168c <modeChangeCode+0x214>
    15dc:	44 f4       	brge	.+16     	; 0x15ee <modeChangeCode+0x176>
    15de:	21 15       	cp	r18, r1
    15e0:	31 05       	cpc	r19, r1
    15e2:	71 f0       	breq	.+28     	; 0x1600 <modeChangeCode+0x188>
    15e4:	21 30       	cpi	r18, 0x01	; 1
    15e6:	31 05       	cpc	r19, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <modeChangeCode+0x174>
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <modeChangeCode+0x1f2>
    15ec:	ed c0       	rjmp	.+474    	; 0x17c8 <modeChangeCode+0x350>
    15ee:	23 30       	cpi	r18, 0x03	; 3
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <modeChangeCode+0x17e>
    15f4:	82 c0       	rjmp	.+260    	; 0x16fa <modeChangeCode+0x282>
    15f6:	27 30       	cpi	r18, 0x07	; 7
    15f8:	31 05       	cpc	r19, r1
    15fa:	0c f4       	brge	.+2      	; 0x15fe <modeChangeCode+0x186>
    15fc:	ad c0       	rjmp	.+346    	; 0x1758 <modeChangeCode+0x2e0>
    15fe:	e4 c0       	rjmp	.+456    	; 0x17c8 <modeChangeCode+0x350>
    1600:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_POINT:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    1604:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	91 05       	cpc	r25, r1
    160c:	0c f0       	brlt	.+2      	; 0x1610 <modeChangeCode+0x198>
    160e:	45 c1       	rjmp	.+650    	; 0x189a <modeChangeCode+0x422>
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1616:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    161a:	00 97       	sbiw	r24, 0x00	; 0
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    161c:	21 f4       	brne	.+8      	; 0x1626 <modeChangeCode+0x1ae>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <modeChangeCode+0x1d6>
    1626:	81 30       	cpi	r24, 0x01	; 1
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    1628:	91 05       	cpc	r25, r1
    162a:	21 f4       	brne	.+8      	; 0x1634 <modeChangeCode+0x1bc>
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1632:	0d c0       	rjmp	.+26     	; 0x164e <modeChangeCode+0x1d6>
    1634:	02 97       	sbiw	r24, 0x02	; 2
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    1636:	21 f4       	brne	.+8      	; 0x1640 <modeChangeCode+0x1c8>
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    163e:	07 c0       	rjmp	.+14     	; 0x164e <modeChangeCode+0x1d6>
    1640:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
			else {
				tmpCodeData = 0;
    1644:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    1648:	81 e0       	ldi	r24, 0x01	; 1
				blinkCmdFlag = 1;
    164a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    164e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}
			codePoint = tmpCodeData;
    1652:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1656:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
    165a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
			displayWeight1(loadWeight);
    165e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
    1662:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    1666:	d3 d8       	rcall	.-3674   	; 0x80e <displayWeight1>
    1668:	28 c1       	rjmp	.+592    	; 0x18ba <modeChangeCode+0x442>
			//displayNumber(loadWeight);
			break;
    166a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_FILT:
			tmpCodeData = ( tmpCodeData > 8 ) ? 0 : tmpCodeData + 1;
    166e:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1672:	89 30       	cpi	r24, 0x09	; 9
    1674:	91 05       	cpc	r25, r1
    1676:	14 f4       	brge	.+4      	; 0x167c <modeChangeCode+0x204>
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <modeChangeCode+0x208>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1684:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			//displayWeight(tmpCodeData);
			displayNumber1(tmpCodeData);
    1688:	7a d9       	rcall	.-3340   	; 0x97e <displayNumber1>
    168a:	17 c1       	rjmp	.+558    	; 0x18ba <modeChangeCode+0x442>
			break;
    168c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_DIVISION:
			switch(tmpCodeData){
    1690:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	89 f0       	breq	.+34     	; 0x16bc <modeChangeCode+0x244>
    169a:	1c f4       	brge	.+6      	; 0x16a2 <modeChangeCode+0x22a>
    169c:	89 2b       	or	r24, r25
    169e:	39 f0       	breq	.+14     	; 0x16ae <modeChangeCode+0x236>
    16a0:	20 c0       	rjmp	.+64     	; 0x16e2 <modeChangeCode+0x26a>
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	91 05       	cpc	r25, r1
    16a6:	89 f0       	breq	.+34     	; 0x16ca <modeChangeCode+0x252>
    16a8:	05 97       	sbiw	r24, 0x05	; 5
    16aa:	b1 f0       	breq	.+44     	; 0x16d8 <modeChangeCode+0x260>
    16ac:	1a c0       	rjmp	.+52     	; 0x16e2 <modeChangeCode+0x26a>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
				case 0: tmpCodeData = 1; break;
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16b6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    16ba:	19 c0       	rjmp	.+50     	; 0x16ee <modeChangeCode+0x276>
    16bc:	82 e0       	ldi	r24, 0x02	; 2
				case 1: tmpCodeData = 2; break;
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16c4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <modeChangeCode+0x276>
    16ca:	85 e0       	ldi	r24, 0x05	; 5
				case 2: tmpCodeData = 5; break;
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16d2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <modeChangeCode+0x276>
    16d8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
				case 5: tmpCodeData = 0; break;
    16dc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <modeChangeCode+0x276>
				default: tmpCodeData = 1; break;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    16ea:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			}
			displayNumber1(tmpCodeData);
    16ee:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
    16f2:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    16f6:	43 d9       	rcall	.-3450   	; 0x97e <displayNumber1>
    16f8:	e0 c0       	rjmp	.+448    	; 0x18ba <modeChangeCode+0x442>
			break;
    16fa:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case CODE_AUTO:
			if(tmpCodeData){
    16fe:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1702:	89 2b       	or	r24, r25
    1704:	91 f0       	breq	.+36     	; 0x172a <modeChangeCode+0x2b2>
    1706:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
				tmpCodeData = 0;
    170a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    170e:	e9 ea       	ldi	r30, 0xA9	; 169
				fndData[3] = 0x00;
    1710:	f1 e0       	ldi	r31, 0x01	; 1
    1712:	13 82       	std	Z+3, r1	; 0x03
    1714:	ae e0       	ldi	r26, 0x0E	; 14
				fndData[2] = fndTableChar['N' - 'A'];
    1716:	b1 e0       	ldi	r27, 0x01	; 1
    1718:	1d 96       	adiw	r26, 0x0d	; 13
    171a:	8c 91       	ld	r24, X
    171c:	1d 97       	sbiw	r26, 0x0d	; 13
    171e:	82 83       	std	Z+2, r24	; 0x02
    1720:	1e 96       	adiw	r26, 0x0e	; 14
				fndData[1] = fndTableChar['O' - 'A'];
    1722:	8c 91       	ld	r24, X
    1724:	81 83       	std	Z+1, r24	; 0x01
    1726:	10 82       	st	Z, r1
				fndData[0] = 0x00;
    1728:	c8 c0       	rjmp	.+400    	; 0x18ba <modeChangeCode+0x442>
    172a:	81 e0       	ldi	r24, 0x01	; 1
			} else {
				tmpCodeData = 1;
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    1732:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    1736:	e9 ea       	ldi	r30, 0xA9	; 169
				fndData[3] = 0x00;
    1738:	f1 e0       	ldi	r31, 0x01	; 1
    173a:	13 82       	std	Z+3, r1	; 0x03
    173c:	ae e0       	ldi	r26, 0x0E	; 14
				fndData[2] = fndTableChar['Y' - 'A'];
    173e:	b1 e0       	ldi	r27, 0x01	; 1
    1740:	58 96       	adiw	r26, 0x18	; 24
    1742:	8c 91       	ld	r24, X
    1744:	58 97       	sbiw	r26, 0x18	; 24
    1746:	82 83       	std	Z+2, r24	; 0x02
    1748:	14 96       	adiw	r26, 0x04	; 4
				fndData[1] = fndTableChar['E' - 'A'];
    174a:	8c 91       	ld	r24, X
    174c:	14 97       	sbiw	r26, 0x04	; 4
    174e:	81 83       	std	Z+1, r24	; 0x01
    1750:	52 96       	adiw	r26, 0x12	; 18
				fndData[0] = fndTableChar['S' - 'A'];
    1752:	8c 91       	ld	r24, X
    1754:	80 83       	st	Z, r24
    1756:	b1 c0       	rjmp	.+354    	; 0x18ba <modeChangeCode+0x442>
    1758:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
			}
			break;
		case CODE_ALARM:
		case CODE_OVER:
		case CODE_SETT:
			tmpFndData[editDigitPoint] = ( tmpFndData[editDigitPoint] > 8 ) ? 0 : tmpFndData[editDigitPoint] +1;
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	e6 54       	subi	r30, 0x46	; 70
    1762:	fe 4f       	sbci	r31, 0xFE	; 254
    1764:	20 81       	ld	r18, Z
    1766:	29 30       	cpi	r18, 0x09	; 9
    1768:	10 f4       	brcc	.+4      	; 0x176e <modeChangeCode+0x2f6>
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <modeChangeCode+0x2f8>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	ea eb       	ldi	r30, 0xBA	; 186
    1772:	f1 e0       	ldi	r31, 0x01	; 1
    1774:	dc 01       	movw	r26, r24
    1776:	a6 54       	subi	r26, 0x46	; 70
    1778:	be 4f       	sbci	r27, 0xFE	; 254
    177a:	2c 93       	st	X, r18
    177c:	43 81       	ldd	r20, Z+3	; 0x03
			tmpCodeData = tmpFndData[3] * 1000 +tmpFndData[2]*100 + tmpFndData[1] * 10 + tmpFndData[0];
    177e:	28 ee       	ldi	r18, 0xE8	; 232
    1780:	33 e0       	ldi	r19, 0x03	; 3
    1782:	42 9f       	mul	r20, r18
    1784:	c0 01       	movw	r24, r0
    1786:	43 9f       	mul	r20, r19
    1788:	90 0d       	add	r25, r0
    178a:	11 24       	eor	r1, r1
    178c:	22 81       	ldd	r18, Z+2	; 0x02
    178e:	34 e6       	ldi	r19, 0x64	; 100
    1790:	23 9f       	mul	r18, r19
    1792:	80 0d       	add	r24, r0
    1794:	91 1d       	adc	r25, r1
    1796:	11 24       	eor	r1, r1
    1798:	21 81       	ldd	r18, Z+1	; 0x01
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	44 0f       	add	r20, r20
    17a0:	55 1f       	adc	r21, r21
    17a2:	22 0f       	add	r18, r18
    17a4:	33 1f       	adc	r19, r19
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	24 0f       	add	r18, r20
    17b0:	35 1f       	adc	r19, r21
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	20 81       	ld	r18, Z
    17b8:	82 0f       	add	r24, r18
    17ba:	91 1d       	adc	r25, r1
    17bc:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    17c0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
			displayWeight1(tmpCodeData);
    17c4:	24 d8       	rcall	.-4024   	; 0x80e <displayWeight1>
    17c6:	79 c0       	rjmp	.+242    	; 0x18ba <modeChangeCode+0x442>
			//displayNumber(tmpCodeData);
			break;
    17c8:	8f 3d       	cpi	r24, 0xDF	; 223
		}
	}

	if(cmd == BTN_LEFT){
    17ca:	09 f0       	breq	.+2      	; 0x17ce <modeChangeCode+0x356>
    17cc:	76 c0       	rjmp	.+236    	; 0x18ba <modeChangeCode+0x442>
    17ce:	21 15       	cp	r18, r1
		switch(codeNumber){
    17d0:	31 05       	cpc	r19, r1
    17d2:	41 f0       	breq	.+16     	; 0x17e4 <modeChangeCode+0x36c>
    17d4:	0c f4       	brge	.+2      	; 0x17d8 <modeChangeCode+0x360>
    17d6:	71 c0       	rjmp	.+226    	; 0x18ba <modeChangeCode+0x442>
    17d8:	24 50       	subi	r18, 0x04	; 4
    17da:	31 09       	sbc	r19, r1
    17dc:	23 30       	cpi	r18, 0x03	; 3
    17de:	31 05       	cpc	r19, r1
    17e0:	b8 f1       	brcs	.+110    	; 0x1850 <modeChangeCode+0x3d8>
    17e2:	6b c0       	rjmp	.+214    	; 0x18ba <modeChangeCode+0x442>
    17e4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    17e8:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    17ec:	18 16       	cp	r1, r24
    17ee:	19 06       	cpc	r1, r25
    17f0:	0c f0       	brlt	.+2      	; 0x17f4 <modeChangeCode+0x37c>
    17f2:	58 c0       	rjmp	.+176    	; 0x18a4 <modeChangeCode+0x42c>
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    17fa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    17fe:	00 97       	sbiw	r24, 0x00	; 0
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    1800:	21 f4       	brne	.+8      	; 0x180a <modeChangeCode+0x392>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1808:	14 c0       	rjmp	.+40     	; 0x1832 <modeChangeCode+0x3ba>
    180a:	81 30       	cpi	r24, 0x01	; 1
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    180c:	91 05       	cpc	r25, r1
    180e:	21 f4       	brne	.+8      	; 0x1818 <modeChangeCode+0x3a0>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <modeChangeCode+0x3ba>
    1818:	02 97       	sbiw	r24, 0x02	; 2
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    181a:	21 f4       	brne	.+8      	; 0x1824 <modeChangeCode+0x3ac>
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <modeChangeCode+0x3ba>
    1824:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
			else {
				tmpCodeData = 0;
    1828:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    182c:	81 e0       	ldi	r24, 0x01	; 1
				blinkCmdFlag = 1;
    182e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1832:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}
			codePoint = tmpCodeData;
    1836:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    183a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codePoint+0x1>
    183e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codePoint>
    1842:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <loadWeight>
			displayWeight1(loadWeight);
    1846:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <loadWeight+0x1>
    184a:	0e 94 07 04 	call	0x80e	; 0x80e <displayWeight1>
    184e:	35 c0       	rjmp	.+106    	; 0x18ba <modeChangeCode+0x442>
			//displayNumber(loadWeight);
			break;
    1850:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <editDigitPoint>
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    1854:	88 23       	and	r24, r24
    1856:	69 f1       	breq	.+90     	; 0x18b2 <modeChangeCode+0x43a>
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
    185e:	81 30       	cpi	r24, 0x01	; 1
			switch(editDigitPoint){
    1860:	51 f0       	breq	.+20     	; 0x1876 <modeChangeCode+0x3fe>
    1862:	28 f0       	brcs	.+10     	; 0x186e <modeChangeCode+0x3f6>
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	59 f0       	breq	.+22     	; 0x187e <modeChangeCode+0x406>
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	81 f4       	brne	.+32     	; 0x188c <modeChangeCode+0x414>
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <modeChangeCode+0x40e>
    186e:	81 e0       	ldi	r24, 0x01	; 1
				case 0 : blinkCmdFlag = 0x01; break;
    1870:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1874:	0b c0       	rjmp	.+22     	; 0x188c <modeChangeCode+0x414>
    1876:	82 e0       	ldi	r24, 0x02	; 2
				case 1 : blinkCmdFlag = 0x02; break;
    1878:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    187c:	07 c0       	rjmp	.+14     	; 0x188c <modeChangeCode+0x414>
    187e:	84 e0       	ldi	r24, 0x04	; 4
				case 2 : blinkCmdFlag = 0x04; break;
    1880:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    1884:	03 c0       	rjmp	.+6      	; 0x188c <modeChangeCode+0x414>
    1886:	88 e0       	ldi	r24, 0x08	; 8
				case 3 : blinkCmdFlag = 0x08; break;
    1888:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
    188c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
			}	
			displayWeight1(tmpCodeData);
    1890:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1894:	0e 94 07 04 	call	0x80e	; 0x80e <displayWeight1>
    1898:	10 c0       	rjmp	.+32     	; 0x18ba <modeChangeCode+0x442>
			// displayNumber(tmpCodeData);
			break;
    189a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
	}

	if(cmd == BTN_UP){
		switch(codeNumber){
		case CODE_POINT:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    189e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
    18a2:	bd ce       	rjmp	.-646    	; 0x161e <modeChangeCode+0x1a6>
    18a4:	82 e0       	ldi	r24, 0x02	; 2
	}

	if(cmd == BTN_LEFT){
		switch(codeNumber){
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tmpCodeData+0x1>
    18ac:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tmpCodeData>
    18b0:	b5 cf       	rjmp	.-150    	; 0x181c <modeChangeCode+0x3a4>
    18b2:	83 e0       	ldi	r24, 0x03	; 3
			//displayNumber(loadWeight);
			break;
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    18b4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
    18b8:	e6 cf       	rjmp	.-52     	; 0x1886 <modeChangeCode+0x40e>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
			// displayNumber(tmpCodeData);
			break;
		}
	}
	return 0;
}
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	08 95       	ret

000018c0 <modeError>:
    18c0:	cf 93       	push	r28
	fndData[0] = fndTableNum[errNo];
	blinkCmdFlag = 0x0f;			//
}

int modeError(uint8_t cmd)
{
    18c2:	df 93       	push	r29
    18c4:	c8 2f       	mov	r28, r24
	int i;
	uint8_t tmp;
	
	if( elaspMsecTime(cntModeErr) > 3000 ) {
    18c6:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <cntModeErr>
    18ca:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <cntModeErr+0x1>
    18ce:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <cntModeErr+0x2>
    18d2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <cntModeErr+0x3>
    18d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <elaspMsecTime>
    18da:	69 3b       	cpi	r22, 0xB9	; 185
    18dc:	7b 40       	sbci	r23, 0x0B	; 11
    18de:	81 05       	cpc	r24, r1
    18e0:	91 05       	cpc	r25, r1
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <modeError+0x26>
    18e4:	4b c0       	rjmp	.+150    	; 0x197c <modeError+0xbc>
		machineState = mStateBk;		
    18e6:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    18ea:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
		switch(mStateBk){
    18ee:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	31 f0       	breq	.+12     	; 0x1902 <modeError+0x42>
    18f6:	18 f0       	brcs	.+6      	; 0x18fe <modeError+0x3e>
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	e1 f0       	breq	.+56     	; 0x1934 <modeError+0x74>
    18fc:	45 c0       	rjmp	.+138    	; 0x1988 <modeError+0xc8>
		case MODE_RUN:
			enterModeRun();
    18fe:	57 db       	rcall	.-2386   	; 0xfae <enterModeRun>
			break;
    1900:	43 c0       	rjmp	.+134    	; 0x1988 <modeError+0xc8>
		case MODE_PASSWD:
			machineState = MODE_PASSWD;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
    1908:	ad e9       	ldi	r26, 0x9D	; 157
    190a:	b1 e0       	ldi	r27, 0x01	; 1
    190c:	c9 ea       	ldi	r28, 0xA9	; 169
    190e:	d1 e0       	ldi	r29, 0x01	; 1
    1910:	21 ea       	ldi	r18, 0xA1	; 161
    1912:	31 e0       	ldi	r19, 0x01	; 1
			for( i = 0 ; i < 4 ; i++){
				tmp = passWord[i];
    1914:	ed 91       	ld	r30, X+
				fndData[i] = fndTableNum[tmp];
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	ec 5f       	subi	r30, 0xFC	; 252
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	80 81       	ld	r24, Z
    191e:	89 93       	st	Y+, r24
		case MODE_RUN:
			enterModeRun();
			break;
		case MODE_PASSWD:
			machineState = MODE_PASSWD;
			for( i = 0 ; i < 4 ; i++){
    1920:	a2 17       	cp	r26, r18
    1922:	b3 07       	cpc	r27, r19
    1924:	b9 f7       	brne	.-18     	; 0x1914 <modeError+0x54>
				tmp = passWord[i];
				fndData[i] = fndTableNum[tmp];
			}
			blinkCmdFlag = 0x08;
    1926:	88 e0       	ldi	r24, 0x08	; 8
    1928:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
			editDigitPoint = 3;		// 1000
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <editDigitPoint>
			break;
    1932:	2a c0       	rjmp	.+84     	; 0x1988 <modeError+0xc8>
		case MODE_CHANGE_CODE	:
			
			if(codeNumber == CODE_AUTO){
    1934:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <codeNumber>
    1938:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <codeNumber+0x1>
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	a9 f4       	brne	.+42     	; 0x196c <modeError+0xac>
				tmpCodeData = 0;
    1942:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <tmpCodeData+0x1>
    1946:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <tmpCodeData>
				blinkCmdFlag = 0x0f;	//
    194a:	8f e0       	ldi	r24, 0x0F	; 15
    194c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <blinkCmdFlag>
				fndData[3] = 0x00;
    1950:	e9 ea       	ldi	r30, 0xA9	; 169
    1952:	f1 e0       	ldi	r31, 0x01	; 1
    1954:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['N' - 'A'];
    1956:	ae e0       	ldi	r26, 0x0E	; 14
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	1d 96       	adiw	r26, 0x0d	; 13
    195c:	8c 91       	ld	r24, X
    195e:	1d 97       	sbiw	r26, 0x0d	; 13
    1960:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['O' - 'A'];
    1962:	1e 96       	adiw	r26, 0x0e	; 14
    1964:	8c 91       	ld	r24, X
    1966:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = 0x00;
    1968:	10 82       	st	Z, r1
    196a:	0e c0       	rjmp	.+28     	; 0x1988 <modeError+0xc8>
			} else if ( codeNumber == CODE_SETT ) {
    196c:	06 97       	sbiw	r24, 0x06	; 6
    196e:	61 f4       	brne	.+24     	; 0x1988 <modeError+0xc8>
				setEditTmpFndData(tmpCodeData);
    1970:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tmpCodeData>
    1974:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tmpCodeData+0x1>
    1978:	5f db       	rcall	.-2370   	; 0x1038 <setEditTmpFndData>
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <modeError+0xc8>
			}
		}
	} else if(cmd == BTN_ENTER ){
    197c:	cf 37       	cpi	r28, 0x7F	; 127
    197e:	21 f4       	brne	.+8      	; 0x1988 <modeError+0xc8>
		machineState = mStateBk;
    1980:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <mStateBk>
    1984:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <machineState>
	}
	return 0;
}
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <initUart>:
	for( i = 0 ; i < 9 ; i++){
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;	
}
    1992:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1996:	87 e6       	ldi	r24, 0x67	; 103
    1998:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    199c:	ed e9       	ldi	r30, 0x9D	; 157
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	86 60       	ori	r24, 0x06	; 6
    19a4:	80 83       	st	Z, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	87 7f       	andi	r24, 0xF7	; 247
    19aa:	80 83       	st	Z, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7c       	andi	r24, 0xCF	; 207
    19b0:	80 83       	st	Z, r24
    19b2:	88 e9       	ldi	r24, 0x98	; 152
    19b4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    19b8:	08 95       	ret

000019ba <transmitByte>:
    19ba:	eb e9       	ldi	r30, 0x9B	; 155
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	90 81       	ld	r25, Z
    19c0:	95 ff       	sbrs	r25, 5
    19c2:	fd cf       	rjmp	.-6      	; 0x19be <transmitByte+0x4>
    19c4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    19c8:	08 95       	ret

000019ca <__vector_30>:
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	0b b6       	in	r0, 0x3b	; 59
    19d6:	0f 92       	push	r0
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	af 93       	push	r26
    19e2:	bf 93       	push	r27
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
    19e8:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    19ec:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flagStx.1887>
    19f0:	81 11       	cpse	r24, r1
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <__vector_30+0x3e>
    19f4:	92 30       	cpi	r25, 0x02	; 2
    19f6:	81 f5       	brne	.+96     	; 0x1a58 <__vector_30+0x8e>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <gUartIndex.1886>
    19fe:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <gUartRxBuffer>
    1a02:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <flagStx.1887>
    1a06:	28 c0       	rjmp	.+80     	; 0x1a58 <__vector_30+0x8e>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	31 f5       	brne	.+76     	; 0x1a58 <__vector_30+0x8e>
    1a0c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <gUartIndex.1886>
    1a10:	8e 0f       	add	r24, r30
    1a12:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <gUartIndex.1886>
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	e4 59       	subi	r30, 0x94	; 148
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	90 83       	st	Z, r25
    1a1e:	93 30       	cpi	r25, 0x03	; 3
    1a20:	d9 f4       	brne	.+54     	; 0x1a58 <__vector_30+0x8e>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <gflagConnect+0x1>
    1a2a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <gflagConnect>
    1a2e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <flagStx.1887>
    1a32:	ec e6       	ldi	r30, 0x6C	; 108
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	a6 e7       	ldi	r26, 0x76	; 118
    1a38:	b1 e0       	ldi	r27, 0x01	; 1
    1a3a:	22 e7       	ldi	r18, 0x72	; 114
    1a3c:	31 e0       	ldi	r19, 0x01	; 1
    1a3e:	81 91       	ld	r24, Z+
    1a40:	8d 93       	st	X+, r24
    1a42:	e2 17       	cp	r30, r18
    1a44:	f3 07       	cpc	r31, r19
    1a46:	d9 f7       	brne	.-10     	; 0x1a3e <__vector_30+0x74>
    1a48:	86 e0       	ldi	r24, 0x06	; 6
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <i.1884+0x1>
    1a50:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <i.1884>
    1a54:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <gUartIndex.1886>
    1a58:	ff 91       	pop	r31
    1a5a:	ef 91       	pop	r30
    1a5c:	bf 91       	pop	r27
    1a5e:	af 91       	pop	r26
    1a60:	9f 91       	pop	r25
    1a62:	8f 91       	pop	r24
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <sendToLargeFnd>:

void sendToLargeFnd( )
{
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29

	int i;
	char retVal[10]={0};

	RS485_TX_EN;
    1a7e:	df 9a       	sbi	0x1b, 7	; 27

	gUartTxBuffer[0] = 0xAA;
    1a80:	e6 e7       	ldi	r30, 0x76	; 118
    1a82:	f1 e0       	ldi	r31, 0x01	; 1
    1a84:	8a ea       	ldi	r24, 0xAA	; 170
    1a86:	80 83       	st	Z, r24
	gUartTxBuffer[1] = 0x09;	
    1a88:	89 e0       	ldi	r24, 0x09	; 9
    1a8a:	81 83       	std	Z+1, r24	; 0x01

	// toAscii(loadWeight,codePoint, retVal);
	if( loadWeight < 0){
    1a8c:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <loadWeight>
    1a90:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <loadWeight+0x1>
    1a94:	33 23       	and	r19, r19
    1a96:	3c f4       	brge	.+14     	; 0x1aa6 <sendToLargeFnd+0x30>
		gUartTxBuffer[2] = retVal[0];
    1a98:	12 82       	std	Z+2, r1	; 0x02
		gUartTxBuffer[3] = retVal[1];
    1a9a:	13 82       	std	Z+3, r1	; 0x03
		gUartTxBuffer[4] = retVal[2];
    1a9c:	14 82       	std	Z+4, r1	; 0x04
		gUartTxBuffer[5] = retVal[3];
    1a9e:	15 82       	std	Z+5, r1	; 0x05
		gUartTxBuffer[7] = 0xbb;
    1aa0:	8b eb       	ldi	r24, 0xBB	; 187
    1aa2:	87 83       	std	Z+7, r24	; 0x07
    1aa4:	1a c0       	rjmp	.+52     	; 0x1ada <sendToLargeFnd+0x64>
	} else {
		gUartTxBuffer[2] = loadWeight/1000;
    1aa6:	e6 e7       	ldi	r30, 0x76	; 118
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	c9 01       	movw	r24, r18
    1aac:	68 ee       	ldi	r22, 0xE8	; 232
    1aae:	73 e0       	ldi	r23, 0x03	; 3
    1ab0:	50 d0       	rcall	.+160    	; 0x1b52 <__divmodhi4>
    1ab2:	62 83       	std	Z+2, r22	; 0x02
		gUartTxBuffer[3] = (loadWeight%1000)/100;
    1ab4:	c4 e6       	ldi	r28, 0x64	; 100
    1ab6:	d0 e0       	ldi	r29, 0x00	; 0
    1ab8:	be 01       	movw	r22, r28
    1aba:	4b d0       	rcall	.+150    	; 0x1b52 <__divmodhi4>
    1abc:	63 83       	std	Z+3, r22	; 0x03
		gUartTxBuffer[4] = (loadWeight%100)/10;
    1abe:	c9 01       	movw	r24, r18
    1ac0:	be 01       	movw	r22, r28
    1ac2:	47 d0       	rcall	.+142    	; 0x1b52 <__divmodhi4>
    1ac4:	ca e0       	ldi	r28, 0x0A	; 10
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	be 01       	movw	r22, r28
    1aca:	43 d0       	rcall	.+134    	; 0x1b52 <__divmodhi4>
    1acc:	64 83       	std	Z+4, r22	; 0x04
		gUartTxBuffer[5] = loadWeight%10;
    1ace:	c9 01       	movw	r24, r18
    1ad0:	be 01       	movw	r22, r28
    1ad2:	3f d0       	rcall	.+126    	; 0x1b52 <__divmodhi4>
    1ad4:	85 83       	std	Z+5, r24	; 0x05
    1ad6:	8b eb       	ldi	r24, 0xBB	; 187
		gUartTxBuffer[7] = 0xbb;
    1ad8:	87 83       	std	Z+7, r24	; 0x07
    1ada:	8f e5       	ldi	r24, 0x5F	; 95
    1adc:	9d e6       	ldi	r25, 0x6D	; 109
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <sendToLargeFnd+0x68>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <sendToLargeFnd+0x6e>
    1ae4:	00 00       	nop
    1ae6:	c6 e7       	ldi	r28, 0x76	; 118
    1ae8:	d1 e0       	ldi	r29, 0x01	; 1
    1aea:	0e e7       	ldi	r16, 0x7E	; 126
    1aec:	11 e0       	ldi	r17, 0x01	; 1
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
		transmitByte( gUartTxBuffer[i]);
    1aee:	89 91       	ld	r24, Y+
    1af0:	64 df       	rcall	.-312    	; 0x19ba <transmitByte>
    1af2:	c0 17       	cp	r28, r16
		gUartTxBuffer[4] = (loadWeight%100)/10;
		gUartTxBuffer[5] = loadWeight%10;
		gUartTxBuffer[7] = 0xbb;
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
    1af4:	d1 07       	cpc	r29, r17
    1af6:	d9 f7       	brne	.-10     	; 0x1aee <sendToLargeFnd+0x78>
    1af8:	8f e3       	ldi	r24, 0x3F	; 63
    1afa:	9c e9       	ldi	r25, 0x9C	; 156
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <sendToLargeFnd+0x86>
    1b00:	00 c0       	rjmp	.+0      	; 0x1b02 <sendToLargeFnd+0x8c>
    1b02:	00 00       	nop
    1b04:	df 98       	cbi	0x1b, 7	; 27
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;
    1b06:	df 91       	pop	r29
}
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <sciCommandProc>:
    1b10:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <startCount.1917>
void sciCommandProc()
{
	static uint32_t startCount=0;

	
	if( elaspMsecTime(startCount) > 500 ){
    1b14:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <startCount.1917+0x1>
    1b18:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <startCount.1917+0x2>
    1b1c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <startCount.1917+0x3>
    1b20:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <elaspMsecTime>
    1b24:	65 3f       	cpi	r22, 0xF5	; 245
    1b26:	71 40       	sbci	r23, 0x01	; 1
    1b28:	81 05       	cpc	r24, r1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	88 f0       	brcs	.+34     	; 0x1b50 <sciCommandProc+0x40>
		startCount = timerCounter2;
    1b2e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerCounter2>
    1b32:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerCounter2+0x1>
    1b36:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timerCounter2+0x2>
    1b3a:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timerCounter2+0x3>
    1b3e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <startCount.1917>
    1b42:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <startCount.1917+0x1>
    1b46:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <startCount.1917+0x2>
    1b4a:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <startCount.1917+0x3>
		sendToLargeFnd( );
    1b4e:	93 cf       	rjmp	.-218    	; 0x1a76 <sendToLargeFnd>
    1b50:	08 95       	ret

00001b52 <__divmodhi4>:
    1b52:	97 fb       	bst	r25, 7
    1b54:	07 2e       	mov	r0, r23
    1b56:	16 f4       	brtc	.+4      	; 0x1b5c <__divmodhi4+0xa>
    1b58:	00 94       	com	r0
    1b5a:	06 d0       	rcall	.+12     	; 0x1b68 <__divmodhi4_neg1>
    1b5c:	77 fd       	sbrc	r23, 7
    1b5e:	08 d0       	rcall	.+16     	; 0x1b70 <__divmodhi4_neg2>
    1b60:	36 d0       	rcall	.+108    	; 0x1bce <__udivmodhi4>
    1b62:	07 fc       	sbrc	r0, 7
    1b64:	05 d0       	rcall	.+10     	; 0x1b70 <__divmodhi4_neg2>
    1b66:	3e f4       	brtc	.+14     	; 0x1b76 <__divmodhi4_exit>

00001b68 <__divmodhi4_neg1>:
    1b68:	90 95       	com	r25
    1b6a:	81 95       	neg	r24
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	08 95       	ret

00001b70 <__divmodhi4_neg2>:
    1b70:	70 95       	com	r23
    1b72:	61 95       	neg	r22
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255

00001b76 <__divmodhi4_exit>:
    1b76:	08 95       	ret

00001b78 <__divmodsi4>:
    1b78:	05 2e       	mov	r0, r21
    1b7a:	97 fb       	bst	r25, 7
    1b7c:	16 f4       	brtc	.+4      	; 0x1b82 <__divmodsi4+0xa>
    1b7e:	00 94       	com	r0
    1b80:	0f d0       	rcall	.+30     	; 0x1ba0 <__negsi2>
    1b82:	57 fd       	sbrc	r21, 7
    1b84:	05 d0       	rcall	.+10     	; 0x1b90 <__divmodsi4_neg2>
    1b86:	37 d0       	rcall	.+110    	; 0x1bf6 <__udivmodsi4>
    1b88:	07 fc       	sbrc	r0, 7
    1b8a:	02 d0       	rcall	.+4      	; 0x1b90 <__divmodsi4_neg2>
    1b8c:	46 f4       	brtc	.+16     	; 0x1b9e <__divmodsi4_exit>
    1b8e:	08 c0       	rjmp	.+16     	; 0x1ba0 <__negsi2>

00001b90 <__divmodsi4_neg2>:
    1b90:	50 95       	com	r21
    1b92:	40 95       	com	r20
    1b94:	30 95       	com	r19
    1b96:	21 95       	neg	r18
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255

00001b9e <__divmodsi4_exit>:
    1b9e:	08 95       	ret

00001ba0 <__negsi2>:
    1ba0:	90 95       	com	r25
    1ba2:	80 95       	com	r24
    1ba4:	70 95       	com	r23
    1ba6:	61 95       	neg	r22
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	08 95       	ret

00001bb0 <__tablejump2__>:
    1bb0:	ee 0f       	add	r30, r30
    1bb2:	ff 1f       	adc	r31, r31
    1bb4:	00 24       	eor	r0, r0
    1bb6:	00 1c       	adc	r0, r0
    1bb8:	0b be       	out	0x3b, r0	; 59
    1bba:	07 90       	elpm	r0, Z+
    1bbc:	f6 91       	elpm	r31, Z
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	09 94       	ijmp

00001bc2 <__mulshisi3>:
    1bc2:	b7 ff       	sbrs	r27, 7
    1bc4:	3a c0       	rjmp	.+116    	; 0x1c3a <__muluhisi3>

00001bc6 <__mulohisi3>:
    1bc6:	39 d0       	rcall	.+114    	; 0x1c3a <__muluhisi3>
    1bc8:	82 1b       	sub	r24, r18
    1bca:	93 0b       	sbc	r25, r19
    1bcc:	08 95       	ret

00001bce <__udivmodhi4>:
    1bce:	aa 1b       	sub	r26, r26
    1bd0:	bb 1b       	sub	r27, r27
    1bd2:	51 e1       	ldi	r21, 0x11	; 17
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <__udivmodhi4_ep>

00001bd6 <__udivmodhi4_loop>:
    1bd6:	aa 1f       	adc	r26, r26
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	a6 17       	cp	r26, r22
    1bdc:	b7 07       	cpc	r27, r23
    1bde:	10 f0       	brcs	.+4      	; 0x1be4 <__udivmodhi4_ep>
    1be0:	a6 1b       	sub	r26, r22
    1be2:	b7 0b       	sbc	r27, r23

00001be4 <__udivmodhi4_ep>:
    1be4:	88 1f       	adc	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	5a 95       	dec	r21
    1bea:	a9 f7       	brne	.-22     	; 0x1bd6 <__udivmodhi4_loop>
    1bec:	80 95       	com	r24
    1bee:	90 95       	com	r25
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	08 95       	ret

00001bf6 <__udivmodsi4>:
    1bf6:	a1 e2       	ldi	r26, 0x21	; 33
    1bf8:	1a 2e       	mov	r1, r26
    1bfa:	aa 1b       	sub	r26, r26
    1bfc:	bb 1b       	sub	r27, r27
    1bfe:	fd 01       	movw	r30, r26
    1c00:	0d c0       	rjmp	.+26     	; 0x1c1c <__udivmodsi4_ep>

00001c02 <__udivmodsi4_loop>:
    1c02:	aa 1f       	adc	r26, r26
    1c04:	bb 1f       	adc	r27, r27
    1c06:	ee 1f       	adc	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	a2 17       	cp	r26, r18
    1c0c:	b3 07       	cpc	r27, r19
    1c0e:	e4 07       	cpc	r30, r20
    1c10:	f5 07       	cpc	r31, r21
    1c12:	20 f0       	brcs	.+8      	; 0x1c1c <__udivmodsi4_ep>
    1c14:	a2 1b       	sub	r26, r18
    1c16:	b3 0b       	sbc	r27, r19
    1c18:	e4 0b       	sbc	r30, r20
    1c1a:	f5 0b       	sbc	r31, r21

00001c1c <__udivmodsi4_ep>:
    1c1c:	66 1f       	adc	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	88 1f       	adc	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	1a 94       	dec	r1
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <__udivmodsi4_loop>
    1c28:	60 95       	com	r22
    1c2a:	70 95       	com	r23
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	bd 01       	movw	r22, r26
    1c36:	cf 01       	movw	r24, r30
    1c38:	08 95       	ret

00001c3a <__muluhisi3>:
    1c3a:	09 d0       	rcall	.+18     	; 0x1c4e <__umulhisi3>
    1c3c:	a5 9f       	mul	r26, r21
    1c3e:	90 0d       	add	r25, r0
    1c40:	b4 9f       	mul	r27, r20
    1c42:	90 0d       	add	r25, r0
    1c44:	a4 9f       	mul	r26, r20
    1c46:	80 0d       	add	r24, r0
    1c48:	91 1d       	adc	r25, r1
    1c4a:	11 24       	eor	r1, r1
    1c4c:	08 95       	ret

00001c4e <__umulhisi3>:
    1c4e:	a2 9f       	mul	r26, r18
    1c50:	b0 01       	movw	r22, r0
    1c52:	b3 9f       	mul	r27, r19
    1c54:	c0 01       	movw	r24, r0
    1c56:	a3 9f       	mul	r26, r19
    1c58:	70 0d       	add	r23, r0
    1c5a:	81 1d       	adc	r24, r1
    1c5c:	11 24       	eor	r1, r1
    1c5e:	91 1d       	adc	r25, r1
    1c60:	b2 9f       	mul	r27, r18
    1c62:	70 0d       	add	r23, r0
    1c64:	81 1d       	adc	r24, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	91 1d       	adc	r25, r1
    1c6a:	08 95       	ret

00001c6c <_exit>:
    1c6c:	f8 94       	cli

00001c6e <__stop_program>:
    1c6e:	ff cf       	rjmp	.-2      	; 0x1c6e <__stop_program>
