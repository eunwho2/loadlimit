
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000011b0  00001244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800128  00800128  0000126c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6a  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7c  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001316  00000000  00000000  00003d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00005018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  0000532c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fdd  00000000  00000000  00005b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c1       	rjmp	.+780    	; 0x336 <__vector_10>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c2       	rjmp	.+1024   	; 0x456 <__vector_21>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc 04       	cpc	r15, r12
      8e:	0c 05       	cpc	r16, r12
      90:	21 05       	cpc	r18, r1
      92:	36 05       	cpc	r19, r6
      94:	62 05       	cpc	r22, r2
      96:	71 05       	cpc	r23, r1
      98:	80 05       	cpc	r24, r0
      9a:	8f 05       	cpc	r24, r15
      9c:	72 06       	cpc	r7, r18
      9e:	86 06       	cpc	r8, r22
      a0:	9a 06       	cpc	r9, r26
      a2:	ab 06       	cpc	r10, r27
      a4:	bd 06       	cpc	r11, r29
      a6:	cc 06       	cpc	r12, r28
      a8:	e0 06       	cpc	r14, r16
      aa:	f1 06       	cpc	r15, r17

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e1       	ldi	r29, 0x10	; 16
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 eb       	ldi	r30, 0xB0	; 176
      c0:	f1 e1       	ldi	r31, 0x11	; 17
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a8 32       	cpi	r26, 0x28	; 40
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a8 e2       	ldi	r26, 0x28	; 40
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a8 3a       	cpi	r26, 0xA8	; 168
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	06 d4       	rcall	.+2060   	; 0x8f0 <main>
      e4:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <at93c46_ewen>:
#include "extern.h"

#define DELAY_SPI	10
void at93c46_ewen(void)
{
	cbi(PORTB,CS);
      ea:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	8f b9       	out	0x0f, r24	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f0:	8f e3       	ldi	r24, 0x3F	; 63
      f2:	9c e9       	ldi	r25, 0x9C	; 156
      f4:	01 97       	sbiw	r24, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <at93c46_ewen+0xa>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <at93c46_ewen+0x10>
      fa:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
      fc:	80 e6       	ldi	r24, 0x60	; 96
      fe:	8f b9       	out	0x0f, r24	; 15
     100:	8f e3       	ldi	r24, 0x3F	; 63
     102:	9c e9       	ldi	r25, 0x9C	; 156
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <at93c46_ewen+0x1a>
     108:	00 c0       	rjmp	.+0      	; 0x10a <at93c46_ewen+0x20>
     10a:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     10c:	c0 9a       	sbi	0x18, 0	; 24
     10e:	08 95       	ret

00000110 <at93c46_ewds>:
}

void at93c46_ewds(void)
{
	cbi(PORTB,CS);
     110:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	8f b9       	out	0x0f, r24	; 15
     116:	8f e3       	ldi	r24, 0x3F	; 63
     118:	9c e9       	ldi	r25, 0x9C	; 156
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <at93c46_ewds+0xa>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <at93c46_ewds+0x10>
     120:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     122:	80 e6       	ldi	r24, 0x60	; 96
     124:	8f b9       	out	0x0f, r24	; 15
     126:	8f e3       	ldi	r24, 0x3F	; 63
     128:	9c e9       	ldi	r25, 0x9C	; 156
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <at93c46_ewds+0x1a>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <at93c46_ewds+0x20>
     130:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     132:	c0 9a       	sbi	0x18, 0	; 24
     134:	08 95       	ret

00000136 <at93c46_read>:
}
uint8_t at93c46_read(uint8_t addr)
{
	uint8_t high, low;
	
	cbi(PORTB, CS);
     136:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x03;
     138:	93 e0       	ldi	r25, 0x03	; 3
     13a:	9f b9       	out	0x0f, r25	; 15
     13c:	ef e3       	ldi	r30, 0x3F	; 63
     13e:	fc e9       	ldi	r31, 0x9C	; 156
     140:	31 97       	sbiw	r30, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <at93c46_read+0xa>
     144:	00 c0       	rjmp	.+0      	; 0x146 <at93c46_read+0x10>
     146:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr;
     148:	8f b9       	out	0x0f, r24	; 15
     14a:	8f e3       	ldi	r24, 0x3F	; 63
     14c:	9c e9       	ldi	r25, 0x9C	; 156
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <at93c46_read+0x18>
     152:	00 c0       	rjmp	.+0      	; 0x154 <at93c46_read+0x1e>
     154:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x00;
     156:	1f b8       	out	0x0f, r1	; 15
     158:	ef e3       	ldi	r30, 0x3F	; 63
     15a:	fc e9       	ldi	r31, 0x9C	; 156
     15c:	31 97       	sbiw	r30, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <at93c46_read+0x26>
     160:	00 c0       	rjmp	.+0      	; 0x162 <at93c46_read+0x2c>
     162:	00 00       	nop
	_delay_ms(DELAY_SPI);
	high = SPDR;
     164:	2f b1       	in	r18, 0x0f	; 15
	SPDR = 0x00;
     166:	1f b8       	out	0x0f, r1	; 15
     168:	8f e3       	ldi	r24, 0x3F	; 63
     16a:	9c e9       	ldi	r25, 0x9C	; 156
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <at93c46_read+0x36>
     170:	00 c0       	rjmp	.+0      	; 0x172 <at93c46_read+0x3c>
     172:	00 00       	nop
	_delay_ms(DELAY_SPI);
	low = SPDR;
     174:	9f b1       	in	r25, 0x0f	; 15
	sbi(PORTB, CS);
     176:	c0 9a       	sbi	0x18, 0	; 24
	return (high << 1) + (low >> 7);
     178:	22 0f       	add	r18, r18
     17a:	89 2f       	mov	r24, r25
     17c:	88 1f       	adc	r24, r24
     17e:	88 27       	eor	r24, r24
     180:	88 1f       	adc	r24, r24
}
     182:	82 0f       	add	r24, r18
     184:	08 95       	ret

00000186 <at93c46_write>:

void at93c46_write(uint8_t addr, uint8_t dat)
{
	cbi(PORTB, CS);
     186:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	9f b9       	out	0x0f, r25	; 15
     18c:	ef e3       	ldi	r30, 0x3F	; 63
     18e:	fc e9       	ldi	r31, 0x9C	; 156
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <at93c46_write+0xa>
     194:	00 c0       	rjmp	.+0      	; 0x196 <at93c46_write+0x10>
     196:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr | 0x80;
     198:	80 68       	ori	r24, 0x80	; 128
     19a:	8f b9       	out	0x0f, r24	; 15
     19c:	8f e3       	ldi	r24, 0x3F	; 63
     19e:	9c e9       	ldi	r25, 0x9C	; 156
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <at93c46_write+0x1a>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <at93c46_write+0x20>
     1a6:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = dat;
     1a8:	6f b9       	out	0x0f, r22	; 15
     1aa:	ef e3       	ldi	r30, 0x3F	; 63
     1ac:	fc e9       	ldi	r31, 0x9C	; 156
     1ae:	31 97       	sbiw	r30, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <at93c46_write+0x28>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <at93c46_write+0x2e>
     1b4:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB, CS);
     1b6:	c0 9a       	sbi	0x18, 0	; 24
     1b8:	8f ed       	ldi	r24, 0xDF	; 223
     1ba:	9e e2       	ldi	r25, 0x2E	; 46
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <at93c46_write+0x36>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <at93c46_write+0x3c>
     1c2:	00 00       	nop
     1c4:	08 95       	ret

000001c6 <saveCode>:
	_delay_ms(3);
}

int16_t saveCode(int codeNo,int16_t codeData)
{
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	18 2f       	mov	r17, r24
     1d0:	eb 01       	movw	r28, r22
	uint8_t tmpData1,tmpData2;

	tmpData1 = (uint8_t)(codeData >> 8 );
	tmpData2 = (uint8_t)(codeData % 256);
	
	at93c46_ewen();	
     1d2:	8b df       	rcall	.-234    	; 0xea <at93c46_ewen>
	at93c46_write(codeNo * 2, tmpData1);
     1d4:	11 0f       	add	r17, r17
     1d6:	6d 2f       	mov	r22, r29
     1d8:	81 2f       	mov	r24, r17
     1da:	d5 df       	rcall	.-86     	; 0x186 <at93c46_write>
	at93c46_write(codeNo * 2+1, tmpData2);
     1dc:	01 e0       	ldi	r16, 0x01	; 1
     1de:	01 0f       	add	r16, r17
     1e0:	be 01       	movw	r22, r28
     1e2:	70 78       	andi	r23, 0x80	; 128
     1e4:	77 23       	and	r23, r23
     1e6:	2c f4       	brge	.+10     	; 0x1f2 <saveCode+0x2c>
     1e8:	61 50       	subi	r22, 0x01	; 1
     1ea:	71 09       	sbc	r23, r1
     1ec:	7f 6f       	ori	r23, 0xFF	; 255
     1ee:	6f 5f       	subi	r22, 0xFF	; 255
     1f0:	7f 4f       	sbci	r23, 0xFF	; 255
     1f2:	80 2f       	mov	r24, r16
	at93c46_ewds();
     1f4:	c8 df       	rcall	.-112    	; 0x186 <at93c46_write>
     1f6:	8c df       	rcall	.-232    	; 0x110 <at93c46_ewds>
		
	tmpSPI1 = at93c46_read(codeNo * 2    );
     1f8:	81 2f       	mov	r24, r17
     1fa:	9d df       	rcall	.-198    	; 0x136 <at93c46_read>
     1fc:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     1fe:	80 2f       	mov	r24, r16
     200:	9a df       	rcall	.-204    	; 0x136 <at93c46_read>
     202:	2c 2f       	mov	r18, r28
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	32 2f       	mov	r19, r18
     208:	22 27       	eor	r18, r18
     20a:	a9 01       	movw	r20, r18
}
     20c:	48 0f       	add	r20, r24
     20e:	51 1d       	adc	r21, r1
     210:	ca 01       	movw	r24, r20
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	08 95       	ret

0000021c <readCode>:
     21c:	cf 93       	push	r28

int16_t readCode(int codeNo)
{
     21e:	df 93       	push	r29
	uint8_t tmpSPI1,tmpSPI2;

	tmpSPI1 = at93c46_read(codeNo * 2    );
     220:	d8 2f       	mov	r29, r24
     222:	dd 0f       	add	r29, r29
     224:	8d 2f       	mov	r24, r29
     226:	87 df       	rcall	.-242    	; 0x136 <at93c46_read>
     228:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	8d 0f       	add	r24, r29
     22e:	83 df       	rcall	.-250    	; 0x136 <at93c46_read>
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     230:	2c 2f       	mov	r18, r28
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	32 2f       	mov	r19, r18
     236:	22 27       	eor	r18, r18
}
     238:	a9 01       	movw	r20, r18
     23a:	48 0f       	add	r20, r24
     23c:	51 1d       	adc	r21, r1
     23e:	ca 01       	movw	r24, r20
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <readRomData>:

int readRomData(void)
{	

	codePoint = readCode(0);
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	e8 df       	rcall	.-48     	; 0x21c <readCode>
     24c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <codePoint+0x1>
     250:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <codePoint>
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     254:	03 97       	sbiw	r24, 0x03	; 3
     256:	08 f0       	brcs	.+2      	; 0x25a <readRomData+0x14>
     258:	53 c0       	rjmp	.+166    	; 0x300 <readRomData+0xba>
	
	codeFilt		= readCode(1);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	de df       	rcall	.-68     	; 0x21c <readCode>
     260:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <codeFilt+0x1>
     264:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <codeFilt>
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     268:	0a 97       	sbiw	r24, 0x0a	; 10
     26a:	08 f0       	brcs	.+2      	; 0x26e <readRomData+0x28>
     26c:	4c c0       	rjmp	.+152    	; 0x306 <readRomData+0xc0>

	codeDivision	= readCode(2);
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	d4 df       	rcall	.-88     	; 0x21c <readCode>
     274:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <codeDivision+0x1>
     278:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <codeDivision>
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     27c:	06 97       	sbiw	r24, 0x06	; 6
     27e:	08 f0       	brcs	.+2      	; 0x282 <readRomData+0x3c>

	codeAutoZero	= readCode(3);
     280:	45 c0       	rjmp	.+138    	; 0x30c <readRomData+0xc6>
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ca df       	rcall	.-108    	; 0x21c <readCode>
     288:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <codeAutoZero+0x1>
     28c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <codeAutoZero>
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     290:	02 97       	sbiw	r24, 0x02	; 2
     292:	08 f0       	brcs	.+2      	; 0x296 <readRomData+0x50>

	codeAlarm		= readCode(4);
     294:	3e c0       	rjmp	.+124    	; 0x312 <readRomData+0xcc>
     296:	84 e0       	ldi	r24, 0x04	; 4
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	c0 df       	rcall	.-128    	; 0x21c <readCode>
     29c:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <codeAlarm+0x1>
     2a0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <codeAlarm>
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     2a4:	80 31       	cpi	r24, 0x10	; 16
     2a6:	97 42       	sbci	r25, 0x27	; 39

	codeOver		= readCode(5);
     2a8:	b8 f5       	brcc	.+110    	; 0x318 <readRomData+0xd2>
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	b6 df       	rcall	.-148    	; 0x21c <readCode>
     2b0:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <codeOver+0x1>
     2b4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <codeOver>
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     2b8:	80 31       	cpi	r24, 0x10	; 16
     2ba:	97 42       	sbci	r25, 0x27	; 39

	codeWeight		= readCode(6);
     2bc:	80 f5       	brcc	.+96     	; 0x31e <readRomData+0xd8>
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ac df       	rcall	.-168    	; 0x21c <readCode>
     2c4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <codeWeight+0x1>
     2c8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <codeWeight>
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     2cc:	80 31       	cpi	r24, 0x10	; 16
     2ce:	97 42       	sbci	r25, 0x27	; 39

	codeAdcSpan	= readCode(8);
     2d0:	48 f5       	brcc	.+82     	; 0x324 <readRomData+0xde>
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	a2 df       	rcall	.-188    	; 0x21c <readCode>
     2d8:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <codeAdcSpan+0x1>
     2dc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <codeAdcSpan>
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     2e0:	80 31       	cpi	r24, 0x10	; 16
     2e2:	97 42       	sbci	r25, 0x27	; 39

	codeAdcZero	= readCode(9);
     2e4:	10 f5       	brcc	.+68     	; 0x32a <readRomData+0xe4>
     2e6:	89 e0       	ldi	r24, 0x09	; 9
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	98 df       	rcall	.-208    	; 0x21c <readCode>
     2ec:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <codeAdcZero+0x1>
     2f0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <codeAdcZero>
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     2f4:	80 31       	cpi	r24, 0x10	; 16
     2f6:	97 42       	sbci	r25, 0x27	; 39
     2f8:	d8 f4       	brcc	.+54     	; 0x330 <readRomData+0xea>
	
	return -1;
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	9f ef       	ldi	r25, 0xFF	; 255
     2fe:	08 95       	ret

int readRomData(void)
{	

	codePoint = readCode(0);
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     300:	86 e4       	ldi	r24, 0x46	; 70
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	08 95       	ret
	
	codeFilt		= readCode(1);
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     306:	87 e4       	ldi	r24, 0x47	; 71
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	08 95       	ret

	codeDivision	= readCode(2);
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     30c:	88 e4       	ldi	r24, 0x48	; 72
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	08 95       	ret

	codeAutoZero	= readCode(3);
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     312:	89 e4       	ldi	r24, 0x49	; 73
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	08 95       	ret

	codeAlarm		= readCode(4);
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     318:	8a e4       	ldi	r24, 0x4A	; 74
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	08 95       	ret

	codeOver		= readCode(5);
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     31e:	8b e4       	ldi	r24, 0x4B	; 75
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

	codeWeight		= readCode(6);
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     324:	8c e4       	ldi	r24, 0x4C	; 76
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

	codeAdcSpan	= readCode(8);
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     32a:	8e e4       	ldi	r24, 0x4E	; 78
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	08 95       	ret

	codeAdcZero	= readCode(9);
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     330:	8f e4       	ldi	r24, 0x4F	; 79
     332:	90 e0       	ldi	r25, 0x00	; 0
	
	return -1;
}
     334:	08 95       	ret

00000336 <__vector_10>:
}

uint8_t getCommand(void)
{
	return getButton();
}
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	0b b6       	in	r0, 0x3b	; 59
     342:	0f 92       	push	r0
     344:	2f 93       	push	r18
     346:	8f 93       	push	r24
     348:	9f 93       	push	r25
     34a:	af 93       	push	r26
     34c:	bf 93       	push	r27
     34e:	ef 93       	push	r30
     350:	ff 93       	push	r31
     352:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timerCounter2>
     356:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timerCounter2+0x1>
     35a:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <timerCounter2+0x2>
     35e:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <timerCounter2+0x3>
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	a1 1d       	adc	r26, r1
     366:	b1 1d       	adc	r27, r1
     368:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timerCounter2>
     36c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timerCounter2+0x1>
     370:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timerCounter2+0x2>
     374:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timerCounter2+0x3>
     378:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <blinkCount.1859>
     37c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <blinkCount.1859+0x1>
     380:	81 39       	cpi	r24, 0x91	; 145
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	92 07       	cpc	r25, r18
     386:	08 f0       	brcs	.+2      	; 0x38a <__vector_10+0x54>
     388:	4e c0       	rjmp	.+156    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <blinkCount.1859+0x1>
     390:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <blinkCount.1859>
     394:	89 2b       	or	r24, r25
     396:	39 f4       	brne	.+14     	; 0x3a6 <__vector_10+0x70>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <blinkFlagState.1860>
     39e:	91 11       	cpse	r25, r1
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <blinkFlagState.1860>
     3a6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <fndDigitCount.1858>
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	10 f4       	brcc	.+4      	; 0x3b2 <__vector_10+0x7c>
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__vector_10+0x7e>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <fndDigitCount.1858>
     3b8:	e8 2f       	mov	r30, r24
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	e1 58       	subi	r30, 0x81	; 129
     3be:	fe 4f       	sbci	r31, 0xFE	; 254
     3c0:	90 81       	ld	r25, Z
     3c2:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <blinkFlagState.1860>
     3c6:	22 23       	and	r18, r18
     3c8:	01 f1       	breq	.+64     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3ca:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <blinkCmdFlag>
     3ce:	27 30       	cpi	r18, 0x07	; 7
     3d0:	a9 f0       	breq	.+42     	; 0x3fc <__vector_10+0xc6>
     3d2:	81 11       	cpse	r24, r1
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <__vector_10+0xa6>
     3d6:	21 30       	cpi	r18, 0x01	; 1
     3d8:	c1 f4       	brne	.+48     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3da:	12 c0       	rjmp	.+36     	; 0x400 <__LOCK_REGION_LENGTH__>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <__vector_10+0xb0>
     3e0:	22 30       	cpi	r18, 0x02	; 2
     3e2:	99 f4       	brne	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e4:	0f c0       	rjmp	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	19 f4       	brne	.+6      	; 0x3f0 <__vector_10+0xba>
     3ea:	24 30       	cpi	r18, 0x04	; 4
     3ec:	71 f4       	brne	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	83 30       	cpi	r24, 0x03	; 3
     3f2:	59 f4       	brne	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f4:	28 30       	cpi	r18, 0x08	; 8
     3f6:	49 f4       	brne	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	8b b3       	in	r24, 0x1b	; 27
     40c:	80 7f       	andi	r24, 0xF0	; 240
     40e:	8b bb       	out	0x1b, r24	; 27
     410:	2b b3       	in	r18, 0x1b	; 27
     412:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <fndDigitCount.1858>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e0 50       	subi	r30, 0x00	; 0
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	80 81       	ld	r24, Z
     41e:	82 2b       	or	r24, r18
     420:	8b bb       	out	0x1b, r24	; 27
     422:	95 bb       	out	0x15, r25	; 21
     424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     426:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <blinkCount.1859+0x1>
     42a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <blinkCount.1859>
     42e:	b4 cf       	rjmp	.-152    	; 0x398 <__vector_10+0x62>
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	2f 91       	pop	r18
     43e:	0f 90       	pop	r0
     440:	0b be       	out	0x3b, r0	; 59
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <initADC>:
     44c:	8e e5       	ldi	r24, 0x5E	; 94
     44e:	87 b9       	out	0x07, r24	; 7
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	86 b9       	out	0x06, r24	; 6
     454:	08 95       	ret

00000456 <__vector_21>:
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	0b b6       	in	r0, 0x3b	; 59
     462:	0f 92       	push	r0
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
     474:	85 b1       	in	r24, 0x05	; 5
     476:	24 b1       	in	r18, 0x04	; 4
     478:	83 70       	andi	r24, 0x03	; 3
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	98 2f       	mov	r25, r24
     47e:	88 27       	eor	r24, r24
     480:	82 0f       	add	r24, r18
     482:	91 1d       	adc	r25, r1
     484:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <adcWeightIn+0x1>
     488:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <adcWeightIn>
     48c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <adcRingCount.1869>
     490:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <adcRingCount.1869+0x1>
     494:	fc 01       	movw	r30, r24
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	e2 5c       	subi	r30, 0xC2	; 194
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <adcWeight>
     4a2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <adcWeight+0x1>
     4a6:	40 81       	ld	r20, Z
     4a8:	51 81       	ldd	r21, Z+1	; 0x01
     4aa:	24 1b       	sub	r18, r20
     4ac:	35 0b       	sbc	r19, r21
     4ae:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <adcWeightIn>
     4b2:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <adcWeightIn+0x1>
     4b6:	51 83       	std	Z+1, r21	; 0x01
     4b8:	40 83       	st	Z, r20
     4ba:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <adcWeightIn>
     4be:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <adcWeightIn+0x1>
     4c2:	24 0f       	add	r18, r20
     4c4:	35 1f       	adc	r19, r21
     4c6:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <adcWeight+0x1>
     4ca:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <adcWeight>
     4ce:	8f 30       	cpi	r24, 0x0F	; 15
     4d0:	91 05       	cpc	r25, r1
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <__vector_21+0x82>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__vector_21+0x86>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <adcRingCount.1869+0x1>
     4e0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <adcRingCount.1869>
     4e4:	ff 91       	pop	r31
     4e6:	ef 91       	pop	r30
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <getButton>:
     502:	86 b3       	in	r24, 0x16	; 22
     504:	8f 60       	ori	r24, 0x0F	; 15
     506:	8f 3f       	cpi	r24, 0xFF	; 255
     508:	c1 f0       	breq	.+48     	; 0x53a <getButton+0x38>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	39 ef       	ldi	r19, 0xF9	; 249
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	21 50       	subi	r18, 0x01	; 1
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <getButton+0xe>
     518:	00 c0       	rjmp	.+0      	; 0x51a <getButton+0x18>
     51a:	00 00       	nop
     51c:	86 b3       	in	r24, 0x16	; 22
     51e:	8f 60       	ori	r24, 0x0F	; 15
     520:	8f 3f       	cpi	r24, 0xFF	; 255
     522:	59 f0       	breq	.+22     	; 0x53a <getButton+0x38>
     524:	86 b3       	in	r24, 0x16	; 22
     526:	8f 60       	ori	r24, 0x0F	; 15
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	23 ec       	ldi	r18, 0xC3	; 195
     52c:	39 e0       	ldi	r19, 0x09	; 9
     52e:	91 50       	subi	r25, 0x01	; 1
     530:	20 40       	sbci	r18, 0x00	; 0
     532:	30 40       	sbci	r19, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <getButton+0x2c>
     536:	00 c0       	rjmp	.+0      	; 0x538 <getButton+0x36>
     538:	00 00       	nop
     53a:	08 95       	ret

0000053c <displayWeight>:

uint8_t tmpDigit[4];

void displayWeight(int16_t weightIn)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	9c 01       	movw	r18, r24
	int i;
	// display loadWeight
	tmpDigit[3] = weightIn/1000;
     542:	e3 e9       	ldi	r30, 0x93	; 147
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	68 ee       	ldi	r22, 0xE8	; 232
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	a3 d5       	rcall	.+2886   	; 0x1092 <__divmodhi4>
     54c:	63 83       	std	Z+3, r22	; 0x03
	tmpDigit[2] = (weightIn%1000)/100;
     54e:	c4 e6       	ldi	r28, 0x64	; 100
     550:	d0 e0       	ldi	r29, 0x00	; 0
     552:	be 01       	movw	r22, r28
     554:	9e d5       	rcall	.+2876   	; 0x1092 <__divmodhi4>
     556:	62 83       	std	Z+2, r22	; 0x02
	tmpDigit[1] = (weightIn%100)/10;
     558:	c9 01       	movw	r24, r18
     55a:	be 01       	movw	r22, r28
     55c:	9a d5       	rcall	.+2868   	; 0x1092 <__divmodhi4>
     55e:	ca e0       	ldi	r28, 0x0A	; 10
     560:	d0 e0       	ldi	r29, 0x00	; 0
     562:	be 01       	movw	r22, r28
     564:	96 d5       	rcall	.+2860   	; 0x1092 <__divmodhi4>
     566:	61 83       	std	Z+1, r22	; 0x01
	tmpDigit[0] = weightIn%10;
     568:	c9 01       	movw	r24, r18
     56a:	be 01       	movw	r22, r28
     56c:	92 d5       	rcall	.+2852   	; 0x1092 <__divmodhi4>
     56e:	80 83       	st	Z, r24
     570:	df 01       	movw	r26, r30
     572:	27 e9       	ldi	r18, 0x97	; 151
     574:	31 e0       	ldi	r19, 0x01	; 1
     576:	ec 91       	ld	r30, X
	
	//--- 0000. ---> ___0.

	for(i=0;i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	ec 5f       	subi	r30, 0xFC	; 252
     57c:	fe 4f       	sbci	r31, 0xFE	; 254
     57e:	80 81       	ld	r24, Z
     580:	8d 93       	st	X+, r24
     582:	a2 17       	cp	r26, r18
     584:	b3 07       	cpc	r27, r19
     586:	b9 f7       	brne	.-18     	; 0x576 <displayWeight+0x3a>
     588:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <codePoint>
	
	if(codePoint < 0 ){
     58c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <codePoint+0x1>
     590:	99 23       	and	r25, r25
     592:	8c f4       	brge	.+34     	; 0x5b6 <displayWeight+0x7a>
     594:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tmpDigit+0x3>
		if(tmpDigit[3] == fndTableNum[0] ) {
     598:	8f 33       	cpi	r24, 0x3F	; 63
     59a:	f1 f5       	brne	.+124    	; 0x618 <displayWeight+0xdc>
     59c:	e3 e9       	ldi	r30, 0x93	; 147
			tmpDigit[3] = 0x00;
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	13 82       	std	Z+3, r1	; 0x03
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
			if(tmpDigit[2] == fndTableNum[0] ) {
     5a4:	8f 33       	cpi	r24, 0x3F	; 63
     5a6:	c1 f5       	brne	.+112    	; 0x618 <displayWeight+0xdc>
     5a8:	12 82       	std	Z+2, r1	; 0x02
				tmpDigit[2] = 0x00;
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
				if(tmpDigit[1] == fndTableNum[0] ) {
     5ac:	8f 33       	cpi	r24, 0x3F	; 63
     5ae:	a1 f5       	brne	.+104    	; 0x618 <displayWeight+0xdc>
     5b0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tmpDigit+0x1>
					tmpDigit[1] = 0x00;
     5b4:	31 c0       	rjmp	.+98     	; 0x618 <displayWeight+0xdc>
     5b6:	00 97       	sbiw	r24, 0x00	; 0
				}
			}
		}
	}
	else if(codePoint == 0 ){
     5b8:	89 f4       	brne	.+34     	; 0x5dc <displayWeight+0xa0>
     5ba:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tmpDigit+0x3>
		//tmpDigit[0] |= 0x80;
		if(tmpDigit[3] == fndTableNum[0] ) {
     5be:	8f 33       	cpi	r24, 0x3F	; 63
     5c0:	59 f5       	brne	.+86     	; 0x618 <displayWeight+0xdc>
     5c2:	e3 e9       	ldi	r30, 0x93	; 147
			tmpDigit[3] = 0x00;
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	13 82       	std	Z+3, r1	; 0x03
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
			if(tmpDigit[2] == fndTableNum[0] ) {
     5ca:	8f 33       	cpi	r24, 0x3F	; 63
     5cc:	29 f5       	brne	.+74     	; 0x618 <displayWeight+0xdc>
     5ce:	12 82       	std	Z+2, r1	; 0x02
				tmpDigit[2] = 0x00;
     5d0:	81 81       	ldd	r24, Z+1	; 0x01
				if(tmpDigit[1] == fndTableNum[0] ) {
     5d2:	8f 33       	cpi	r24, 0x3F	; 63
     5d4:	09 f5       	brne	.+66     	; 0x618 <displayWeight+0xdc>
     5d6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tmpDigit+0x1>
					tmpDigit[1] = 0x00;
     5da:	1e c0       	rjmp	.+60     	; 0x618 <displayWeight+0xdc>
     5dc:	81 30       	cpi	r24, 0x01	; 1
				}
			}
		}
	}
	//--- 000.0  --> __0.0
	else if(codePoint == 1 ){
     5de:	91 05       	cpc	r25, r1
     5e0:	79 f4       	brne	.+30     	; 0x600 <displayWeight+0xc4>
     5e2:	e3 e9       	ldi	r30, 0x93	; 147
		tmpDigit[1] |= 0x80;
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	81 81       	ldd	r24, Z+1	; 0x01
     5e8:	80 68       	ori	r24, 0x80	; 128
     5ea:	81 83       	std	Z+1, r24	; 0x01
     5ec:	83 81       	ldd	r24, Z+3	; 0x03
		if(tmpDigit[3] == fndTableNum[0] ) {
     5ee:	8f 33       	cpi	r24, 0x3F	; 63
     5f0:	99 f4       	brne	.+38     	; 0x618 <displayWeight+0xdc>
     5f2:	13 82       	std	Z+3, r1	; 0x03
			tmpDigit[3] = 0x00;
     5f4:	82 81       	ldd	r24, Z+2	; 0x02
			if(tmpDigit[2] == fndTableNum[0] ) {
     5f6:	8f 33       	cpi	r24, 0x3F	; 63
     5f8:	79 f4       	brne	.+30     	; 0x618 <displayWeight+0xdc>
     5fa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <tmpDigit+0x2>
				tmpDigit[2] = 0x00;
     5fe:	0c c0       	rjmp	.+24     	; 0x618 <displayWeight+0xdc>
     600:	02 97       	sbiw	r24, 0x02	; 2
			}
		}
	}

	//--- 00.00  --> _0.00
	else if(codePoint == 2 ){
     602:	51 f4       	brne	.+20     	; 0x618 <displayWeight+0xdc>
     604:	e3 e9       	ldi	r30, 0x93	; 147
		tmpDigit[2] |= 0x80;
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	82 83       	std	Z+2, r24	; 0x02
     60e:	83 81       	ldd	r24, Z+3	; 0x03
		if(tmpDigit[3] == fndTableNum[0] ) {
     610:	8f 33       	cpi	r24, 0x3F	; 63
     612:	11 f4       	brne	.+4      	; 0x618 <displayWeight+0xdc>
     614:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <tmpDigit+0x3>
			tmpDigit[3] = 0x00;
     618:	ef e7       	ldi	r30, 0x7F	; 127
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	a3 e9       	ldi	r26, 0x93	; 147
     61e:	b1 e0       	ldi	r27, 0x01	; 1
     620:	8c 91       	ld	r24, X
     622:	80 83       	st	Z, r24
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	8c 91       	ld	r24, X
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	12 96       	adiw	r26, 0x02	; 2
     62e:	8c 91       	ld	r24, X
     630:	12 97       	sbiw	r26, 0x02	; 2
     632:	82 83       	std	Z+2, r24	; 0x02
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	8c 91       	ld	r24, X
     638:	83 83       	std	Z+3, r24	; 0x03
     63a:	df 91       	pop	r29
}
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <displayNumber>:
     640:	cf 93       	push	r28

void displayNumber(int16_t weightIn)
{
     642:	df 93       	push	r29
     644:	9c 01       	movw	r18, r24
	int i;

	tmpDigit[3] = weightIn/1000;
     646:	e3 e9       	ldi	r30, 0x93	; 147
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	68 ee       	ldi	r22, 0xE8	; 232
     64c:	73 e0       	ldi	r23, 0x03	; 3
     64e:	21 d5       	rcall	.+2626   	; 0x1092 <__divmodhi4>
     650:	63 83       	std	Z+3, r22	; 0x03
	tmpDigit[2] = (weightIn%1000)/100;
     652:	c4 e6       	ldi	r28, 0x64	; 100
     654:	d0 e0       	ldi	r29, 0x00	; 0
     656:	be 01       	movw	r22, r28
     658:	1c d5       	rcall	.+2616   	; 0x1092 <__divmodhi4>
     65a:	62 83       	std	Z+2, r22	; 0x02
	tmpDigit[1] = (weightIn%100)/10;
     65c:	c9 01       	movw	r24, r18
     65e:	be 01       	movw	r22, r28
     660:	18 d5       	rcall	.+2608   	; 0x1092 <__divmodhi4>
     662:	ca e0       	ldi	r28, 0x0A	; 10
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	be 01       	movw	r22, r28
     668:	14 d5       	rcall	.+2600   	; 0x1092 <__divmodhi4>
     66a:	61 83       	std	Z+1, r22	; 0x01
	tmpDigit[0] = weightIn%10;
     66c:	c9 01       	movw	r24, r18
     66e:	be 01       	movw	r22, r28
     670:	10 d5       	rcall	.+2592   	; 0x1092 <__divmodhi4>
     672:	80 83       	st	Z, r24
     674:	df 01       	movw	r26, r30
     676:	cf e7       	ldi	r28, 0x7F	; 127
     678:	d1 e0       	ldi	r29, 0x01	; 1
     67a:	27 e9       	ldi	r18, 0x97	; 151
     67c:	31 e0       	ldi	r19, 0x01	; 1
     67e:	ed 91       	ld	r30, X+
	
	for(i=0;i < 4 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ec 5f       	subi	r30, 0xFC	; 252
     684:	fe 4f       	sbci	r31, 0xFE	; 254
     686:	80 81       	ld	r24, Z
     688:	89 93       	st	Y+, r24
     68a:	a2 17       	cp	r26, r18
     68c:	b3 07       	cpc	r27, r19
     68e:	b9 f7       	brne	.-18     	; 0x67e <displayNumber+0x3e>
     690:	df 91       	pop	r29
}
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <initGpio>:
     696:	8f e0       	ldi	r24, 0x0F	; 15

void initGpio()
{
	DDRA		= 0x0f;   // FND Control Port
     698:	8a bb       	out	0x1a, r24	; 26
	DDRB		= 0x07;   // SSI and Button
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	87 bb       	out	0x17, r24	; 23
	DDRC		= 0xff;   // FND Data Port
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	84 bb       	out	0x14, r24	; 20
	DDRD		= 0x08;   // UART and reserved
     6a2:	88 e0       	ldi	r24, 0x08	; 8
     6a4:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xfe;
     6a6:	8e ef       	ldi	r24, 0xFE	; 254
     6a8:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7e;
     6aa:	8e e7       	ldi	r24, 0x7E	; 126
     6ac:	83 b9       	out	0x03, r24	; 3

	TIMSK =  0x40;
     6ae:	80 e4       	ldi	r24, 0x40	; 64
     6b0:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;
     6b2:	14 bc       	out	0x24, r1	; 36
	TCCR2 =  0x03;
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	85 bd       	out	0x25, r24	; 37

	sbi(PORTB,CS);
     6b8:	c0 9a       	sbi	0x18, 0	; 24
	SPCR = 0x5D;
     6ba:	8d e5       	ldi	r24, 0x5D	; 93
     6bc:	8d b9       	out	0x0d, r24	; 13
	SPSR= 0x00;
     6be:	1e b8       	out	0x0e, r1	; 14
	
	sbi(PORTE,LED_ALARM);
     6c0:	1e 9a       	sbi	0x03, 6	; 3
	sbi(PORTE,LED_OVER);
     6c2:	1f 9a       	sbi	0x03, 7	; 3
     6c4:	08 95       	ret

000006c6 <initCodeData>:
	
//	SFIOR = 0xff;
}

void initCodeData(){
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	calcFactor = codeWeight * 1024 / ( codeAdcSpan - codeAdcZero );
     6ca:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <codeWeight>
     6ce:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <codeWeight+0x1>
     6d2:	c0 91 6e 01 	lds	r28, 0x016E	; 0x80016e <codeAdcZero>
     6d6:	d0 91 6f 01 	lds	r29, 0x016F	; 0x80016f <codeAdcZero+0x1>
     6da:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <codeAdcSpan>
     6de:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <codeAdcSpan+0x1>
     6e2:	2c 1b       	sub	r18, r28
     6e4:	3d 0b       	sbc	r19, r29
     6e6:	9e 2f       	mov	r25, r30
     6e8:	99 0f       	add	r25, r25
     6ea:	99 0f       	add	r25, r25
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	b9 01       	movw	r22, r18
     6f0:	d0 d4       	rcall	.+2464   	; 0x1092 <__divmodhi4>
     6f2:	cb 01       	movw	r24, r22
     6f4:	77 0f       	add	r23, r23
     6f6:	aa 0b       	sbc	r26, r26
     6f8:	bb 0b       	sbc	r27, r27
     6fa:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <calcFactor>
     6fe:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <calcFactor+0x1>
     702:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <calcFactor+0x2>
     706:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <calcFactor+0x3>
	calcOffset = - codeWeight * codeAdcZero * 1024 / ( codeAdcSpan - codeAdcZero);
     70a:	f1 95       	neg	r31
     70c:	e1 95       	neg	r30
     70e:	f1 09       	sbc	r31, r1
     710:	ec 9f       	mul	r30, r28
     712:	c0 01       	movw	r24, r0
     714:	ed 9f       	mul	r30, r29
     716:	90 0d       	add	r25, r0
     718:	fc 9f       	mul	r31, r28
     71a:	90 0d       	add	r25, r0
     71c:	11 24       	eor	r1, r1
     71e:	98 2f       	mov	r25, r24
     720:	99 0f       	add	r25, r25
     722:	99 0f       	add	r25, r25
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	b9 01       	movw	r22, r18
     728:	b4 d4       	rcall	.+2408   	; 0x1092 <__divmodhi4>
     72a:	cb 01       	movw	r24, r22
     72c:	77 0f       	add	r23, r23
     72e:	aa 0b       	sbc	r26, r26
     730:	bb 0b       	sbc	r27, r27
     732:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <calcOffset>
     736:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <calcOffset+0x1>
     73a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <calcOffset+0x2>
     73e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <calcOffset+0x3>
	alarmOn = 0;
     742:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <alarmOn+0x1>
     746:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <alarmOn>
	overOn	= 0;
     74a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <overOn+0x1>
     74e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <overOn>
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <procRelayOut>:


void procRelayOut(void)
{
//--- alarm 
	if( alarmOn){
     758:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarmOn>
     75c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <alarmOn+0x1>
     760:	89 2b       	or	r24, r25
     762:	19 f0       	breq	.+6      	; 0x76a <procRelayOut+0x12>
		sbi(PORTA,RELAY_ALARM);
     764:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTB,LED_ALARM); 
     766:	c6 98       	cbi	0x18, 6	; 24
     768:	02 c0       	rjmp	.+4      	; 0x76e <procRelayOut+0x16>
	} else {
		cbi(PORTA,RELAY_ALARM);
     76a:	dd 98       	cbi	0x1b, 5	; 27
		sbi(PORTB,LED_ALARM);
     76c:	c6 9a       	sbi	0x18, 6	; 24
	}
	
//--- over relay led	
	if( overOn){
     76e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <overOn>
     772:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <overOn+0x1>
     776:	89 2b       	or	r24, r25
     778:	19 f0       	breq	.+6      	; 0x780 <procRelayOut+0x28>
		sbi(PORTA,RELAY_OVER);
     77a:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTB,LED_OVER);
     77c:	c7 98       	cbi	0x18, 7	; 24
     77e:	08 95       	ret
	} else {
		cbi(PORTA,RELAY_OVER);
     780:	de 98       	cbi	0x1b, 6	; 27
		sbi(PORTB,LED_OVER);
     782:	c7 9a       	sbi	0x18, 7	; 24
     784:	08 95       	ret

00000786 <systemErrProc>:
	}
}

void systemErrProc( uint8_t err_no)
{
     786:	08 95       	ret

00000788 <readLoad>:
	
}

int16_t readLoad(void)
{
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17

	tmp = calcFactor * adcWeight * 1024 /16  + calcOffset;

	weight1 = (int16_t)( tmp >> 10 );
	
	weightBuf[ringCountFilt] = weight1;
     794:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <ringCountFilt.1924>
     798:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <ringCountFilt.1924+0x1>
     79c:	f7 01       	movw	r30, r14
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e8 5d       	subi	r30, 0xD8	; 216
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <adcWeight>
     7aa:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <adcWeight+0x1>
     7ae:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <calcFactor>
     7b2:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <calcFactor+0x1>
     7b6:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <calcFactor+0x2>
     7ba:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <calcFactor+0x3>
     7be:	a1 d4       	rcall	.+2370   	; 0x1102 <__mulshisi3>
     7c0:	8b 01       	movw	r16, r22
     7c2:	9c 01       	movw	r18, r24
     7c4:	0f 2e       	mov	r0, r31
     7c6:	fa e0       	ldi	r31, 0x0A	; 10
     7c8:	00 0f       	add	r16, r16
     7ca:	11 1f       	adc	r17, r17
     7cc:	22 1f       	adc	r18, r18
     7ce:	33 1f       	adc	r19, r19
     7d0:	fa 95       	dec	r31
     7d2:	d1 f7       	brne	.-12     	; 0x7c8 <readLoad+0x40>
     7d4:	f0 2d       	mov	r31, r0
     7d6:	85 ff       	sbrs	r24, 5
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <readLoad+0x5a>
     7da:	01 5f       	subi	r16, 0xF1	; 241
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	2f 4f       	sbci	r18, 0xFF	; 255
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	d9 01       	movw	r26, r18
     7e4:	c8 01       	movw	r24, r16
     7e6:	68 94       	set
     7e8:	13 f8       	bld	r1, 3
     7ea:	b5 95       	asr	r27
     7ec:	a7 95       	ror	r26
     7ee:	97 95       	ror	r25
     7f0:	87 95       	ror	r24
     7f2:	16 94       	lsr	r1
     7f4:	d1 f7       	brne	.-12     	; 0x7ea <readLoad+0x62>
     7f6:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <calcOffset>
     7fa:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <calcOffset+0x1>
     7fe:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <calcOffset+0x2>
     802:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <calcOffset+0x3>
     806:	84 0f       	add	r24, r20
     808:	95 1f       	adc	r25, r21
     80a:	a6 1f       	adc	r26, r22
     80c:	b7 1f       	adc	r27, r23
     80e:	07 2e       	mov	r0, r23
     810:	7a e0       	ldi	r23, 0x0A	; 10
     812:	b5 95       	asr	r27
     814:	a7 95       	ror	r26
     816:	97 95       	ror	r25
     818:	87 95       	ror	r24
     81a:	7a 95       	dec	r23
     81c:	d1 f7       	brne	.-12     	; 0x812 <readLoad+0x8a>
     81e:	70 2d       	mov	r23, r0
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
     824:	89 e0       	ldi	r24, 0x09	; 9
     826:	e8 16       	cp	r14, r24
     828:	f1 04       	cpc	r15, r1
     82a:	1c f4       	brge	.+6      	; 0x832 <readLoad+0xaa>
     82c:	c7 01       	movw	r24, r14
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	02 c0       	rjmp	.+4      	; 0x836 <readLoad+0xae>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ringCountFilt.1924+0x1>
     83a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ringCountFilt.1924>
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     83e:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <codeFilt>
     842:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <codeFilt+0x1>
     846:	2f 5f       	subi	r18, 0xFF	; 255
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	12 16       	cp	r1, r18
     84c:	13 06       	cpc	r1, r19
     84e:	04 f5       	brge	.+64     	; 0x890 <readLoad+0x108>
     850:	c1 2c       	mov	r12, r1
     852:	d1 2c       	mov	r13, r1
     854:	76 01       	movw	r14, r12
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
		weightSum += weightBuf[j];
     85a:	fc 01       	movw	r30, r24
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	e8 5d       	subi	r30, 0xD8	; 216
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	40 81       	ld	r20, Z
     866:	51 81       	ldd	r21, Z+1	; 0x01
     868:	05 2e       	mov	r0, r21
     86a:	00 0c       	add	r0, r0
     86c:	66 0b       	sbc	r22, r22
     86e:	77 0b       	sbc	r23, r23
     870:	c4 0e       	add	r12, r20
     872:	d5 1e       	adc	r13, r21
     874:	e6 1e       	adc	r14, r22
     876:	f7 1e       	adc	r15, r23
		j = ( j < 1 ) ?  9 : j - 1;
     878:	18 16       	cp	r1, r24
     87a:	19 06       	cpc	r1, r25
     87c:	14 f4       	brge	.+4      	; 0x882 <readLoad+0xfa>
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	02 c0       	rjmp	.+4      	; 0x886 <readLoad+0xfe>
     882:	89 e0       	ldi	r24, 0x09	; 9
     884:	90 e0       	ldi	r25, 0x00	; 0
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	a2 17       	cp	r26, r18
     88a:	b3 07       	cpc	r27, r19
     88c:	34 f3       	brlt	.-52     	; 0x85a <readLoad+0xd2>
     88e:	03 c0       	rjmp	.+6      	; 0x896 <readLoad+0x10e>
	weightBuf[ringCountFilt] = weight1;
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
     890:	c1 2c       	mov	r12, r1
     892:	d1 2c       	mov	r13, r1
     894:	76 01       	movw	r14, r12
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
		weightSum += weightBuf[j];
		j = ( j < 1 ) ?  9 : j - 1;
	}	
	weight1 = weightSum / ( codeFilt + 1);	 
     896:	03 2e       	mov	r0, r19
     898:	00 0c       	add	r0, r0
     89a:	44 0b       	sbc	r20, r20
     89c:	55 0b       	sbc	r21, r21
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	0a d4       	rcall	.+2068   	; 0x10b8 <__divmodsi4>
     8a4:	c9 01       	movw	r24, r18

//-- divison proc
	if( codeDivision == 0 ) weight1 = ( weight1 / 10 ) * 10;
     8a6:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <codeDivision>
     8aa:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <codeDivision+0x1>
     8ae:	30 97       	sbiw	r30, 0x00	; 0
     8b0:	79 f4       	brne	.+30     	; 0x8d0 <readLoad+0x148>
     8b2:	6a e0       	ldi	r22, 0x0A	; 10
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	ed d3       	rcall	.+2010   	; 0x1092 <__divmodhi4>
     8b8:	cb 01       	movw	r24, r22
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	66 0f       	add	r22, r22
     8c4:	77 1f       	adc	r23, r23
     8c6:	66 0f       	add	r22, r22
     8c8:	77 1f       	adc	r23, r23
     8ca:	86 0f       	add	r24, r22
     8cc:	97 1f       	adc	r25, r23
	else weight1 = ( weight1 / codeDivision ) * codeDivision;
     8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <readLoad+0x15a>
     8d0:	bf 01       	movw	r22, r30
     8d2:	df d3       	rcall	.+1982   	; 0x1092 <__divmodhi4>
     8d4:	e6 9f       	mul	r30, r22
     8d6:	c0 01       	movw	r24, r0
     8d8:	e7 9f       	mul	r30, r23
     8da:	90 0d       	add	r25, r0
     8dc:	f6 9f       	mul	r31, r22
     8de:	90 0d       	add	r25, r0
     8e0:	11 24       	eor	r1, r1

	return weight1;	
}
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	08 95       	ret

000008f0 <main>:
int returnVal;

int main(void)
{
	
	initGpio();
     8f0:	d2 de       	rcall	.-604    	; 0x696 <initGpio>
	
	initADC();	
     8f2:	ac dd       	rcall	.-1192   	; 0x44c <initADC>
	sei();	

//	initRomData();	
	readRomData();
     8f4:	78 94       	sei
	initCodeData();		
     8f6:	a7 dc       	rcall	.-1714   	; 0x246 <readRomData>
     8f8:	e6 de       	rcall	.-564    	; 0x6c6 <initCodeData>
	loadWeight = readLoad();
     8fa:	46 df       	rcall	.-372    	; 0x788 <readLoad>
     8fc:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <loadWeight+0x1>
	enterModeRun();
     900:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <loadWeight>
    while (1) 
    {	
		procRelayOut( );	
     904:	25 d0       	rcall	.+74     	; 0x950 <enterModeRun>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     906:	28 df       	rcall	.-432    	; 0x758 <procRelayOut>
     908:	fc dd       	rcall	.-1032   	; 0x502 <getButton>
	loadWeight = readLoad();
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );	
		command = getCommand();
     90a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <command>
		loadWeight = readLoad();
     90e:	3c df       	rcall	.-392    	; 0x788 <readLoad>
     910:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <loadWeight+0x1>
     914:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <loadWeight>
     918:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <machineState>
		switch( machineState ){
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	51 f0       	breq	.+20     	; 0x934 <main+0x44>
     920:	28 f0       	brcs	.+10     	; 0x92c <main+0x3c>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	59 f0       	breq	.+22     	; 0x93c <main+0x4c>
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	69 f0       	breq	.+26     	; 0x944 <main+0x54>
			case MODE_RUN			: modeRun(command)			; break;
     92a:	10 c0       	rjmp	.+32     	; 0x94c <main+0x5c>
     92c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <command>
     930:	03 d1       	rcall	.+518    	; 0xb38 <modeRun>
			case MODE_PASSWD		: modePassWord(command)		; break;
     932:	e9 cf       	rjmp	.-46     	; 0x906 <main+0x16>
     934:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <command>
			case MODE_SELECT_CODE	: modeSelectCode(command)	; break;
     938:	0b d1       	rcall	.+534    	; 0xb50 <modePassWord>
     93a:	e5 cf       	rjmp	.-54     	; 0x906 <main+0x16>
     93c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <command>
     940:	b2 d1       	rcall	.+868    	; 0xca6 <modeSelectCode>
			case MODE_CHANGE_CODE	: modeChangeCode(command)	; break;
     942:	e1 cf       	rjmp	.-62     	; 0x906 <main+0x16>
     944:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <command>
     948:	63 d2       	rcall	.+1222   	; 0xe10 <modeChangeCode>
     94a:	dd cf       	rjmp	.-70     	; 0x906 <main+0x16>
			default					: enterModeRun( )	; break;
     94c:	01 d0       	rcall	.+2      	; 0x950 <enterModeRun>
     94e:	db cf       	rjmp	.-74     	; 0x906 <main+0x16>

00000950 <enterModeRun>:
#include "header.h"
#include "extern.h"

void enterModeRun(void)
{
	machineState = MODE_RUN;
     950:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <machineState>
	blinkCmdFlag = 0x00;
     954:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <blinkCmdFlag>
	loadWeight = readLoad();
     958:	17 df       	rcall	.-466    	; 0x788 <readLoad>
     95a:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <loadWeight+0x1>
     95e:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <loadWeight>
	displayWeight(loadWeight);
     962:	ec cd       	rjmp	.-1064   	; 0x53c <displayWeight>
     964:	08 95       	ret

00000966 <enterModePassWord>:
     966:	81 e0       	ldi	r24, 0x01	; 1
}

void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
     968:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <machineState>
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
		fndData[i] = fndTableNum[0];
     96c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fndTableNum>
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     970:	a5 e7       	ldi	r26, 0x75	; 117
     972:	b1 e0       	ldi	r27, 0x01	; 1
     974:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     976:	ef e7       	ldi	r30, 0x7F	; 127
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	80 83       	st	Z, r24
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	1c 92       	st	X, r1
     980:	11 97       	sbiw	r26, 0x01	; 1
		fndData[i] = fndTableNum[0];
     982:	81 83       	std	Z+1, r24	; 0x01
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     984:	12 96       	adiw	r26, 0x02	; 2
     986:	1c 92       	st	X, r1
     988:	12 97       	sbiw	r26, 0x02	; 2
		fndData[i] = fndTableNum[0];
     98a:	82 83       	std	Z+2, r24	; 0x02
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     98c:	13 96       	adiw	r26, 0x03	; 3
     98e:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     990:	83 83       	std	Z+3, r24	; 0x03
	}
	blinkCmdFlag = 0x08;
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <blinkCmdFlag>
	editDigitPoint = 3;		// 1000
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <editDigitPoint>
     99e:	08 95       	ret

000009a0 <enterModeSelectCode>:
}

void enterModeSelectCode(void)
{
	machineState = MODE_SELECT_CODE;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <machineState>
	codeNumber = 0;
     9a6:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <codeNumber+0x1>
     9aa:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <codeNumber>
	fndData[3] = fndTableChar['P' - 'A'];
     9ae:	ef e7       	ldi	r30, 0x7F	; 127
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	ae e0       	ldi	r26, 0x0E	; 14
     9b4:	b1 e0       	ldi	r27, 0x01	; 1
     9b6:	1f 96       	adiw	r26, 0x0f	; 15
     9b8:	8c 91       	ld	r24, X
     9ba:	1f 97       	sbiw	r26, 0x0f	; 15
     9bc:	83 83       	std	Z+3, r24	; 0x03
	fndData[2] = fndTableChar['O' - 'A'];
     9be:	1e 96       	adiw	r26, 0x0e	; 14
     9c0:	8c 91       	ld	r24, X
     9c2:	1e 97       	sbiw	r26, 0x0e	; 14
     9c4:	82 83       	std	Z+2, r24	; 0x02
	fndData[1] = fndTableChar['I' - 'A'];
     9c6:	18 96       	adiw	r26, 0x08	; 8
     9c8:	8c 91       	ld	r24, X
     9ca:	18 97       	sbiw	r26, 0x08	; 8
     9cc:	81 83       	std	Z+1, r24	; 0x01
	fndData[0] = fndTableChar['T' - 'A'];
     9ce:	53 96       	adiw	r26, 0x13	; 19
     9d0:	8c 91       	ld	r24, X
     9d2:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;	//
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <blinkCmdFlag>
     9da:	08 95       	ret

000009dc <enterModeChangeCode>:
}

void enterModeChangeCode(void)
{
	machineState = MODE_CHANGE_CODE;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <machineState>

	switch(codeNumber){	
     9e2:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <codeNumber>
     9e6:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <codeNumber+0x1>
     9ea:	e8 30       	cpi	r30, 0x08	; 8
     9ec:	f1 05       	cpc	r31, r1
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <enterModeChangeCode+0x16>
     9f0:	a0 c0       	rjmp	.+320    	; 0xb32 <enterModeChangeCode+0x156>
     9f2:	ea 5b       	subi	r30, 0xBA	; 186
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	7c c3       	rjmp	.+1784   	; 0x10f0 <__tablejump2__>
	case 0:
		tmpCodeData = codePoint;
     9f8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <codePoint>
     9fc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <codePoint+0x1>
     a00:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     a04:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		blinkCmdFlag = 0x00;	// no blink	
     a08:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <blinkCmdFlag>
		displayWeight(loadWeight);
     a0c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <loadWeight>
     a10:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <loadWeight+0x1>
     a14:	93 cd       	rjmp	.-1242   	; 0x53c <displayWeight>
		break;
     a16:	08 95       	ret
	case 1:
		tmpCodeData = codeFilt;	//
     a18:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <codeFilt>
     a1c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <codeFilt+0x1>
     a20:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     a24:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		blinkCmdFlag = 0x00;
     a28:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <blinkCmdFlag>
		fndData[3] = 0x00;
     a2c:	ef e7       	ldi	r30, 0x7F	; 127
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	13 82       	std	Z+3, r1	; 0x03
		fndData[2] = 0x00;
     a32:	12 82       	std	Z+2, r1	; 0x02
		fndData[1] = 0x00;
     a34:	11 82       	std	Z+1, r1	; 0x01
		fndData[0] = fndTableNum[tmpCodeData];
     a36:	dc 01       	movw	r26, r24
     a38:	ac 5f       	subi	r26, 0xFC	; 252
     a3a:	be 4f       	sbci	r27, 0xFE	; 254
     a3c:	8c 91       	ld	r24, X
     a3e:	80 83       	st	Z, r24
		break;
     a40:	08 95       	ret
	case 2:
		tmpCodeData = codeDivision;	//
     a42:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <codeDivision>
     a46:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <codeDivision+0x1>
     a4a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     a4e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		blinkCmdFlag = 0x00;
     a52:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <blinkCmdFlag>
		fndData[3] = 0x00;
     a56:	ef e7       	ldi	r30, 0x7F	; 127
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	13 82       	std	Z+3, r1	; 0x03
		fndData[2] = 0x00;
     a5c:	12 82       	std	Z+2, r1	; 0x02
		fndData[1] = 0x00;
     a5e:	11 82       	std	Z+1, r1	; 0x01
		fndData[0] = fndTableNum[tmpCodeData];
     a60:	dc 01       	movw	r26, r24
     a62:	ac 5f       	subi	r26, 0xFC	; 252
     a64:	be 4f       	sbci	r27, 0xFE	; 254
     a66:	8c 91       	ld	r24, X
     a68:	80 83       	st	Z, r24
		break;
     a6a:	08 95       	ret
	case 3:
		tmpCodeData = codeAutoZero;
     a6c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <codeAutoZero>
     a70:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <codeAutoZero+0x1>
     a74:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     a78:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		blinkCmdFlag = 0x0f;	//
     a7c:	2f e0       	ldi	r18, 0x0F	; 15
     a7e:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <blinkCmdFlag>
		if(tmpCodeData){
     a82:	89 2b       	or	r24, r25
     a84:	89 f0       	breq	.+34     	; 0xaa8 <enterModeChangeCode+0xcc>
			fndData[3] = 0x00;
     a86:	ef e7       	ldi	r30, 0x7F	; 127
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['Y' - 'A'];
     a8c:	ae e0       	ldi	r26, 0x0E	; 14
     a8e:	b1 e0       	ldi	r27, 0x01	; 1
     a90:	58 96       	adiw	r26, 0x18	; 24
     a92:	8c 91       	ld	r24, X
     a94:	58 97       	sbiw	r26, 0x18	; 24
     a96:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['E' - 'A'];
     a98:	14 96       	adiw	r26, 0x04	; 4
     a9a:	8c 91       	ld	r24, X
     a9c:	14 97       	sbiw	r26, 0x04	; 4
     a9e:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = fndTableChar['S' - 'A'];
     aa0:	52 96       	adiw	r26, 0x12	; 18
     aa2:	8c 91       	ld	r24, X
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret
		} else {
			fndData[3] = 0x00;
     aa8:	ef e7       	ldi	r30, 0x7F	; 127
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['N' - 'A'];
     aae:	ae e0       	ldi	r26, 0x0E	; 14
     ab0:	b1 e0       	ldi	r27, 0x01	; 1
     ab2:	1d 96       	adiw	r26, 0x0d	; 13
     ab4:	8c 91       	ld	r24, X
     ab6:	1d 97       	sbiw	r26, 0x0d	; 13
     ab8:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['O' - 'A'];
     aba:	1e 96       	adiw	r26, 0x0e	; 14
     abc:	8c 91       	ld	r24, X
     abe:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = 0x00;
     ac0:	10 82       	st	Z, r1
     ac2:	08 95       	ret
		}
		break;
	case 4:
		tmpCodeData = codeAlarm;
     ac4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <codeAlarm>
     ac8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <codeAlarm+0x1>
     acc:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     ad0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		editDigitPoint = 0;		// 1000
     ad4:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <editDigitPoint>
		blinkCmdFlag = 0x01;
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <blinkCmdFlag>
		displayWeight(tmpCodeData);
     ade:	2e cd       	rjmp	.-1444   	; 0x53c <displayWeight>
		break;
     ae0:	08 95       	ret
	case 5:
		tmpCodeData = codeOver;
     ae2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <codeOver>
     ae6:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <codeOver+0x1>
     aea:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     aee:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		editDigitPoint = 0;		// 1000
     af2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <editDigitPoint>
		blinkCmdFlag = 0x01;
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <blinkCmdFlag>
		displayWeight(tmpCodeData);
     afc:	1f cd       	rjmp	.-1474   	; 0x53c <displayWeight>
		break;
     afe:	08 95       	ret
	case 6:
		tmpCodeData = codeWeight;
     b00:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <codeWeight>
     b04:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <codeWeight+0x1>
     b08:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     b0c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
		editDigitPoint = 0;		// 1000
     b10:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <editDigitPoint>
		blinkCmdFlag = 0x01;
     b14:	21 e0       	ldi	r18, 0x01	; 1
     b16:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <blinkCmdFlag>
		displayWeight(tmpCodeData);
     b1a:	10 cd       	rjmp	.-1504   	; 0x53c <displayWeight>
		break;
     b1c:	08 95       	ret
	case 7:
		editDigitPoint = 0;		// 1000
     b1e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <editDigitPoint>
		blinkCmdFlag = 0x00;
     b22:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <blinkCmdFlag>
		displayNumber(adcWeightIn);
     b26:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <adcWeightIn>
     b2a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <adcWeightIn+0x1>
		break;
     b2e:	88 cd       	rjmp	.-1264   	; 0x640 <displayNumber>
	default:
		systemErrProc(ERR_SYS_NO_CODE_NUMBER);
     b30:	08 95       	ret
     b32:	82 e3       	ldi	r24, 0x32	; 50
     b34:	28 ce       	rjmp	.-944    	; 0x786 <systemErrProc>
     b36:	08 95       	ret

00000b38 <modeRun>:
	}
}

int modeRun(uint8_t cmd)
{
	if( cmd  == BTN_ENTER ){ 
     b38:	8f 37       	cpi	r24, 0x7F	; 127
     b3a:	11 f4       	brne	.+4      	; 0xb40 <modeRun+0x8>
		//enterModePassWord();
		enterModeSelectCode();
     b3c:	31 df       	rcall	.-414    	; 0x9a0 <enterModeSelectCode>
		return 0;
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <modeRun+0x12>
	}
	displayWeight(loadWeight);
     b40:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <loadWeight>
     b44:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <loadWeight+0x1>
     b48:	f9 dc       	rcall	.-1550   	; 0x53c <displayWeight>
	return 0;
}
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	08 95       	ret

00000b50 <modePassWord>:
int modePassWord(uint8_t cmd )
{
	int i;
	int16_t passwd;
	
	if( cmd == BTN_ENTER ){
     b50:	8f 37       	cpi	r24, 0x7F	; 127
     b52:	09 f0       	breq	.+2      	; 0xb56 <modePassWord+0x6>
     b54:	4d c0       	rjmp	.+154    	; 0xbf0 <modePassWord+0xa0>
		passwd = passWord[3] * 1000 +passWord[2] * 100 + passWord[1] * 10 + passWord[0]; 	
     b56:	e5 e7       	ldi	r30, 0x75	; 117
     b58:	f1 e0       	ldi	r31, 0x01	; 1
		if( passwd == 3262 ){
     b5a:	43 81       	ldd	r20, Z+3	; 0x03
     b5c:	28 ee       	ldi	r18, 0xE8	; 232
     b5e:	33 e0       	ldi	r19, 0x03	; 3
     b60:	42 9f       	mul	r20, r18
     b62:	c0 01       	movw	r24, r0
     b64:	43 9f       	mul	r20, r19
     b66:	90 0d       	add	r25, r0
     b68:	11 24       	eor	r1, r1
     b6a:	22 81       	ldd	r18, Z+2	; 0x02
     b6c:	ac 01       	movw	r20, r24
     b6e:	34 e6       	ldi	r19, 0x64	; 100
     b70:	23 9f       	mul	r18, r19
     b72:	40 0d       	add	r20, r0
     b74:	51 1d       	adc	r21, r1
     b76:	11 24       	eor	r1, r1
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	89 2f       	mov	r24, r25
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	bc 01       	movw	r22, r24
     b80:	66 0f       	add	r22, r22
     b82:	77 1f       	adc	r23, r23
     b84:	9c 01       	movw	r18, r24
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	cb 01       	movw	r24, r22
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	84 0f       	add	r24, r20
     b9a:	95 1f       	adc	r25, r21
     b9c:	20 81       	ld	r18, Z
     b9e:	82 0f       	add	r24, r18
     ba0:	91 1d       	adc	r25, r1
     ba2:	8e 3b       	cpi	r24, 0xBE	; 190
     ba4:	9c 40       	sbci	r25, 0x0C	; 12
     ba6:	c9 f4       	brne	.+50     	; 0xbda <modePassWord+0x8a>
			if(codeNumber == 6 ){
     ba8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <codeNumber>
     bac:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <codeNumber+0x1>
     bb0:	86 30       	cpi	r24, 0x06	; 6
     bb2:	91 05       	cpc	r25, r1
     bb4:	59 f4       	brne	.+22     	; 0xbcc <modePassWord+0x7c>
				saveCode(codeNumber,tmpCodeData);
     bb6:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <tmpCodeData>
     bba:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <tmpCodeData+0x1>
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	01 db       	rcall	.-2558   	; 0x1c6 <saveCode>
				enterModeRun();				
     bc4:	c5 de       	rcall	.-630    	; 0x950 <enterModeRun>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
			}
		} else {
			if(codeNumber == 10 ) return -2;
			else  enterModeRun();
		}
		return 0;
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	08 95       	ret
     bcc:	0a 97       	sbiw	r24, 0x0a	; 10
		passwd = passWord[3] * 1000 +passWord[2] * 100 + passWord[1] * 10 + passWord[0]; 	
		if( passwd == 3262 ){
			if(codeNumber == 6 ){
				saveCode(codeNumber,tmpCodeData);
				enterModeRun();				
			} else if ( codeNumber == 10) {
     bce:	09 f4       	brne	.+2      	; 0xbd2 <modePassWord+0x82>
     bd0:	5e c0       	rjmp	.+188    	; 0xc8e <modePassWord+0x13e>
				return -1;				
			} else {
				enterModeSelectCode();
     bd2:	e6 de       	rcall	.-564    	; 0x9a0 <enterModeSelectCode>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
			}
		} else {
			if(codeNumber == 10 ) return -2;
			else  enterModeRun();
		}
		return 0;
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret
     bda:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <codeNumber>
				return -1;				
			} else {
				enterModeSelectCode();
			}
		} else {
			if(codeNumber == 10 ) return -2;
     bde:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <codeNumber+0x1>
     be2:	0a 97       	sbiw	r24, 0x0a	; 10
     be4:	09 f4       	brne	.+2      	; 0xbe8 <modePassWord+0x98>
     be6:	56 c0       	rjmp	.+172    	; 0xc94 <modePassWord+0x144>
			else  enterModeRun();
     be8:	b3 de       	rcall	.-666    	; 0x950 <enterModeRun>
     bea:	80 e0       	ldi	r24, 0x00	; 0
		}
		return 0;
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret
     bf0:	8f 3b       	cpi	r24, 0xBF	; 191
	}

	if(cmd == BTN_CANCEL){
     bf2:	59 f4       	brne	.+22     	; 0xc0a <modePassWord+0xba>
     bf4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <codeNumber>
		if(codeNumber == 10 ) return -2;
     bf8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <codeNumber+0x1>
     bfc:	0a 97       	sbiw	r24, 0x0a	; 10
     bfe:	09 f4       	brne	.+2      	; 0xc02 <modePassWord+0xb2>
     c00:	4c c0       	rjmp	.+152    	; 0xc9a <modePassWord+0x14a>
		else			enterModeRun();
     c02:	a6 de       	rcall	.-692    	; 0x950 <enterModeRun>
     c04:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	08 95       	ret
     c0a:	8f 3e       	cpi	r24, 0xEF	; 239
	}
	
	if(cmd == BTN_UP){
     c0c:	d9 f4       	brne	.+54     	; 0xc44 <modePassWord+0xf4>
     c0e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <editDigitPoint>
		passWord[editDigitPoint] = ( passWord[editDigitPoint] > 8 ) ? 0 : passWord[editDigitPoint] +1;
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fc 01       	movw	r30, r24
     c16:	eb 58       	subi	r30, 0x8B	; 139
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	e0 81       	ld	r30, Z
     c1c:	e9 30       	cpi	r30, 0x09	; 9
     c1e:	10 f4       	brcc	.+4      	; 0xc24 <modePassWord+0xd4>
     c20:	ef 5f       	subi	r30, 0xFF	; 255
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <modePassWord+0xd6>
     c24:	e0 e0       	ldi	r30, 0x00	; 0
     c26:	dc 01       	movw	r26, r24
     c28:	ab 58       	subi	r26, 0x8B	; 139
     c2a:	be 4f       	sbci	r27, 0xFE	; 254
     c2c:	ec 93       	st	X, r30
     c2e:	dc 01       	movw	r26, r24
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
     c30:	a1 58       	subi	r26, 0x81	; 129
     c32:	be 4f       	sbci	r27, 0xFE	; 254
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ec 5f       	subi	r30, 0xFC	; 252
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	20 81       	ld	r18, Z
     c3c:	2c 93       	st	X, r18
     c3e:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	08 95       	ret
     c44:	8f 3d       	cpi	r24, 0xDF	; 223
	}

	if(cmd == BTN_LEFT){
     c46:	61 f5       	brne	.+88     	; 0xca0 <modePassWord+0x150>
     c48:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <editDigitPoint>
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
     c4c:	88 23       	and	r24, r24
     c4e:	11 f0       	breq	.+4      	; 0xc54 <modePassWord+0x104>
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <modePassWord+0x106>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <editDigitPoint>
     c5a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <blinkCmdFlag>
		blinkCmdFlag = blinkCmdFlag >> 1 ;
     c5e:	96 95       	lsr	r25
     c60:	19 f0       	breq	.+6      	; 0xc68 <modePassWord+0x118>
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
     c62:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <blinkCmdFlag>
		return 0;
	}

	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <modePassWord+0x11e>
     c68:	98 e0       	ldi	r25, 0x08	; 8
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
     c6a:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <blinkCmdFlag>
     c6e:	90 e0       	ldi	r25, 0x00	; 0
		
		i = passWord[editDigitPoint];
     c70:	dc 01       	movw	r26, r24
		fndData[editDigitPoint] = fndTableNum[i];
     c72:	a1 58       	subi	r26, 0x81	; 129
     c74:	be 4f       	sbci	r27, 0xFE	; 254
     c76:	fc 01       	movw	r30, r24
	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
		
		i = passWord[editDigitPoint];
     c78:	eb 58       	subi	r30, 0x8B	; 139
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	e0 81       	ld	r30, Z
		fndData[editDigitPoint] = fndTableNum[i];
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ec 5f       	subi	r30, 0xFC	; 252
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	80 81       	ld	r24, Z
     c86:	8c 93       	st	X, r24
     c88:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	08 95       	ret
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
		if( passwd == 3262 ){
			if(codeNumber == 6 ){
				saveCode(codeNumber,tmpCodeData);
				enterModeRun();				
			} else if ( codeNumber == 10) {
				return -1;				
     c90:	9f ef       	ldi	r25, 0xFF	; 255
     c92:	08 95       	ret
     c94:	8e ef       	ldi	r24, 0xFE	; 254
			} else {
				enterModeSelectCode();
			}
		} else {
			if(codeNumber == 10 ) return -2;
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	08 95       	ret
     c9a:	8e ef       	ldi	r24, 0xFE	; 254
		}
		return 0;
	}

	if(cmd == BTN_CANCEL){
		if(codeNumber == 10 ) return -2;
     c9c:	9f ef       	ldi	r25, 0xFF	; 255
     c9e:	08 95       	ret
     ca0:	80 e0       	ldi	r24, 0x00	; 0
		
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
		return 0;
	}
	return 0;
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <modeSelectCode>:
}
     ca6:	8f 37       	cpi	r24, 0x7F	; 127

int modeSelectCode(uint8_t cmd)
{

	if( cmd == BTN_ENTER ){
     ca8:	11 f4       	brne	.+4      	; 0xcae <modeSelectCode+0x8>
		enterModeChangeCode();
     caa:	98 de       	rcall	.-720    	; 0x9dc <enterModeChangeCode>
		return 0;
     cac:	ae c0       	rjmp	.+348    	; 0xe0a <modeSelectCode+0x164>
	}

	if(cmd == BTN_CANCEL){
     cae:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <modeSelectCode+0x10>
     cb2:	4e de       	rcall	.-868    	; 0x950 <enterModeRun>
		return 0;
     cb4:	aa c0       	rjmp	.+340    	; 0xe0a <modeSelectCode+0x164>
	}
	
	if(cmd == BTN_UP){
     cb6:	8f 3e       	cpi	r24, 0xEF	; 239
     cb8:	09 f0       	breq	.+2      	; 0xcbc <modeSelectCode+0x16>
     cba:	a7 c0       	rjmp	.+334    	; 0xe0a <modeSelectCode+0x164>
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
     cbc:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <codeNumber>
     cc0:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <codeNumber+0x1>
     cc4:	e8 30       	cpi	r30, 0x08	; 8
     cc6:	f1 05       	cpc	r31, r1
     cc8:	0c f0       	brlt	.+2      	; 0xccc <modeSelectCode+0x26>
     cca:	9a c0       	rjmp	.+308    	; 0xe00 <modeSelectCode+0x15a>
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	f0 93 71 01 	sts	0x0171, r31	; 0x800171 <codeNumber+0x1>
     cd2:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <codeNumber>
		switch(codeNumber){
     cd6:	e8 30       	cpi	r30, 0x08	; 8
     cd8:	f1 05       	cpc	r31, r1
     cda:	08 f0       	brcs	.+2      	; 0xcde <modeSelectCode+0x38>
     cdc:	8f c0       	rjmp	.+286    	; 0xdfc <modeSelectCode+0x156>
     cde:	e2 5b       	subi	r30, 0xB2	; 178
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	06 c2       	rjmp	.+1036   	; 0x10f0 <__tablejump2__>
			case 0 :
				fndData[3] = fndTableChar['P' - 'A'];
     ce4:	ef e7       	ldi	r30, 0x7F	; 127
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	ae e0       	ldi	r26, 0x0E	; 14
     cea:	b1 e0       	ldi	r27, 0x01	; 1
     cec:	1f 96       	adiw	r26, 0x0f	; 15
     cee:	8c 91       	ld	r24, X
     cf0:	1f 97       	sbiw	r26, 0x0f	; 15
     cf2:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['O' - 'A'];
     cf4:	1e 96       	adiw	r26, 0x0e	; 14
     cf6:	8c 91       	ld	r24, X
     cf8:	1e 97       	sbiw	r26, 0x0e	; 14
     cfa:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['I' - 'A'];
     cfc:	18 96       	adiw	r26, 0x08	; 8
     cfe:	8c 91       	ld	r24, X
     d00:	18 97       	sbiw	r26, 0x08	; 8
     d02:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
     d04:	53 96       	adiw	r26, 0x13	; 19
     d06:	8c 91       	ld	r24, X
     d08:	80 83       	st	Z, r24
				break;
     d0a:	7f c0       	rjmp	.+254    	; 0xe0a <modeSelectCode+0x164>
			case 1 :
				fndData[3] = fndTableChar['F' - 'A'];
     d0c:	ef e7       	ldi	r30, 0x7F	; 127
     d0e:	f1 e0       	ldi	r31, 0x01	; 1
     d10:	ae e0       	ldi	r26, 0x0E	; 14
     d12:	b1 e0       	ldi	r27, 0x01	; 1
     d14:	15 96       	adiw	r26, 0x05	; 5
     d16:	8c 91       	ld	r24, X
     d18:	15 97       	sbiw	r26, 0x05	; 5
     d1a:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
     d1c:	18 96       	adiw	r26, 0x08	; 8
     d1e:	8c 91       	ld	r24, X
     d20:	18 97       	sbiw	r26, 0x08	; 8
     d22:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['L' - 'A'];
     d24:	1b 96       	adiw	r26, 0x0b	; 11
     d26:	8c 91       	ld	r24, X
     d28:	1b 97       	sbiw	r26, 0x0b	; 11
     d2a:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
     d2c:	53 96       	adiw	r26, 0x13	; 19
     d2e:	8c 91       	ld	r24, X
     d30:	80 83       	st	Z, r24
				break;
     d32:	6b c0       	rjmp	.+214    	; 0xe0a <modeSelectCode+0x164>
			case 2 :
				fndData[3] = fndTableChar['D' - 'A'];
     d34:	ef e7       	ldi	r30, 0x7F	; 127
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	ae e0       	ldi	r26, 0x0E	; 14
     d3a:	b1 e0       	ldi	r27, 0x01	; 1
     d3c:	13 96       	adiw	r26, 0x03	; 3
     d3e:	8c 91       	ld	r24, X
     d40:	13 97       	sbiw	r26, 0x03	; 3
     d42:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
     d44:	18 96       	adiw	r26, 0x08	; 8
     d46:	8c 91       	ld	r24, X
     d48:	18 97       	sbiw	r26, 0x08	; 8
     d4a:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['V' - 'A'];
     d4c:	55 96       	adiw	r26, 0x15	; 21
     d4e:	9c 91       	ld	r25, X
     d50:	91 83       	std	Z+1, r25	; 0x01
				fndData[0] = fndTableChar['I' - 'A'];
     d52:	80 83       	st	Z, r24
				break;
     d54:	5a c0       	rjmp	.+180    	; 0xe0a <modeSelectCode+0x164>
			case 3 :
				fndData[3] = fndTableChar['A' - 'A'];
     d56:	ef e7       	ldi	r30, 0x7F	; 127
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	ae e0       	ldi	r26, 0x0E	; 14
     d5c:	b1 e0       	ldi	r27, 0x01	; 1
     d5e:	8c 91       	ld	r24, X
     d60:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['U' - 'A'];
     d62:	54 96       	adiw	r26, 0x14	; 20
     d64:	8c 91       	ld	r24, X
     d66:	54 97       	sbiw	r26, 0x14	; 20
     d68:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
     d6a:	53 96       	adiw	r26, 0x13	; 19
     d6c:	8c 91       	ld	r24, X
     d6e:	53 97       	sbiw	r26, 0x13	; 19
     d70:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['O' - 'A'];
     d72:	1e 96       	adiw	r26, 0x0e	; 14
     d74:	8c 91       	ld	r24, X
     d76:	80 83       	st	Z, r24
				break;
     d78:	48 c0       	rjmp	.+144    	; 0xe0a <modeSelectCode+0x164>
			case 4 :
				fndData[3] = fndTableChar['A' - 'A'];
     d7a:	ae e0       	ldi	r26, 0x0E	; 14
     d7c:	b1 e0       	ldi	r27, 0x01	; 1
     d7e:	8c 91       	ld	r24, X
     d80:	ef e7       	ldi	r30, 0x7F	; 127
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['L' - 'A'];
     d86:	1b 96       	adiw	r26, 0x0b	; 11
     d88:	9c 91       	ld	r25, X
     d8a:	1b 97       	sbiw	r26, 0x0b	; 11
     d8c:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['A' - 'A'];
     d8e:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
     d90:	51 96       	adiw	r26, 0x11	; 17
     d92:	8c 91       	ld	r24, X
     d94:	80 83       	st	Z, r24
				break;
     d96:	39 c0       	rjmp	.+114    	; 0xe0a <modeSelectCode+0x164>
			case 5 :
				fndData[3] = fndTableChar['O' - 'A'];
     d98:	ef e7       	ldi	r30, 0x7F	; 127
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	ae e0       	ldi	r26, 0x0E	; 14
     d9e:	b1 e0       	ldi	r27, 0x01	; 1
     da0:	1e 96       	adiw	r26, 0x0e	; 14
     da2:	8c 91       	ld	r24, X
     da4:	1e 97       	sbiw	r26, 0x0e	; 14
     da6:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['V' - 'A'];
     da8:	55 96       	adiw	r26, 0x15	; 21
     daa:	8c 91       	ld	r24, X
     dac:	55 97       	sbiw	r26, 0x15	; 21
     dae:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8c 91       	ld	r24, X
     db4:	14 97       	sbiw	r26, 0x04	; 4
     db6:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
     db8:	51 96       	adiw	r26, 0x11	; 17
     dba:	8c 91       	ld	r24, X
     dbc:	80 83       	st	Z, r24
				break;
     dbe:	25 c0       	rjmp	.+74     	; 0xe0a <modeSelectCode+0x164>
			case 6 :
				fndData[3] = fndTableChar['S' - 'A'];
     dc0:	ef e7       	ldi	r30, 0x7F	; 127
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	ae e0       	ldi	r26, 0x0E	; 14
     dc6:	b1 e0       	ldi	r27, 0x01	; 1
     dc8:	52 96       	adiw	r26, 0x12	; 18
     dca:	8c 91       	ld	r24, X
     dcc:	52 97       	sbiw	r26, 0x12	; 18
     dce:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['E' - 'A'];
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	8c 91       	ld	r24, X
     dd4:	14 97       	sbiw	r26, 0x04	; 4
     dd6:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
     dd8:	53 96       	adiw	r26, 0x13	; 19
     dda:	8c 91       	ld	r24, X
     ddc:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
     dde:	80 83       	st	Z, r24
				break;
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <modeSelectCode+0x164>
			case 7 :
				fndData[3] = 0x40;
     de2:	ef e7       	ldi	r30, 0x7F	; 127
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	80 e4       	ldi	r24, 0x40	; 64
     de8:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['A' - 'A'];
     dea:	ae e0       	ldi	r26, 0x0E	; 14
     dec:	b1 e0       	ldi	r27, 0x01	; 1
     dee:	9c 91       	ld	r25, X
     df0:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['D' - 'A'];
     df2:	13 96       	adiw	r26, 0x03	; 3
     df4:	9c 91       	ld	r25, X
				fndData[0] = 0x40;
     df6:	91 83       	std	Z+1, r25	; 0x01
				break;
     df8:	80 83       	st	Z, r24
			default:	
				enterModeSelectCode();			
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <modeSelectCode+0x164>
     dfc:	d1 dd       	rcall	.-1118   	; 0x9a0 <enterModeSelectCode>
				break;
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <modeSelectCode+0x164>
		enterModeRun();
		return 0;
	}
	
	if(cmd == BTN_UP){
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
     e00:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <codeNumber+0x1>
     e04:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <codeNumber>
     e08:	6d cf       	rjmp	.-294    	; 0xce4 <modeSelectCode+0x3e>

	if(cmd == BTN_LEFT){
		return 0;
	}
	return 0;		
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <modeChangeCode>:

int modeChangeCode(uint8_t cmd)
{
	
	if(cmd == BTN_ENTER){
     e10:	8f 37       	cpi	r24, 0x7F	; 127
     e12:	81 f4       	brne	.+32     	; 0xe34 <modeChangeCode+0x24>
		if( codeNumber == 6 ) enterModePassWord();
     e14:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <codeNumber>
     e18:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <codeNumber+0x1>
     e1c:	86 30       	cpi	r24, 0x06	; 6
     e1e:	91 05       	cpc	r25, r1
     e20:	11 f4       	brne	.+4      	; 0xe26 <modeChangeCode+0x16>
     e22:	a1 dd       	rcall	.-1214   	; 0x966 <enterModePassWord>
     e24:	33 c1       	rjmp	.+614    	; 0x108c <modeChangeCode+0x27c>
		else{
			saveCode(codeNumber,tmpCodeData);
     e26:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <tmpCodeData>
     e2a:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <tmpCodeData+0x1>
			enterModeRun();
     e2e:	cb d9       	rcall	.-3178   	; 0x1c6 <saveCode>
     e30:	8f dd       	rcall	.-1250   	; 0x950 <enterModeRun>
		}
		return 0;
	}
	
	if(cmd == BTN_CANCEL){
     e32:	2c c1       	rjmp	.+600    	; 0x108c <modeChangeCode+0x27c>
     e34:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
     e36:	11 f4       	brne	.+4      	; 0xe3c <modeChangeCode+0x2c>
     e38:	8b dd       	rcall	.-1258   	; 0x950 <enterModeRun>
		return 0;
     e3a:	28 c1       	rjmp	.+592    	; 0x108c <modeChangeCode+0x27c>
	}

	if(codeNumber == 7)	{
     e3c:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <codeNumber>
     e40:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <codeNumber+0x1>
     e44:	27 30       	cpi	r18, 0x07	; 7
     e46:	31 05       	cpc	r19, r1
     e48:	31 f4       	brne	.+12     	; 0xe56 <modeChangeCode+0x46>
		displayNumber(adcWeightIn);
     e4a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <adcWeightIn>
     e4e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <adcWeightIn+0x1>
     e52:	f6 db       	rcall	.-2068   	; 0x640 <displayNumber>
		return 0;
     e54:	1b c1       	rjmp	.+566    	; 0x108c <modeChangeCode+0x27c>
	}

	if(cmd == BTN_UP){
     e56:	8f 3e       	cpi	r24, 0xEF	; 239
     e58:	09 f0       	breq	.+2      	; 0xe5c <modeChangeCode+0x4c>
     e5a:	db c0       	rjmp	.+438    	; 0x1012 <modeChangeCode+0x202>
		switch(codeNumber){
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	d1 f1       	breq	.+116    	; 0xed6 <modeChangeCode+0xc6>
     e62:	3c f4       	brge	.+14     	; 0xe72 <modeChangeCode+0x62>
     e64:	21 15       	cp	r18, r1
     e66:	31 05       	cpc	r19, r1
     e68:	69 f0       	breq	.+26     	; 0xe84 <modeChangeCode+0x74>
     e6a:	21 30       	cpi	r18, 0x01	; 1
     e6c:	31 05       	cpc	r19, r1
     e6e:	11 f1       	breq	.+68     	; 0xeb4 <modeChangeCode+0xa4>
     e70:	d0 c0       	rjmp	.+416    	; 0x1012 <modeChangeCode+0x202>
     e72:	23 30       	cpi	r18, 0x03	; 3
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <modeChangeCode+0x6a>
     e78:	65 c0       	rjmp	.+202    	; 0xf44 <modeChangeCode+0x134>
     e7a:	27 30       	cpi	r18, 0x07	; 7
     e7c:	31 05       	cpc	r19, r1
     e7e:	0c f4       	brge	.+2      	; 0xe82 <modeChangeCode+0x72>
     e80:	90 c0       	rjmp	.+288    	; 0xfa2 <modeChangeCode+0x192>
     e82:	c7 c0       	rjmp	.+398    	; 0x1012 <modeChangeCode+0x202>
		case 0:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
     e84:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
     e88:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	91 05       	cpc	r25, r1
     e90:	1c f4       	brge	.+6      	; 0xe98 <modeChangeCode+0x88>
     e92:	9c 01       	movw	r18, r24
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <tmpCodeData+0x1>
     e9c:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <tmpCodeData>
			codePoint = tmpCodeData;
     ea0:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <codePoint+0x1>
     ea4:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <codePoint>
			displayWeight(loadWeight);
     ea8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <loadWeight>
     eac:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <loadWeight+0x1>
     eb0:	45 db       	rcall	.-2422   	; 0x53c <displayWeight>
			break;
     eb2:	ec c0       	rjmp	.+472    	; 0x108c <modeChangeCode+0x27c>
		case 1:
			tmpCodeData = ( tmpCodeData > 8 ) ? 0 : tmpCodeData + 1;
     eb4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
     eb8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
     ebc:	89 30       	cpi	r24, 0x09	; 9
     ebe:	91 05       	cpc	r25, r1
     ec0:	14 f4       	brge	.+4      	; 0xec6 <modeChangeCode+0xb6>
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <modeChangeCode+0xba>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     ece:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
			displayWeight(tmpCodeData);
     ed2:	34 db       	rcall	.-2456   	; 0x53c <displayWeight>
			break;
     ed4:	db c0       	rjmp	.+438    	; 0x108c <modeChangeCode+0x27c>
		case 2:
			switch(tmpCodeData){
     ed6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
     eda:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	89 f0       	breq	.+34     	; 0xf06 <modeChangeCode+0xf6>
     ee4:	1c f4       	brge	.+6      	; 0xeec <modeChangeCode+0xdc>
     ee6:	89 2b       	or	r24, r25
     ee8:	39 f0       	breq	.+14     	; 0xef8 <modeChangeCode+0xe8>
     eea:	20 c0       	rjmp	.+64     	; 0xf2c <modeChangeCode+0x11c>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	89 f0       	breq	.+34     	; 0xf14 <modeChangeCode+0x104>
     ef2:	05 97       	sbiw	r24, 0x05	; 5
     ef4:	b1 f0       	breq	.+44     	; 0xf22 <modeChangeCode+0x112>
     ef6:	1a c0       	rjmp	.+52     	; 0xf2c <modeChangeCode+0x11c>
				case 0: tmpCodeData = 1; break;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     f00:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
     f04:	19 c0       	rjmp	.+50     	; 0xf38 <modeChangeCode+0x128>
				case 1: tmpCodeData = 2; break;
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     f0e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
     f12:	12 c0       	rjmp	.+36     	; 0xf38 <modeChangeCode+0x128>
				case 2: tmpCodeData = 5; break;
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     f1c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <modeChangeCode+0x128>
				case 5: tmpCodeData = 0; break;
     f22:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tmpCodeData+0x1>
     f26:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tmpCodeData>
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <modeChangeCode+0x128>
				default: tmpCodeData = 1; break;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     f34:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
			}
			displayWeight(loadWeight);
     f38:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <loadWeight>
     f3c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <loadWeight+0x1>
     f40:	fd da       	rcall	.-2566   	; 0x53c <displayWeight>
			break;
     f42:	a4 c0       	rjmp	.+328    	; 0x108c <modeChangeCode+0x27c>
		case 3:
			if(tmpCodeData){
     f44:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
     f48:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
     f4c:	89 2b       	or	r24, r25
     f4e:	91 f0       	breq	.+36     	; 0xf74 <modeChangeCode+0x164>
				tmpCodeData = 0;
     f50:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tmpCodeData+0x1>
     f54:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tmpCodeData>
				fndData[3] = 0x00;
     f58:	ef e7       	ldi	r30, 0x7F	; 127
     f5a:	f1 e0       	ldi	r31, 0x01	; 1
     f5c:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['N' - 'A'];
     f5e:	ae e0       	ldi	r26, 0x0E	; 14
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	1d 96       	adiw	r26, 0x0d	; 13
     f64:	8c 91       	ld	r24, X
     f66:	1d 97       	sbiw	r26, 0x0d	; 13
     f68:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['O' - 'A'];
     f6a:	1e 96       	adiw	r26, 0x0e	; 14
     f6c:	8c 91       	ld	r24, X
     f6e:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = 0x00;
     f70:	10 82       	st	Z, r1
     f72:	8c c0       	rjmp	.+280    	; 0x108c <modeChangeCode+0x27c>
			} else {
				tmpCodeData = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
     f7c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
				fndData[3] = 0x00;
     f80:	ef e7       	ldi	r30, 0x7F	; 127
     f82:	f1 e0       	ldi	r31, 0x01	; 1
     f84:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['Y' - 'A'];
     f86:	ae e0       	ldi	r26, 0x0E	; 14
     f88:	b1 e0       	ldi	r27, 0x01	; 1
     f8a:	58 96       	adiw	r26, 0x18	; 24
     f8c:	8c 91       	ld	r24, X
     f8e:	58 97       	sbiw	r26, 0x18	; 24
     f90:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
     f92:	14 96       	adiw	r26, 0x04	; 4
     f94:	8c 91       	ld	r24, X
     f96:	14 97       	sbiw	r26, 0x04	; 4
     f98:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['S' - 'A'];
     f9a:	52 96       	adiw	r26, 0x12	; 18
     f9c:	8c 91       	ld	r24, X
     f9e:	80 83       	st	Z, r24
     fa0:	75 c0       	rjmp	.+234    	; 0x108c <modeChangeCode+0x27c>
			}
			break;
		case 4:
		case 5:
		case 6:
			tmpFndData[editDigitPoint] = ( tmpFndData[editDigitPoint] > 9 ) ? 0 : tmpFndData[editDigitPoint] +1;
     fa2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <editDigitPoint>
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	e3 57       	subi	r30, 0x73	; 115
     fac:	fe 4f       	sbci	r31, 0xFE	; 254
     fae:	20 81       	ld	r18, Z
     fb0:	2a 30       	cpi	r18, 0x0A	; 10
     fb2:	10 f4       	brcc	.+4      	; 0xfb8 <modeChangeCode+0x1a8>
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <modeChangeCode+0x1aa>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	ed e8       	ldi	r30, 0x8D	; 141
     fbc:	f1 e0       	ldi	r31, 0x01	; 1
     fbe:	dc 01       	movw	r26, r24
     fc0:	a3 57       	subi	r26, 0x73	; 115
     fc2:	be 4f       	sbci	r27, 0xFE	; 254
     fc4:	2c 93       	st	X, r18
			tmpCodeData = tmpFndData[3] * 1000 +tmpFndData[2]*100 + tmpFndData[1] * 10 + tmpFndData[0];
     fc6:	43 81       	ldd	r20, Z+3	; 0x03
     fc8:	28 ee       	ldi	r18, 0xE8	; 232
     fca:	33 e0       	ldi	r19, 0x03	; 3
     fcc:	42 9f       	mul	r20, r18
     fce:	c0 01       	movw	r24, r0
     fd0:	43 9f       	mul	r20, r19
     fd2:	90 0d       	add	r25, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	22 81       	ldd	r18, Z+2	; 0x02
     fd8:	34 e6       	ldi	r19, 0x64	; 100
     fda:	23 9f       	mul	r18, r19
     fdc:	80 0d       	add	r24, r0
     fde:	91 1d       	adc	r25, r1
     fe0:	11 24       	eor	r1, r1
     fe2:	21 81       	ldd	r18, Z+1	; 0x01
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	24 0f       	add	r18, r20
     ffa:	35 1f       	adc	r19, r21
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	20 81       	ld	r18, Z
    1002:	82 0f       	add	r24, r18
    1004:	91 1d       	adc	r25, r1
    1006:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
    100a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
			displayWeight(tmpCodeData);
    100e:	96 da       	rcall	.-2772   	; 0x53c <displayWeight>
			break;
    1010:	3d c0       	rjmp	.+122    	; 0x108c <modeChangeCode+0x27c>
		}
	}

	if(cmd == BTN_LEFT){
    1012:	8f 3d       	cpi	r24, 0xDF	; 223
    1014:	d9 f5       	brne	.+118    	; 0x108c <modeChangeCode+0x27c>
		switch(codeNumber){
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	39 f0       	breq	.+14     	; 0x102a <modeChangeCode+0x21a>
    101c:	bc f1       	brlt	.+110    	; 0x108c <modeChangeCode+0x27c>
    101e:	24 50       	subi	r18, 0x04	; 4
    1020:	31 09       	sbc	r19, r1
    1022:	23 30       	cpi	r18, 0x03	; 3
    1024:	31 05       	cpc	r19, r1
    1026:	d0 f0       	brcs	.+52     	; 0x105c <modeChangeCode+0x24c>
    1028:	31 c0       	rjmp	.+98     	; 0x108c <modeChangeCode+0x27c>
		case 0:
			tmpCodeData = ( tmpCodeData <= 0 ) ? 2 : tmpCodeData - 1;
    102a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
    102e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
    1032:	18 16       	cp	r1, r24
    1034:	19 06       	cpc	r1, r25
    1036:	14 f4       	brge	.+4      	; 0x103c <modeChangeCode+0x22c>
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <modeChangeCode+0x230>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tmpCodeData+0x1>
    1044:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tmpCodeData>
			codePoint = tmpCodeData;
    1048:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <codePoint+0x1>
    104c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <codePoint>
			displayWeight(loadWeight);
    1050:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <loadWeight>
    1054:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <loadWeight+0x1>
    1058:	71 da       	rcall	.-2846   	; 0x53c <displayWeight>
			break;
    105a:	18 c0       	rjmp	.+48     	; 0x108c <modeChangeCode+0x27c>
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    105c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <editDigitPoint>
    1060:	88 23       	and	r24, r24
    1062:	11 f0       	breq	.+4      	; 0x1068 <modeChangeCode+0x258>
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	01 c0       	rjmp	.+2      	; 0x106a <modeChangeCode+0x25a>
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <editDigitPoint>
			blinkCmdFlag = blinkCmdFlag >> 1 ;
    106e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <blinkCmdFlag>
    1072:	86 95       	lsr	r24
			if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    1074:	19 f0       	breq	.+6      	; 0x107c <modeChangeCode+0x26c>
			break;
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
			blinkCmdFlag = blinkCmdFlag >> 1 ;
    1076:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <blinkCmdFlag>
			if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <modeChangeCode+0x272>
    107c:	88 e0       	ldi	r24, 0x08	; 8
    107e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <blinkCmdFlag>
			displayWeight(tmpCodeData);
    1082:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tmpCodeData>
    1086:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <tmpCodeData+0x1>
    108a:	58 da       	rcall	.-2896   	; 0x53c <displayWeight>
			break;
		}
	}
	return 0;
}
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	08 95       	ret

00001092 <__divmodhi4>:
    1092:	97 fb       	bst	r25, 7
    1094:	07 2e       	mov	r0, r23
    1096:	16 f4       	brtc	.+4      	; 0x109c <__divmodhi4+0xa>
    1098:	00 94       	com	r0
    109a:	06 d0       	rcall	.+12     	; 0x10a8 <__divmodhi4_neg1>
    109c:	77 fd       	sbrc	r23, 7
    109e:	08 d0       	rcall	.+16     	; 0x10b0 <__divmodhi4_neg2>
    10a0:	36 d0       	rcall	.+108    	; 0x110e <__udivmodhi4>
    10a2:	07 fc       	sbrc	r0, 7
    10a4:	05 d0       	rcall	.+10     	; 0x10b0 <__divmodhi4_neg2>
    10a6:	3e f4       	brtc	.+14     	; 0x10b6 <__divmodhi4_exit>

000010a8 <__divmodhi4_neg1>:
    10a8:	90 95       	com	r25
    10aa:	81 95       	neg	r24
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__divmodhi4_neg2>:
    10b0:	70 95       	com	r23
    10b2:	61 95       	neg	r22
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255

000010b6 <__divmodhi4_exit>:
    10b6:	08 95       	ret

000010b8 <__divmodsi4>:
    10b8:	05 2e       	mov	r0, r21
    10ba:	97 fb       	bst	r25, 7
    10bc:	16 f4       	brtc	.+4      	; 0x10c2 <__divmodsi4+0xa>
    10be:	00 94       	com	r0
    10c0:	0f d0       	rcall	.+30     	; 0x10e0 <__negsi2>
    10c2:	57 fd       	sbrc	r21, 7
    10c4:	05 d0       	rcall	.+10     	; 0x10d0 <__divmodsi4_neg2>
    10c6:	37 d0       	rcall	.+110    	; 0x1136 <__udivmodsi4>
    10c8:	07 fc       	sbrc	r0, 7
    10ca:	02 d0       	rcall	.+4      	; 0x10d0 <__divmodsi4_neg2>
    10cc:	46 f4       	brtc	.+16     	; 0x10de <__divmodsi4_exit>
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <__negsi2>

000010d0 <__divmodsi4_neg2>:
    10d0:	50 95       	com	r21
    10d2:	40 95       	com	r20
    10d4:	30 95       	com	r19
    10d6:	21 95       	neg	r18
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	4f 4f       	sbci	r20, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255

000010de <__divmodsi4_exit>:
    10de:	08 95       	ret

000010e0 <__negsi2>:
    10e0:	90 95       	com	r25
    10e2:	80 95       	com	r24
    10e4:	70 95       	com	r23
    10e6:	61 95       	neg	r22
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <__tablejump2__>:
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	00 24       	eor	r0, r0
    10f6:	00 1c       	adc	r0, r0
    10f8:	0b be       	out	0x3b, r0	; 59
    10fa:	07 90       	elpm	r0, Z+
    10fc:	f6 91       	elpm	r31, Z
    10fe:	e0 2d       	mov	r30, r0
    1100:	09 94       	ijmp

00001102 <__mulshisi3>:
    1102:	b7 ff       	sbrs	r27, 7
    1104:	3a c0       	rjmp	.+116    	; 0x117a <__muluhisi3>

00001106 <__mulohisi3>:
    1106:	39 d0       	rcall	.+114    	; 0x117a <__muluhisi3>
    1108:	82 1b       	sub	r24, r18
    110a:	93 0b       	sbc	r25, r19
    110c:	08 95       	ret

0000110e <__udivmodhi4>:
    110e:	aa 1b       	sub	r26, r26
    1110:	bb 1b       	sub	r27, r27
    1112:	51 e1       	ldi	r21, 0x11	; 17
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <__udivmodhi4_ep>

00001116 <__udivmodhi4_loop>:
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	a6 17       	cp	r26, r22
    111c:	b7 07       	cpc	r27, r23
    111e:	10 f0       	brcs	.+4      	; 0x1124 <__udivmodhi4_ep>
    1120:	a6 1b       	sub	r26, r22
    1122:	b7 0b       	sbc	r27, r23

00001124 <__udivmodhi4_ep>:
    1124:	88 1f       	adc	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	5a 95       	dec	r21
    112a:	a9 f7       	brne	.-22     	; 0x1116 <__udivmodhi4_loop>
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	08 95       	ret

00001136 <__udivmodsi4>:
    1136:	a1 e2       	ldi	r26, 0x21	; 33
    1138:	1a 2e       	mov	r1, r26
    113a:	aa 1b       	sub	r26, r26
    113c:	bb 1b       	sub	r27, r27
    113e:	fd 01       	movw	r30, r26
    1140:	0d c0       	rjmp	.+26     	; 0x115c <__udivmodsi4_ep>

00001142 <__udivmodsi4_loop>:
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	ee 1f       	adc	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	a2 17       	cp	r26, r18
    114c:	b3 07       	cpc	r27, r19
    114e:	e4 07       	cpc	r30, r20
    1150:	f5 07       	cpc	r31, r21
    1152:	20 f0       	brcs	.+8      	; 0x115c <__udivmodsi4_ep>
    1154:	a2 1b       	sub	r26, r18
    1156:	b3 0b       	sbc	r27, r19
    1158:	e4 0b       	sbc	r30, r20
    115a:	f5 0b       	sbc	r31, r21

0000115c <__udivmodsi4_ep>:
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	1a 94       	dec	r1
    1166:	69 f7       	brne	.-38     	; 0x1142 <__udivmodsi4_loop>
    1168:	60 95       	com	r22
    116a:	70 95       	com	r23
    116c:	80 95       	com	r24
    116e:	90 95       	com	r25
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	bd 01       	movw	r22, r26
    1176:	cf 01       	movw	r24, r30
    1178:	08 95       	ret

0000117a <__muluhisi3>:
    117a:	09 d0       	rcall	.+18     	; 0x118e <__umulhisi3>
    117c:	a5 9f       	mul	r26, r21
    117e:	90 0d       	add	r25, r0
    1180:	b4 9f       	mul	r27, r20
    1182:	90 0d       	add	r25, r0
    1184:	a4 9f       	mul	r26, r20
    1186:	80 0d       	add	r24, r0
    1188:	91 1d       	adc	r25, r1
    118a:	11 24       	eor	r1, r1
    118c:	08 95       	ret

0000118e <__umulhisi3>:
    118e:	a2 9f       	mul	r26, r18
    1190:	b0 01       	movw	r22, r0
    1192:	b3 9f       	mul	r27, r19
    1194:	c0 01       	movw	r24, r0
    1196:	a3 9f       	mul	r26, r19
    1198:	70 0d       	add	r23, r0
    119a:	81 1d       	adc	r24, r1
    119c:	11 24       	eor	r1, r1
    119e:	91 1d       	adc	r25, r1
    11a0:	b2 9f       	mul	r27, r18
    11a2:	70 0d       	add	r23, r0
    11a4:	81 1d       	adc	r24, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	91 1d       	adc	r25, r1
    11aa:	08 95       	ret

000011ac <_exit>:
    11ac:	f8 94       	cli

000011ae <__stop_program>:
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <__stop_program>
