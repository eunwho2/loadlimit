
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001b30  00001bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800128  00800128  00001bec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002474  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f03  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b9a  00000000  00000000  0000519b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00006d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000964  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001954  00000000  00000000  00007bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
       2:	00 00       	nop
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__vector_10>
      2a:	00 00       	nop
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
      54:	7d c2       	rjmp	.+1274   	; 0x550 <__vector_21>
      56:	00 00       	nop
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_30>
      7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb 00       	.word	0x00fb	; ????
      8e:	00 01       	movw	r0, r0
      90:	05 01       	movw	r0, r10
      92:	0a 01       	movw	r0, r20
      94:	0f 01       	movw	r0, r30
      96:	14 01       	movw	r2, r8
      98:	19 01       	movw	r2, r18
      9a:	27 01       	movw	r4, r14
      9c:	1e 01       	movw	r2, r28
      9e:	23 01       	movw	r4, r6
      a0:	fa 07       	cpc	r31, r26
      a2:	22 08       	sbc	r2, r2
      a4:	2f 08       	sbc	r2, r15
      a6:	3c 08       	sbc	r3, r12
      a8:	68 08       	sbc	r6, r8
      aa:	77 08       	sbc	r7, r7
      ac:	86 08       	sbc	r8, r6
      ae:	95 08       	sbc	r9, r5
      b0:	8c 09       	sbc	r24, r12
      b2:	a0 09       	sbc	r26, r0
      b4:	b4 09       	sbc	r27, r4
      b6:	c5 09       	sbc	r28, r5
      b8:	d7 09       	sbc	r29, r7
      ba:	e6 09       	sbc	r30, r6
      bc:	fa 09       	sbc	r31, r10
      be:	0b 0a       	sbc	r0, r27

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e1       	ldi	r29, 0x10	; 16
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e0 e3       	ldi	r30, 0x30	; 48
      d4:	fb e1       	ldi	r31, 0x1B	; 27
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 32       	cpi	r26, 0x28	; 40
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	a8 e2       	ldi	r26, 0x28	; 40
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a2 3d       	cpi	r26, 0xD2	; 210
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	e4 d6       	rcall	.+3528   	; 0xec0 <main>
      f8:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <_exit>

000000fc <__bad_interrupt>:
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <at93c46_ewen>:
#include "extern.h"

#define DELAY_SPI	10
void at93c46_ewen(void)
{
	cbi(PORTB,CS);
      fe:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	8f b9       	out	0x0f, r24	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	8f e3       	ldi	r24, 0x3F	; 63
     106:	9c e9       	ldi	r25, 0x9C	; 156
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <at93c46_ewen+0xa>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <at93c46_ewen+0x10>
     10e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     110:	80 e6       	ldi	r24, 0x60	; 96
     112:	8f b9       	out	0x0f, r24	; 15
     114:	8f e3       	ldi	r24, 0x3F	; 63
     116:	9c e9       	ldi	r25, 0x9C	; 156
     118:	01 97       	sbiw	r24, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <at93c46_ewen+0x1a>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <at93c46_ewen+0x20>
     11e:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     120:	c0 9a       	sbi	0x18, 0	; 24
     122:	08 95       	ret

00000124 <at93c46_ewds>:
}

void at93c46_ewds(void)
{
	cbi(PORTB,CS);
     124:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	8f b9       	out	0x0f, r24	; 15
     12a:	8f e3       	ldi	r24, 0x3F	; 63
     12c:	9c e9       	ldi	r25, 0x9C	; 156
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <at93c46_ewds+0xa>
     132:	00 c0       	rjmp	.+0      	; 0x134 <at93c46_ewds+0x10>
     134:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x60;
     136:	80 e6       	ldi	r24, 0x60	; 96
     138:	8f b9       	out	0x0f, r24	; 15
     13a:	8f e3       	ldi	r24, 0x3F	; 63
     13c:	9c e9       	ldi	r25, 0x9C	; 156
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <at93c46_ewds+0x1a>
     142:	00 c0       	rjmp	.+0      	; 0x144 <at93c46_ewds+0x20>
     144:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB,CS);
     146:	c0 9a       	sbi	0x18, 0	; 24
     148:	08 95       	ret

0000014a <at93c46_read>:
}
uint8_t at93c46_read(uint8_t addr)
{
	uint8_t high, low;
	
	cbi(PORTB, CS);
     14a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x03;
     14c:	93 e0       	ldi	r25, 0x03	; 3
     14e:	9f b9       	out	0x0f, r25	; 15
     150:	ef e3       	ldi	r30, 0x3F	; 63
     152:	fc e9       	ldi	r31, 0x9C	; 156
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <at93c46_read+0xa>
     158:	00 c0       	rjmp	.+0      	; 0x15a <at93c46_read+0x10>
     15a:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr;
     15c:	8f b9       	out	0x0f, r24	; 15
     15e:	8f e3       	ldi	r24, 0x3F	; 63
     160:	9c e9       	ldi	r25, 0x9C	; 156
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <at93c46_read+0x18>
     166:	00 c0       	rjmp	.+0      	; 0x168 <at93c46_read+0x1e>
     168:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = 0x00;
     16a:	1f b8       	out	0x0f, r1	; 15
     16c:	ef e3       	ldi	r30, 0x3F	; 63
     16e:	fc e9       	ldi	r31, 0x9C	; 156
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <at93c46_read+0x26>
     174:	00 c0       	rjmp	.+0      	; 0x176 <at93c46_read+0x2c>
     176:	00 00       	nop
	_delay_ms(DELAY_SPI);
	high = SPDR;
     178:	2f b1       	in	r18, 0x0f	; 15
	SPDR = 0x00;
     17a:	1f b8       	out	0x0f, r1	; 15
     17c:	8f e3       	ldi	r24, 0x3F	; 63
     17e:	9c e9       	ldi	r25, 0x9C	; 156
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <at93c46_read+0x36>
     184:	00 c0       	rjmp	.+0      	; 0x186 <at93c46_read+0x3c>
     186:	00 00       	nop
	_delay_ms(DELAY_SPI);
	low = SPDR;
     188:	9f b1       	in	r25, 0x0f	; 15
	sbi(PORTB, CS);
     18a:	c0 9a       	sbi	0x18, 0	; 24
	return (high << 1) + (low >> 7);
     18c:	22 0f       	add	r18, r18
     18e:	89 2f       	mov	r24, r25
     190:	88 1f       	adc	r24, r24
     192:	88 27       	eor	r24, r24
     194:	88 1f       	adc	r24, r24
}
     196:	82 0f       	add	r24, r18
     198:	08 95       	ret

0000019a <at93c46_write>:

void at93c46_write(uint8_t addr, uint8_t dat)
{
	cbi(PORTB, CS);
     19a:	c0 98       	cbi	0x18, 0	; 24
	SPDR = 0x02;
     19c:	92 e0       	ldi	r25, 0x02	; 2
     19e:	9f b9       	out	0x0f, r25	; 15
     1a0:	ef e3       	ldi	r30, 0x3F	; 63
     1a2:	fc e9       	ldi	r31, 0x9C	; 156
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <at93c46_write+0xa>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <at93c46_write+0x10>
     1aa:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = addr | 0x80;
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	8f b9       	out	0x0f, r24	; 15
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	9c e9       	ldi	r25, 0x9C	; 156
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <at93c46_write+0x1a>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <at93c46_write+0x20>
     1ba:	00 00       	nop
	_delay_ms(DELAY_SPI);
	SPDR = dat;
     1bc:	6f b9       	out	0x0f, r22	; 15
     1be:	ef e3       	ldi	r30, 0x3F	; 63
     1c0:	fc e9       	ldi	r31, 0x9C	; 156
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <at93c46_write+0x28>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <at93c46_write+0x2e>
     1c8:	00 00       	nop
	_delay_ms(DELAY_SPI);
	sbi(PORTB, CS);
     1ca:	c0 9a       	sbi	0x18, 0	; 24
     1cc:	8f ed       	ldi	r24, 0xDF	; 223
     1ce:	9e e2       	ldi	r25, 0x2E	; 46
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <at93c46_write+0x36>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <at93c46_write+0x3c>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <saveCode>:
	_delay_ms(3);
}

int16_t saveCode(int codeNo,int16_t codeData)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
     1e4:	eb 01       	movw	r28, r22
	uint8_t tmpSPI1,tmpSPI2;
	uint8_t tmpData1,tmpData2;

	switch(codeNo){
     1e6:	8a 30       	cpi	r24, 0x0A	; 10
     1e8:	91 05       	cpc	r25, r1
     1ea:	88 f5       	brcc	.+98     	; 0x24e <saveCode+0x74>
     1ec:	fc 01       	movw	r30, r24
     1ee:	ea 5b       	subi	r30, 0xBA	; 186
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__tablejump2__>
		case 0: codePoint		= codeData; break;
     1f6:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <codePoint+0x1>
     1fa:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <codePoint>
     1fe:	27 c0       	rjmp	.+78     	; 0x24e <saveCode+0x74>
		case 1: codeFilt		= codeData; break;
     200:	70 93 aa 01 	sts	0x01AA, r23	; 0x8001aa <codeFilt+0x1>
     204:	60 93 a9 01 	sts	0x01A9, r22	; 0x8001a9 <codeFilt>
     208:	22 c0       	rjmp	.+68     	; 0x24e <saveCode+0x74>
		case 2: codeDivision	= codeData; break;
     20a:	70 93 9e 01 	sts	0x019E, r23	; 0x80019e <codeDivision+0x1>
     20e:	60 93 9d 01 	sts	0x019D, r22	; 0x80019d <codeDivision>
     212:	1d c0       	rjmp	.+58     	; 0x24e <saveCode+0x74>
		case 3: codeAutoZero	= codeData; break;
     214:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <codeAutoZero+0x1>
     218:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <codeAutoZero>
     21c:	18 c0       	rjmp	.+48     	; 0x24e <saveCode+0x74>
		case 4: codeAlarm		= codeData; break;
     21e:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <codeAlarm+0x1>
     222:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <codeAlarm>
     226:	13 c0       	rjmp	.+38     	; 0x24e <saveCode+0x74>
		case 5: codeOver		= codeData; break;
     228:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <codeOver+0x1>
     22c:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <codeOver>
     230:	0e c0       	rjmp	.+28     	; 0x24e <saveCode+0x74>
		case 6: codeWeight		= codeData; break;
     232:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <codeWeight+0x1>
     236:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <codeWeight>
     23a:	09 c0       	rjmp	.+18     	; 0x24e <saveCode+0x74>
		case 8: codeAdcSpan		= codeData; break;
     23c:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <codeAdcSpan+0x1>
     240:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <codeAdcSpan>
     244:	04 c0       	rjmp	.+8      	; 0x24e <saveCode+0x74>
		case 9: codeAdcZero		= codeData; break;
     246:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <codeAdcZero+0x1>
     24a:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <codeAdcZero>
	
//	initCodeData();
	tmpData1 = (uint8_t)(codeData >> 8 );
	tmpData2 = (uint8_t)(codeData % 256);
	
	at93c46_ewen();	
     24e:	57 df       	rcall	.-338    	; 0xfe <at93c46_ewen>
	at93c46_write(codeNo * 2, tmpData1);
     250:	00 0f       	add	r16, r16
     252:	6d 2f       	mov	r22, r29
     254:	80 2f       	mov	r24, r16
     256:	a1 df       	rcall	.-190    	; 0x19a <at93c46_write>
	at93c46_write(codeNo * 2+1, tmpData2);
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	10 0f       	add	r17, r16
     25c:	be 01       	movw	r22, r28
     25e:	70 78       	andi	r23, 0x80	; 128
     260:	77 23       	and	r23, r23
     262:	2c f4       	brge	.+10     	; 0x26e <saveCode+0x94>
     264:	61 50       	subi	r22, 0x01	; 1
     266:	71 09       	sbc	r23, r1
     268:	7f 6f       	ori	r23, 0xFF	; 255
     26a:	6f 5f       	subi	r22, 0xFF	; 255
     26c:	7f 4f       	sbci	r23, 0xFF	; 255
     26e:	81 2f       	mov	r24, r17
	at93c46_ewds();
     270:	94 df       	rcall	.-216    	; 0x19a <at93c46_write>
     272:	58 df       	rcall	.-336    	; 0x124 <at93c46_ewds>
		
	tmpSPI1 = at93c46_read(codeNo * 2    );
     274:	80 2f       	mov	r24, r16
     276:	69 df       	rcall	.-302    	; 0x14a <at93c46_read>
     278:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     27a:	81 2f       	mov	r24, r17
     27c:	66 df       	rcall	.-308    	; 0x14a <at93c46_read>
     27e:	2c 2f       	mov	r18, r28
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	32 2f       	mov	r19, r18
     284:	22 27       	eor	r18, r18
     286:	a9 01       	movw	r20, r18
}
     288:	48 0f       	add	r20, r24
     28a:	51 1d       	adc	r21, r1
     28c:	ca 01       	movw	r24, r20
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <readCode>:
     298:	cf 93       	push	r28

int16_t readCode(int codeNo)
{
     29a:	df 93       	push	r29
	uint8_t tmpSPI1,tmpSPI2;

	tmpSPI1 = at93c46_read(codeNo * 2    );
     29c:	d8 2f       	mov	r29, r24
     29e:	dd 0f       	add	r29, r29
     2a0:	8d 2f       	mov	r24, r29
     2a2:	53 df       	rcall	.-346    	; 0x14a <at93c46_read>
     2a4:	c8 2f       	mov	r28, r24
	tmpSPI2 = at93c46_read(codeNo * 2 +1 );
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	8d 0f       	add	r24, r29
     2aa:	4f df       	rcall	.-354    	; 0x14a <at93c46_read>
	return ( tmpSPI1 * 256 + tmpSPI2 );	
     2ac:	2c 2f       	mov	r18, r28
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	32 2f       	mov	r19, r18
     2b2:	22 27       	eor	r18, r18
}
     2b4:	a9 01       	movw	r20, r18
     2b6:	48 0f       	add	r20, r24
     2b8:	51 1d       	adc	r21, r1
     2ba:	ca 01       	movw	r24, r20
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <readRomData>:

int readRomData(void)
{	

	codePoint = readCode(0);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	e8 df       	rcall	.-48     	; 0x298 <readCode>
     2c8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <codePoint+0x1>
     2cc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <codePoint>
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     2d0:	03 97       	sbiw	r24, 0x03	; 3
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <readRomData+0x14>
     2d4:	53 c0       	rjmp	.+166    	; 0x37c <readRomData+0xba>
	
	codeFilt		= readCode(1);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	de df       	rcall	.-68     	; 0x298 <readCode>
     2dc:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <codeFilt+0x1>
     2e0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <codeFilt>
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     2e4:	0a 97       	sbiw	r24, 0x0a	; 10
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <readRomData+0x28>
     2e8:	4c c0       	rjmp	.+152    	; 0x382 <readRomData+0xc0>

	codeDivision	= readCode(2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	d4 df       	rcall	.-88     	; 0x298 <readCode>
     2f0:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <codeDivision+0x1>
     2f4:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <codeDivision>
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     2f8:	06 97       	sbiw	r24, 0x06	; 6
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <readRomData+0x3c>

	codeAutoZero	= readCode(3);
     2fc:	45 c0       	rjmp	.+138    	; 0x388 <readRomData+0xc6>
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	ca df       	rcall	.-108    	; 0x298 <readCode>
     304:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <codeAutoZero+0x1>
     308:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <codeAutoZero>
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     30c:	02 97       	sbiw	r24, 0x02	; 2
     30e:	08 f0       	brcs	.+2      	; 0x312 <readRomData+0x50>

	codeAlarm		= readCode(4);
     310:	3e c0       	rjmp	.+124    	; 0x38e <readRomData+0xcc>
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	c0 df       	rcall	.-128    	; 0x298 <readCode>
     318:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <codeAlarm+0x1>
     31c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <codeAlarm>
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	97 42       	sbci	r25, 0x27	; 39

	codeOver		= readCode(5);
     324:	b8 f5       	brcc	.+110    	; 0x394 <readRomData+0xd2>
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	b6 df       	rcall	.-148    	; 0x298 <readCode>
     32c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <codeOver+0x1>
     330:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <codeOver>
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     334:	80 31       	cpi	r24, 0x10	; 16
     336:	97 42       	sbci	r25, 0x27	; 39

	codeWeight		= readCode(6);
     338:	80 f5       	brcc	.+96     	; 0x39a <readRomData+0xd8>
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ac df       	rcall	.-168    	; 0x298 <readCode>
     340:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <codeWeight+0x1>
     344:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <codeWeight>
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	97 42       	sbci	r25, 0x27	; 39

	codeAdcSpan	= readCode(8);
     34c:	48 f5       	brcc	.+82     	; 0x3a0 <readRomData+0xde>
     34e:	88 e0       	ldi	r24, 0x08	; 8
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a2 df       	rcall	.-188    	; 0x298 <readCode>
     354:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <codeAdcSpan+0x1>
     358:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <codeAdcSpan>
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     35c:	80 31       	cpi	r24, 0x10	; 16
     35e:	97 42       	sbci	r25, 0x27	; 39

	codeAdcZero	= readCode(9);
     360:	10 f5       	brcc	.+68     	; 0x3a6 <readRomData+0xe4>
     362:	89 e0       	ldi	r24, 0x09	; 9
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	98 df       	rcall	.-208    	; 0x298 <readCode>
     368:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <codeAdcZero+0x1>
     36c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <codeAdcZero>
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     370:	80 31       	cpi	r24, 0x10	; 16
     372:	97 42       	sbci	r25, 0x27	; 39
     374:	d8 f4       	brcc	.+54     	; 0x3ac <readRomData+0xea>
	
	return -1;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	9f ef       	ldi	r25, 0xFF	; 255
     37a:	08 95       	ret

int readRomData(void)
{	

	codePoint = readCode(0);
	if( (codePoint < 0 ) || (codePoint > 2)) return ERR_CODE_0;
     37c:	86 e4       	ldi	r24, 0x46	; 70
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 95       	ret
	
	codeFilt		= readCode(1);
	if( (codeFilt < 0 ) || (codeFilt > 9)) return ERR_CODE_1;
     382:	87 e4       	ldi	r24, 0x47	; 71
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	08 95       	ret

	codeDivision	= readCode(2);
	if( (codeDivision < 0 ) || (codeDivision > 5)) return ERR_CODE_2;
     388:	88 e4       	ldi	r24, 0x48	; 72
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	08 95       	ret

	codeAutoZero	= readCode(3);
	if( (codeAutoZero < 0 ) || (codeAutoZero > 1)) return ERR_CODE_3;
     38e:	89 e4       	ldi	r24, 0x49	; 73
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret

	codeAlarm		= readCode(4);
	if( (codeAlarm < 0 ) || (codeAlarm > 9999 )) return ERR_CODE_4;
     394:	8a e4       	ldi	r24, 0x4A	; 74
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	08 95       	ret

	codeOver		= readCode(5);
	if( (codeOver < 0 ) || (codeOver > 9999)) return ERR_CODE_5;
     39a:	8b e4       	ldi	r24, 0x4B	; 75
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret

	codeWeight		= readCode(6);
	if( (codeWeight < 0 ) || (codeWeight > 9999)) return ERR_CODE_6;
     3a0:	8c e4       	ldi	r24, 0x4C	; 76
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

	codeAdcSpan	= readCode(8);
	if( (codeAdcSpan < 0 ) || (codeAdcSpan > 9999)) return ERR_CODE_8;
     3a6:	8e e4       	ldi	r24, 0x4E	; 78
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret

	codeAdcZero	= readCode(9);
	if( (codeAdcZero < 0 ) || (codeAdcZero > 9999)) return ERR_CODE_9;
     3ac:	8f e4       	ldi	r24, 0x4F	; 79
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	
	return -1;
}
     3b0:	08 95       	ret

000003b2 <elaspMsecTime>:
}

uint8_t getCommand(void)
{
	return getButton();
}
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	00 91 80 01 	lds	r16, 0x0180	; 0x800180 <timerCounter2>
     3c2:	10 91 81 01 	lds	r17, 0x0181	; 0x800181 <timerCounter2+0x1>
     3c6:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <timerCounter2+0x2>
     3ca:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <timerCounter2+0x3>
     3ce:	06 17       	cp	r16, r22
     3d0:	17 07       	cpc	r17, r23
     3d2:	28 07       	cpc	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	a8 f4       	brcc	.+42     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3d8:	00 91 80 01 	lds	r16, 0x0180	; 0x800180 <timerCounter2>
     3dc:	10 91 81 01 	lds	r17, 0x0181	; 0x800181 <timerCounter2+0x1>
     3e0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <timerCounter2+0x2>
     3e4:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <timerCounter2+0x3>
     3e8:	01 50       	subi	r16, 0x01	; 1
     3ea:	11 09       	sbc	r17, r1
     3ec:	21 09       	sbc	r18, r1
     3ee:	31 09       	sbc	r19, r1
     3f0:	68 01       	movw	r12, r16
     3f2:	79 01       	movw	r14, r18
     3f4:	c6 1a       	sub	r12, r22
     3f6:	d7 0a       	sbc	r13, r23
     3f8:	e8 0a       	sbc	r14, r24
     3fa:	f9 0a       	sbc	r15, r25
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	10 c0       	rjmp	.+32     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     402:	00 91 80 01 	lds	r16, 0x0180	; 0x800180 <timerCounter2>
     406:	10 91 81 01 	lds	r17, 0x0181	; 0x800181 <timerCounter2+0x1>
     40a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <timerCounter2+0x2>
     40e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <timerCounter2+0x3>
     412:	68 01       	movw	r12, r16
     414:	79 01       	movw	r14, r18
     416:	c6 1a       	sub	r12, r22
     418:	d7 0a       	sbc	r13, r23
     41a:	e8 0a       	sbc	r14, r24
     41c:	f9 0a       	sbc	r15, r25
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <__vector_10>:
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	0b b6       	in	r0, 0x3b	; 59
     43c:	0f 92       	push	r0
     43e:	2f 93       	push	r18
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	bf 93       	push	r27
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
     44c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerCounter2>
     450:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerCounter2+0x1>
     454:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <timerCounter2+0x2>
     458:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <timerCounter2+0x3>
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	a1 1d       	adc	r26, r1
     460:	b1 1d       	adc	r27, r1
     462:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <timerCounter2>
     466:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <timerCounter2+0x1>
     46a:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <timerCounter2+0x2>
     46e:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <timerCounter2+0x3>
     472:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <blinkCount.1887>
     476:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <blinkCount.1887+0x1>
     47a:	81 39       	cpi	r24, 0x91	; 145
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	92 07       	cpc	r25, r18
     480:	08 f0       	brcs	.+2      	; 0x484 <__vector_10+0x54>
     482:	4e c0       	rjmp	.+156    	; 0x520 <__vector_10+0xf0>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <blinkCount.1887+0x1>
     48a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <blinkCount.1887>
     48e:	89 2b       	or	r24, r25
     490:	39 f4       	brne	.+14     	; 0x4a0 <__vector_10+0x70>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <blinkFlagState.1888>
     498:	91 11       	cpse	r25, r1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <blinkFlagState.1888>
     4a0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fndDigitCount.1886>
     4a4:	83 30       	cpi	r24, 0x03	; 3
     4a6:	10 f4       	brcc	.+4      	; 0x4ac <__vector_10+0x7c>
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__vector_10+0x7e>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fndDigitCount.1886>
     4b2:	e8 2f       	mov	r30, r24
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	eb 55       	subi	r30, 0x5B	; 91
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	90 81       	ld	r25, Z
     4bc:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <blinkFlagState.1888>
     4c0:	22 23       	and	r18, r18
     4c2:	01 f1       	breq	.+64     	; 0x504 <__vector_10+0xd4>
     4c4:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <blinkCmdFlag>
     4c8:	27 30       	cpi	r18, 0x07	; 7
     4ca:	a9 f0       	breq	.+42     	; 0x4f6 <__vector_10+0xc6>
     4cc:	81 11       	cpse	r24, r1
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <__vector_10+0xa6>
     4d0:	21 30       	cpi	r18, 0x01	; 1
     4d2:	c1 f4       	brne	.+48     	; 0x504 <__vector_10+0xd4>
     4d4:	12 c0       	rjmp	.+36     	; 0x4fa <__vector_10+0xca>
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <__vector_10+0xb0>
     4da:	22 30       	cpi	r18, 0x02	; 2
     4dc:	99 f4       	brne	.+38     	; 0x504 <__vector_10+0xd4>
     4de:	0f c0       	rjmp	.+30     	; 0x4fe <__vector_10+0xce>
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	19 f4       	brne	.+6      	; 0x4ea <__vector_10+0xba>
     4e4:	24 30       	cpi	r18, 0x04	; 4
     4e6:	71 f4       	brne	.+28     	; 0x504 <__vector_10+0xd4>
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <__vector_10+0xd2>
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	59 f4       	brne	.+22     	; 0x504 <__vector_10+0xd4>
     4ee:	28 30       	cpi	r18, 0x08	; 8
     4f0:	49 f4       	brne	.+18     	; 0x504 <__vector_10+0xd4>
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <__vector_10+0xd4>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <__vector_10+0xd4>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <__vector_10+0xd4>
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 c0       	rjmp	.+2      	; 0x504 <__vector_10+0xd4>
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	8b b3       	in	r24, 0x1b	; 27
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	8b bb       	out	0x1b, r24	; 27
     50a:	2b b3       	in	r18, 0x1b	; 27
     50c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <fndDigitCount.1886>
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	e0 50       	subi	r30, 0x00	; 0
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	80 81       	ld	r24, Z
     518:	82 2b       	or	r24, r18
     51a:	8b bb       	out	0x1b, r24	; 27
     51c:	95 bb       	out	0x15, r25	; 21
     51e:	05 c0       	rjmp	.+10     	; 0x52a <__vector_10+0xfa>
     520:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <blinkCount.1887+0x1>
     524:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <blinkCount.1887>
     528:	b4 cf       	rjmp	.-152    	; 0x492 <__vector_10+0x62>
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0b be       	out	0x3b, r0	; 59
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <initADC>:
     546:	80 e4       	ldi	r24, 0x40	; 64
     548:	87 b9       	out	0x07, r24	; 7
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	86 b9       	out	0x06, r24	; 6
     54e:	08 95       	ret

00000550 <__vector_21>:
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	0b b6       	in	r0, 0x3b	; 59
     55c:	0f 92       	push	r0
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
     572:	24 b1       	in	r18, 0x04	; 4
     574:	85 b1       	in	r24, 0x05	; 5
     576:	83 70       	andi	r24, 0x03	; 3
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	98 2f       	mov	r25, r24
     57c:	88 27       	eor	r24, r24
     57e:	82 0f       	add	r24, r18
     580:	91 1d       	adc	r25, r1
     582:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <testjk+0x1>
     586:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <testjk>
     58a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <adcRingCount.1898>
     58e:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <adcRingCount.1898+0x1>
     592:	fa 01       	movw	r30, r20
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	ea 5b       	subi	r30, 0xBA	; 186
     59a:	fe 4f       	sbci	r31, 0xFE	; 254
     59c:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <adcWeight>
     5a0:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <adcWeight+0x1>
     5a4:	60 81       	ld	r22, Z
     5a6:	71 81       	ldd	r23, Z+1	; 0x01
     5a8:	26 1b       	sub	r18, r22
     5aa:	37 0b       	sbc	r19, r23
     5ac:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <adcWeightIn>
     5b0:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <adcWeightIn+0x1>
     5b4:	71 83       	std	Z+1, r23	; 0x01
     5b6:	60 83       	st	Z, r22
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <adcWeight+0x1>
     5c0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <adcWeight>
     5c4:	4f 30       	cpi	r20, 0x0F	; 15
     5c6:	51 05       	cpc	r21, r1
     5c8:	1c f4       	brge	.+6      	; 0x5d0 <__vector_21+0x80>
     5ca:	4f 5f       	subi	r20, 0xFF	; 255
     5cc:	5f 4f       	sbci	r21, 0xFF	; 255
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__vector_21+0x84>
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <adcRingCount.1898+0x1>
     5d8:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <adcRingCount.1898>
     5dc:	9c 01       	movw	r18, r24
     5de:	99 23       	and	r25, r25
     5e0:	14 f4       	brge	.+4      	; 0x5e6 <__vector_21+0x96>
     5e2:	21 5f       	subi	r18, 0xF1	; 241
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	35 95       	asr	r19
     5e8:	27 95       	ror	r18
     5ea:	35 95       	asr	r19
     5ec:	27 95       	ror	r18
     5ee:	35 95       	asr	r19
     5f0:	27 95       	ror	r18
     5f2:	35 95       	asr	r19
     5f4:	27 95       	ror	r18
     5f6:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <adcWeightIn+0x1>
     5fa:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <adcWeightIn>
     5fe:	36 9a       	sbi	0x06, 6	; 6
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	9f 91       	pop	r25
     606:	8f 91       	pop	r24
     608:	7f 91       	pop	r23
     60a:	6f 91       	pop	r22
     60c:	5f 91       	pop	r21
     60e:	4f 91       	pop	r20
     610:	3f 91       	pop	r19
     612:	2f 91       	pop	r18
     614:	0f 90       	pop	r0
     616:	0b be       	out	0x3b, r0	; 59
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <getButton>:
     622:	86 b3       	in	r24, 0x16	; 22
     624:	8f 60       	ori	r24, 0x0F	; 15
     626:	8f 3f       	cpi	r24, 0xFF	; 255
     628:	c1 f0       	breq	.+48     	; 0x65a <getButton+0x38>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	39 ef       	ldi	r19, 0xF9	; 249
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	21 50       	subi	r18, 0x01	; 1
     632:	30 40       	sbci	r19, 0x00	; 0
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <getButton+0xe>
     638:	00 c0       	rjmp	.+0      	; 0x63a <getButton+0x18>
     63a:	00 00       	nop
     63c:	86 b3       	in	r24, 0x16	; 22
     63e:	8f 60       	ori	r24, 0x0F	; 15
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	59 f0       	breq	.+22     	; 0x65a <getButton+0x38>
     644:	86 b3       	in	r24, 0x16	; 22
     646:	8f 60       	ori	r24, 0x0F	; 15
     648:	9f ef       	ldi	r25, 0xFF	; 255
     64a:	21 ee       	ldi	r18, 0xE1	; 225
     64c:	34 e0       	ldi	r19, 0x04	; 4
     64e:	91 50       	subi	r25, 0x01	; 1
     650:	20 40       	sbci	r18, 0x00	; 0
     652:	30 40       	sbci	r19, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <getButton+0x2c>
     656:	00 c0       	rjmp	.+0      	; 0x658 <getButton+0x36>
     658:	00 00       	nop
     65a:	08 95       	ret

0000065c <displayWeight>:

uint8_t tmpDigit[4];

void displayWeight(int16_t weightIn)
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     66a:	99 23       	and	r25, r25
     66c:	0c f0       	brlt	.+2      	; 0x670 <displayWeight+0x14>
     66e:	4a c0       	rjmp	.+148    	; 0x704 <displayWeight+0xa8>
		tmpWeight = -weightIn;
     670:	31 95       	neg	r19
     672:	21 95       	neg	r18
     674:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){ 
     676:	27 3e       	cpi	r18, 0xE7	; 231
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	38 07       	cpc	r19, r24
     67c:	4c f0       	brlt	.+18     	; 0x690 <displayWeight+0x34>
			tmpDigit[3] = 0x40;
     67e:	eb eb       	ldi	r30, 0xBB	; 187
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	80 e4       	ldi	r24, 0x40	; 64
     684:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     686:	87 e6       	ldi	r24, 0x67	; 103
     688:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     68a:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     68c:	80 83       	st	Z, r24
     68e:	2c c0       	rjmp	.+88     	; 0x6e8 <displayWeight+0x8c>
		
		} else {
			tmpDigit[3] = 0x40;
     690:	eb eb       	ldi	r30, 0xBB	; 187
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	80 e4       	ldi	r24, 0x40	; 64
     696:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     698:	c9 01       	movw	r24, r18
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     6a2:	7b 01       	movw	r14, r22
     6a4:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     6a6:	0a e0       	ldi	r16, 0x0A	; 10
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	b8 01       	movw	r22, r16
     6ac:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     6b0:	eb 01       	movw	r28, r22
     6b2:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     6b4:	c9 01       	movw	r24, r18
     6b6:	b8 01       	movw	r22, r16
     6b8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     6bc:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     6be:	25 ea       	ldi	r18, 0xA5	; 165
     6c0:	31 e0       	ldi	r19, 0x01	; 1
     6c2:	99 27       	eor	r25, r25
     6c4:	dc 01       	movw	r26, r24
     6c6:	ac 5f       	subi	r26, 0xFC	; 252
     6c8:	be 4f       	sbci	r27, 0xFE	; 254
     6ca:	8c 91       	ld	r24, X
     6cc:	f9 01       	movw	r30, r18
     6ce:	80 83       	st	Z, r24
     6d0:	dd 27       	eor	r29, r29
     6d2:	cc 5f       	subi	r28, 0xFC	; 252
     6d4:	de 4f       	sbci	r29, 0xFE	; 254
     6d6:	88 81       	ld	r24, Y
     6d8:	81 83       	std	Z+1, r24	; 0x01
     6da:	f7 01       	movw	r30, r14
     6dc:	ff 27       	eor	r31, r31
     6de:	ec 5f       	subi	r30, 0xFC	; 252
     6e0:	fe 4f       	sbci	r31, 0xFE	; 254
     6e2:	80 81       	ld	r24, Z
     6e4:	f9 01       	movw	r30, r18
     6e6:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     6e8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     6ec:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <displayWeight+0x9a>
     6f4:	86 c0       	rjmp	.+268    	; 0x802 <displayWeight+0x1a6>
     6f6:	fc 01       	movw	r30, r24
     6f8:	eb 55       	subi	r30, 0x5B	; 91
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	80 81       	ld	r24, Z
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	80 83       	st	Z, r24
     702:	7f c0       	rjmp	.+254    	; 0x802 <displayWeight+0x1a6>
		return;
	}

	if(weightIn > 9999 ){
     704:	80 31       	cpi	r24, 0x10	; 16
     706:	f7 e2       	ldi	r31, 0x27	; 39
     708:	9f 07       	cpc	r25, r31
     70a:	44 f0       	brlt	.+16     	; 0x71c <displayWeight+0xc0>
		tmpDigit[3] = 9;
     70c:	eb eb       	ldi	r30, 0xBB	; 187
     70e:	f1 e0       	ldi	r31, 0x01	; 1
     710:	89 e0       	ldi	r24, 0x09	; 9
     712:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     714:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     716:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;		
     718:	80 83       	st	Z, r24
     71a:	5d c0       	rjmp	.+186    	; 0x7d6 <displayWeight+0x17a>
	} else {
		tmpDigit[3] = weightIn/ 1000;
     71c:	eb eb       	ldi	r30, 0xBB	; 187
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	68 ee       	ldi	r22, 0xE8	; 232
     722:	73 e0       	ldi	r23, 0x03	; 3
     724:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     728:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     72a:	c4 e6       	ldi	r28, 0x64	; 100
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	be 01       	movw	r22, r28
     730:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     734:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     736:	c9 01       	movw	r24, r18
     738:	be 01       	movw	r22, r28
     73a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     73e:	ca e0       	ldi	r28, 0x0A	; 10
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	be 01       	movw	r22, r28
     744:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     748:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     74a:	c9 01       	movw	r24, r18
     74c:	be 01       	movw	r22, r28
     74e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     752:	80 83       	st	Z, r24
     754:	40 c0       	rjmp	.+128    	; 0x7d6 <displayWeight+0x17a>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     756:	ec 91       	ld	r30, X
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ec 5f       	subi	r30, 0xFC	; 252
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 81       	ld	r24, Z
     760:	8d 93       	st	X+, r24
     762:	a2 17       	cp	r26, r18
     764:	b3 07       	cpc	r27, r19
     766:	b9 f7       	brne	.-18     	; 0x756 <displayWeight+0xfa>
	
	if(codePoint <= 0 ){
     768:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     76c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     770:	18 16       	cp	r1, r24
     772:	19 06       	cpc	r1, r25
     774:	8c f0       	brlt	.+34     	; 0x798 <displayWeight+0x13c>
		if(tmpDigit[3] == fndTableNum[0] ) {
     776:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tmpDigit+0x3>
     77a:	8f 33       	cpi	r24, 0x3F	; 63
     77c:	89 f5       	brne	.+98     	; 0x7e0 <displayWeight+0x184>
			tmpDigit[3] = 0x00;
     77e:	eb eb       	ldi	r30, 0xBB	; 187
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] ) {
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	8f 33       	cpi	r24, 0x3F	; 63
     788:	59 f5       	brne	.+86     	; 0x7e0 <displayWeight+0x184>
				tmpDigit[2] = 0x00;
     78a:	12 82       	std	Z+2, r1	; 0x02
				if(tmpDigit[1] == fndTableNum[0] ) {
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	8f 33       	cpi	r24, 0x3F	; 63
     790:	39 f5       	brne	.+78     	; 0x7e0 <displayWeight+0x184>
					tmpDigit[1] = 0x00;
     792:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <tmpDigit+0x1>
     796:	24 c0       	rjmp	.+72     	; 0x7e0 <displayWeight+0x184>
				}
			}
		}
	}
	else if(codePoint == 1 ){
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	91 05       	cpc	r25, r1
     79c:	79 f4       	brne	.+30     	; 0x7bc <displayWeight+0x160>
		tmpDigit[1] |= 0x80;
     79e:	eb eb       	ldi	r30, 0xBB	; 187
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	80 68       	ori	r24, 0x80	; 128
     7a6:	81 83       	std	Z+1, r24	; 0x01
		if(tmpDigit[3] == fndTableNum[0] ) {
     7a8:	83 81       	ldd	r24, Z+3	; 0x03
     7aa:	8f 33       	cpi	r24, 0x3F	; 63
     7ac:	c9 f4       	brne	.+50     	; 0x7e0 <displayWeight+0x184>
			tmpDigit[3] = 0x00;
     7ae:	13 82       	std	Z+3, r1	; 0x03
			if(tmpDigit[2] == fndTableNum[0] )
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
     7b2:	8f 33       	cpi	r24, 0x3F	; 63
     7b4:	a9 f4       	brne	.+42     	; 0x7e0 <displayWeight+0x184>
				tmpDigit[2] = 0x00;
     7b6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <tmpDigit+0x2>
     7ba:	12 c0       	rjmp	.+36     	; 0x7e0 <displayWeight+0x184>
		}
	}
	else if(codePoint == 2 ){
     7bc:	02 97       	sbiw	r24, 0x02	; 2
     7be:	81 f4       	brne	.+32     	; 0x7e0 <displayWeight+0x184>
		tmpDigit[2] |= 0x80;
     7c0:	eb eb       	ldi	r30, 0xBB	; 187
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	82 81       	ldd	r24, Z+2	; 0x02
     7c6:	80 68       	ori	r24, 0x80	; 128
     7c8:	82 83       	std	Z+2, r24	; 0x02
		if(tmpDigit[3] == fndTableNum[0] ) {
     7ca:	83 81       	ldd	r24, Z+3	; 0x03
     7cc:	8f 33       	cpi	r24, 0x3F	; 63
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <displayWeight+0x184>
			tmpDigit[3] = 0x00;
     7d0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <tmpDigit+0x3>
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <displayWeight+0x184>
     7d6:	ab eb       	ldi	r26, 0xBB	; 187
     7d8:	b1 e0       	ldi	r27, 0x01	; 1
     7da:	2f eb       	ldi	r18, 0xBF	; 191
     7dc:	31 e0       	ldi	r19, 0x01	; 1
     7de:	bb cf       	rjmp	.-138    	; 0x756 <displayWeight+0xfa>
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     7e0:	e5 ea       	ldi	r30, 0xA5	; 165
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	ab eb       	ldi	r26, 0xBB	; 187
     7e6:	b1 e0       	ldi	r27, 0x01	; 1
     7e8:	8c 91       	ld	r24, X
     7ea:	80 83       	st	Z, r24
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	8c 91       	ld	r24, X
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	81 83       	std	Z+1, r24	; 0x01
     7f4:	12 96       	adiw	r26, 0x02	; 2
     7f6:	8c 91       	ld	r24, X
     7f8:	12 97       	sbiw	r26, 0x02	; 2
     7fa:	82 83       	std	Z+2, r24	; 0x02
     7fc:	13 96       	adiw	r26, 0x03	; 3
     7fe:	8c 91       	ld	r24, X
     800:	83 83       	std	Z+3, r24	; 0x03
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <displayWeight1>:

void displayWeight1(int16_t weightIn)
{
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     81e:	99 23       	and	r25, r25
     820:	0c f0       	brlt	.+2      	; 0x824 <displayWeight1+0x14>
     822:	4a c0       	rjmp	.+148    	; 0x8b8 <displayWeight1+0xa8>
		tmpWeight = -weightIn;
     824:	31 95       	neg	r19
     826:	21 95       	neg	r18
     828:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     82a:	27 3e       	cpi	r18, 0xE7	; 231
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	38 07       	cpc	r19, r24
     830:	4c f0       	brlt	.+18     	; 0x844 <displayWeight1+0x34>
			tmpDigit[3] = 0x40;
     832:	eb eb       	ldi	r30, 0xBB	; 187
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	80 e4       	ldi	r24, 0x40	; 64
     838:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     83a:	87 e6       	ldi	r24, 0x67	; 103
     83c:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     83e:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     840:	80 83       	st	Z, r24
     842:	2c c0       	rjmp	.+88     	; 0x89c <displayWeight1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     844:	eb eb       	ldi	r30, 0xBB	; 187
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	80 e4       	ldi	r24, 0x40	; 64
     84a:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     84c:	c9 01       	movw	r24, r18
     84e:	64 e6       	ldi	r22, 0x64	; 100
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     856:	7b 01       	movw	r14, r22
     858:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     85a:	0a e0       	ldi	r16, 0x0A	; 10
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	b8 01       	movw	r22, r16
     860:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     864:	eb 01       	movw	r28, r22
     866:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     868:	c9 01       	movw	r24, r18
     86a:	b8 01       	movw	r22, r16
     86c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     870:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     872:	25 ea       	ldi	r18, 0xA5	; 165
     874:	31 e0       	ldi	r19, 0x01	; 1
     876:	99 27       	eor	r25, r25
     878:	dc 01       	movw	r26, r24
     87a:	ac 5f       	subi	r26, 0xFC	; 252
     87c:	be 4f       	sbci	r27, 0xFE	; 254
     87e:	8c 91       	ld	r24, X
     880:	f9 01       	movw	r30, r18
     882:	80 83       	st	Z, r24
     884:	dd 27       	eor	r29, r29
     886:	cc 5f       	subi	r28, 0xFC	; 252
     888:	de 4f       	sbci	r29, 0xFE	; 254
     88a:	88 81       	ld	r24, Y
     88c:	81 83       	std	Z+1, r24	; 0x01
     88e:	f7 01       	movw	r30, r14
     890:	ff 27       	eor	r31, r31
     892:	ec 5f       	subi	r30, 0xFC	; 252
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	80 81       	ld	r24, Z
     898:	f9 01       	movw	r30, r18
     89a:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     89c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     8a0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	09 f4       	brne	.+2      	; 0x8aa <displayWeight1+0x9a>
     8a8:	64 c0       	rjmp	.+200    	; 0x972 <displayWeight1+0x162>
     8aa:	fc 01       	movw	r30, r24
     8ac:	eb 55       	subi	r30, 0x5B	; 91
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	80 81       	ld	r24, Z
     8b2:	80 68       	ori	r24, 0x80	; 128
     8b4:	80 83       	st	Z, r24
     8b6:	5d c0       	rjmp	.+186    	; 0x972 <displayWeight1+0x162>
		return;
	}

	if(weightIn > 9999 ){
     8b8:	80 31       	cpi	r24, 0x10	; 16
     8ba:	f7 e2       	ldi	r31, 0x27	; 39
     8bc:	9f 07       	cpc	r25, r31
     8be:	44 f0       	brlt	.+16     	; 0x8d0 <displayWeight1+0xc0>
		tmpDigit[3] = 9;
     8c0:	eb eb       	ldi	r30, 0xBB	; 187
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	89 e0       	ldi	r24, 0x09	; 9
     8c6:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     8c8:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     8ca:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     8cc:	80 83       	st	Z, r24
     8ce:	3b c0       	rjmp	.+118    	; 0x946 <displayWeight1+0x136>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     8d0:	eb eb       	ldi	r30, 0xBB	; 187
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	68 ee       	ldi	r22, 0xE8	; 232
     8d6:	73 e0       	ldi	r23, 0x03	; 3
     8d8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     8dc:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     8de:	c4 e6       	ldi	r28, 0x64	; 100
     8e0:	d0 e0       	ldi	r29, 0x00	; 0
     8e2:	be 01       	movw	r22, r28
     8e4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     8e8:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     8ea:	c9 01       	movw	r24, r18
     8ec:	be 01       	movw	r22, r28
     8ee:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     8f2:	ca e0       	ldi	r28, 0x0A	; 10
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
     8f6:	be 01       	movw	r22, r28
     8f8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     8fc:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     8fe:	c9 01       	movw	r24, r18
     900:	be 01       	movw	r22, r28
     902:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     906:	80 83       	st	Z, r24
     908:	1e c0       	rjmp	.+60     	; 0x946 <displayWeight1+0x136>
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     90a:	ec 91       	ld	r30, X
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	ec 5f       	subi	r30, 0xFC	; 252
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	80 81       	ld	r24, Z
     914:	8d 93       	st	X+, r24
     916:	a2 17       	cp	r26, r18
     918:	b3 07       	cpc	r27, r19
     91a:	b9 f7       	brne	.-18     	; 0x90a <displayWeight1+0xfa>
	
	if(codePoint == 1 )			tmpDigit[1] |= 0x80;
     91c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     920:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	91 05       	cpc	r25, r1
     928:	31 f4       	brne	.+12     	; 0x936 <displayWeight1+0x126>
     92a:	eb eb       	ldi	r30, 0xBB	; 187
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	80 68       	ori	r24, 0x80	; 128
     932:	81 83       	std	Z+1, r24	; 0x01
     934:	0d c0       	rjmp	.+26     	; 0x950 <displayWeight1+0x140>
	else if(codePoint == 2 )	tmpDigit[2] |= 0x80;
     936:	02 97       	sbiw	r24, 0x02	; 2
     938:	59 f4       	brne	.+22     	; 0x950 <displayWeight1+0x140>
     93a:	eb eb       	ldi	r30, 0xBB	; 187
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	82 81       	ldd	r24, Z+2	; 0x02
     940:	80 68       	ori	r24, 0x80	; 128
     942:	82 83       	std	Z+2, r24	; 0x02
     944:	05 c0       	rjmp	.+10     	; 0x950 <displayWeight1+0x140>
     946:	ab eb       	ldi	r26, 0xBB	; 187
     948:	b1 e0       	ldi	r27, 0x01	; 1
     94a:	2f eb       	ldi	r18, 0xBF	; 191
     94c:	31 e0       	ldi	r19, 0x01	; 1
     94e:	dd cf       	rjmp	.-70     	; 0x90a <displayWeight1+0xfa>

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     950:	e5 ea       	ldi	r30, 0xA5	; 165
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	ab eb       	ldi	r26, 0xBB	; 187
     956:	b1 e0       	ldi	r27, 0x01	; 1
     958:	8c 91       	ld	r24, X
     95a:	80 83       	st	Z, r24
     95c:	11 96       	adiw	r26, 0x01	; 1
     95e:	8c 91       	ld	r24, X
     960:	11 97       	sbiw	r26, 0x01	; 1
     962:	81 83       	std	Z+1, r24	; 0x01
     964:	12 96       	adiw	r26, 0x02	; 2
     966:	8c 91       	ld	r24, X
     968:	12 97       	sbiw	r26, 0x02	; 2
     96a:	82 83       	std	Z+2, r24	; 0x02
     96c:	13 96       	adiw	r26, 0x03	; 3
     96e:	8c 91       	ld	r24, X
     970:	83 83       	std	Z+3, r24	; 0x03
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	08 95       	ret

00000980 <displayNumber1>:

void displayNumber1(int16_t weightIn)
{
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	9c 01       	movw	r18, r24
	int i;
	int16_t tmpWeight;
	
	// display loadWeight
	if(weightIn < 0 ){
     98e:	99 23       	and	r25, r25
     990:	0c f0       	brlt	.+2      	; 0x994 <displayNumber1+0x14>
     992:	4a c0       	rjmp	.+148    	; 0xa28 <displayNumber1+0xa8>
		tmpWeight = -weightIn;
     994:	31 95       	neg	r19
     996:	21 95       	neg	r18
     998:	31 09       	sbc	r19, r1
		if(tmpWeight > 998 ){
     99a:	27 3e       	cpi	r18, 0xE7	; 231
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	38 07       	cpc	r19, r24
     9a0:	4c f0       	brlt	.+18     	; 0x9b4 <displayNumber1+0x34>
			tmpDigit[3] = 0x40;
     9a2:	eb eb       	ldi	r30, 0xBB	; 187
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	80 e4       	ldi	r24, 0x40	; 64
     9a8:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = fndTableNum[9];
     9aa:	87 e6       	ldi	r24, 0x67	; 103
     9ac:	82 83       	std	Z+2, r24	; 0x02
			tmpDigit[1] = fndTableNum[9];
     9ae:	81 83       	std	Z+1, r24	; 0x01
			tmpDigit[0] = fndTableNum[9];
     9b0:	80 83       	st	Z, r24
     9b2:	2c c0       	rjmp	.+88     	; 0xa0c <displayNumber1+0x8c>
			
			} else {
			tmpDigit[3] = 0x40;
     9b4:	eb eb       	ldi	r30, 0xBB	; 187
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	80 e4       	ldi	r24, 0x40	; 64
     9ba:	83 83       	std	Z+3, r24	; 0x03
			tmpDigit[2] = tmpWeight/100;
     9bc:	c9 01       	movw	r24, r18
     9be:	64 e6       	ldi	r22, 0x64	; 100
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     9c6:	7b 01       	movw	r14, r22
     9c8:	62 83       	std	Z+2, r22	; 0x02
			tmpDigit[1] = (tmpWeight%100)/10;
     9ca:	0a e0       	ldi	r16, 0x0A	; 10
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	b8 01       	movw	r22, r16
     9d0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     9d4:	eb 01       	movw	r28, r22
     9d6:	61 83       	std	Z+1, r22	; 0x01
			tmpDigit[0] = tmpWeight%10;
     9d8:	c9 01       	movw	r24, r18
     9da:	b8 01       	movw	r22, r16
     9dc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__divmodhi4>
     9e0:	80 83       	st	Z, r24
			for(i = 0 ; i < 3 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     9e2:	25 ea       	ldi	r18, 0xA5	; 165
     9e4:	31 e0       	ldi	r19, 0x01	; 1
     9e6:	99 27       	eor	r25, r25
     9e8:	dc 01       	movw	r26, r24
     9ea:	ac 5f       	subi	r26, 0xFC	; 252
     9ec:	be 4f       	sbci	r27, 0xFE	; 254
     9ee:	8c 91       	ld	r24, X
     9f0:	f9 01       	movw	r30, r18
     9f2:	80 83       	st	Z, r24
     9f4:	dd 27       	eor	r29, r29
     9f6:	cc 5f       	subi	r28, 0xFC	; 252
     9f8:	de 4f       	sbci	r29, 0xFE	; 254
     9fa:	88 81       	ld	r24, Y
     9fc:	81 83       	std	Z+1, r24	; 0x01
     9fe:	f7 01       	movw	r30, r14
     a00:	ff 27       	eor	r31, r31
     a02:	ec 5f       	subi	r30, 0xFC	; 252
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	80 81       	ld	r24, Z
     a08:	f9 01       	movw	r30, r18
     a0a:	82 83       	std	Z+2, r24	; 0x02
		}
		if( codePoint != 0 ) fndData[codePoint] |= 0x80;
     a0c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     a10:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	09 f4       	brne	.+2      	; 0xa1a <displayNumber1+0x9a>
     a18:	5b c0       	rjmp	.+182    	; 0xad0 <displayNumber1+0x150>
     a1a:	fc 01       	movw	r30, r24
     a1c:	eb 55       	subi	r30, 0x5B	; 91
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	80 81       	ld	r24, Z
     a22:	80 68       	ori	r24, 0x80	; 128
     a24:	80 83       	st	Z, r24
     a26:	54 c0       	rjmp	.+168    	; 0xad0 <displayNumber1+0x150>
		return;
	}

	if(weightIn > 9999 ){
     a28:	80 31       	cpi	r24, 0x10	; 16
     a2a:	f7 e2       	ldi	r31, 0x27	; 39
     a2c:	9f 07       	cpc	r25, r31
     a2e:	44 f0       	brlt	.+16     	; 0xa40 <displayNumber1+0xc0>
		tmpDigit[3] = 9;
     a30:	eb eb       	ldi	r30, 0xBB	; 187
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	89 e0       	ldi	r24, 0x09	; 9
     a36:	83 83       	std	Z+3, r24	; 0x03
		tmpDigit[2] = 9;
     a38:	82 83       	std	Z+2, r24	; 0x02
		tmpDigit[1] = 9;
     a3a:	81 83       	std	Z+1, r24	; 0x01
		tmpDigit[0] = 9;
     a3c:	80 83       	st	Z, r24
     a3e:	32 c0       	rjmp	.+100    	; 0xaa4 <displayNumber1+0x124>
		} else {
		tmpDigit[3] = weightIn/ 1000;
     a40:	eb eb       	ldi	r30, 0xBB	; 187
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	68 ee       	ldi	r22, 0xE8	; 232
     a46:	73 e0       	ldi	r23, 0x03	; 3
     a48:	e4 d7       	rcall	.+4040   	; 0x1a12 <__divmodhi4>
     a4a:	63 83       	std	Z+3, r22	; 0x03
		tmpDigit[2] = (weightIn%1000)/100;
     a4c:	c4 e6       	ldi	r28, 0x64	; 100
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
     a50:	be 01       	movw	r22, r28
     a52:	df d7       	rcall	.+4030   	; 0x1a12 <__divmodhi4>
     a54:	62 83       	std	Z+2, r22	; 0x02
		tmpDigit[1] = (weightIn%100)/10;
     a56:	c9 01       	movw	r24, r18
     a58:	be 01       	movw	r22, r28
     a5a:	db d7       	rcall	.+4022   	; 0x1a12 <__divmodhi4>
     a5c:	ca e0       	ldi	r28, 0x0A	; 10
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	be 01       	movw	r22, r28
     a62:	d7 d7       	rcall	.+4014   	; 0x1a12 <__divmodhi4>
     a64:	61 83       	std	Z+1, r22	; 0x01
		tmpDigit[0] = weightIn%10;
     a66:	c9 01       	movw	r24, r18
     a68:	be 01       	movw	r22, r28
     a6a:	d3 d7       	rcall	.+4006   	; 0x1a12 <__divmodhi4>
     a6c:	80 83       	st	Z, r24
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <displayNumber1+0x124>
     a70:	ec 91       	ld	r30, X
	}
	
	for(i = 0 ; i < 4 ; i++ ) tmpDigit[i] = fndTableNum[tmpDigit[i]];
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	ec 5f       	subi	r30, 0xFC	; 252
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	80 81       	ld	r24, Z
     a7a:	8d 93       	st	X+, r24
     a7c:	a2 17       	cp	r26, r18
     a7e:	b3 07       	cpc	r27, r19
     a80:	b9 f7       	brne	.-18     	; 0xa70 <displayNumber1+0xf0>
     a82:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tmpDigit+0x3>
	
	if(tmpDigit[3] == fndTableNum[0] ) {
     a86:	8f 33       	cpi	r24, 0x3F	; 63
     a88:	91 f4       	brne	.+36     	; 0xaae <displayNumber1+0x12e>
     a8a:	eb eb       	ldi	r30, 0xBB	; 187
		tmpDigit[3] = 0x00;
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	13 82       	std	Z+3, r1	; 0x03
     a90:	82 81       	ldd	r24, Z+2	; 0x02
		if(tmpDigit[2] == fndTableNum[0] ) {
     a92:	8f 33       	cpi	r24, 0x3F	; 63
     a94:	61 f4       	brne	.+24     	; 0xaae <displayNumber1+0x12e>
     a96:	12 82       	std	Z+2, r1	; 0x02
			tmpDigit[2] = 0x00;
     a98:	81 81       	ldd	r24, Z+1	; 0x01
			if(tmpDigit[1] == fndTableNum[0] ) {
     a9a:	8f 33       	cpi	r24, 0x3F	; 63
     a9c:	41 f4       	brne	.+16     	; 0xaae <displayNumber1+0x12e>
     a9e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <tmpDigit+0x1>
				tmpDigit[1] = 0x00;
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <displayNumber1+0x12e>
     aa4:	ab eb       	ldi	r26, 0xBB	; 187
     aa6:	b1 e0       	ldi	r27, 0x01	; 1
     aa8:	2f eb       	ldi	r18, 0xBF	; 191
     aaa:	31 e0       	ldi	r19, 0x01	; 1
     aac:	e1 cf       	rjmp	.-62     	; 0xa70 <displayNumber1+0xf0>
     aae:	e5 ea       	ldi	r30, 0xA5	; 165
			}
		}
	}

	for(i = 0 ; i < 4 ; i++ ) fndData[i] = tmpDigit[i];
     ab0:	f1 e0       	ldi	r31, 0x01	; 1
     ab2:	ab eb       	ldi	r26, 0xBB	; 187
     ab4:	b1 e0       	ldi	r27, 0x01	; 1
     ab6:	8c 91       	ld	r24, X
     ab8:	80 83       	st	Z, r24
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	8c 91       	ld	r24, X
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	81 83       	std	Z+1, r24	; 0x01
     ac2:	12 96       	adiw	r26, 0x02	; 2
     ac4:	8c 91       	ld	r24, X
     ac6:	12 97       	sbiw	r26, 0x02	; 2
     ac8:	82 83       	std	Z+2, r24	; 0x02
     aca:	13 96       	adiw	r26, 0x03	; 3
     acc:	8c 91       	ld	r24, X
     ace:	83 83       	std	Z+3, r24	; 0x03
     ad0:	df 91       	pop	r29
}
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <displayNumber>:
     ade:	cf 93       	push	r28

void displayNumber(int16_t weightIn)
{
     ae0:	df 93       	push	r29
     ae2:	ec 01       	movw	r28, r24
	int i;
	static uint32_t startmsecCount;
	if( elaspMsecTime(startmsecCount) < 300 ) return;
     ae4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <startmsecCount.1956>
     ae8:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <startmsecCount.1956+0x1>
     aec:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <startmsecCount.1956+0x2>
     af0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <startmsecCount.1956+0x3>
     af4:	5e dc       	rcall	.-1860   	; 0x3b2 <elaspMsecTime>
     af6:	6c 32       	cpi	r22, 0x2C	; 44
     af8:	71 40       	sbci	r23, 0x01	; 1
     afa:	81 05       	cpc	r24, r1
     afc:	91 05       	cpc	r25, r1
     afe:	b0 f1       	brcs	.+108    	; 0xb6c <displayNumber+0x8e>
	startmsecCount = timerCounter2;
     b00:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerCounter2>
     b04:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerCounter2+0x1>
     b08:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <timerCounter2+0x2>
     b0c:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <timerCounter2+0x3>
     b10:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <startmsecCount.1956>
     b14:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <startmsecCount.1956+0x1>
     b18:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <startmsecCount.1956+0x2>
     b1c:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <startmsecCount.1956+0x3>

	tmpDigit[3] = weightIn/1000;
     b20:	eb eb       	ldi	r30, 0xBB	; 187
     b22:	f1 e0       	ldi	r31, 0x01	; 1
     b24:	ce 01       	movw	r24, r28
     b26:	68 ee       	ldi	r22, 0xE8	; 232
     b28:	73 e0       	ldi	r23, 0x03	; 3
     b2a:	73 d7       	rcall	.+3814   	; 0x1a12 <__divmodhi4>
     b2c:	63 83       	std	Z+3, r22	; 0x03
	tmpDigit[2] = (weightIn%1000)/100;
     b2e:	24 e6       	ldi	r18, 0x64	; 100
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	b9 01       	movw	r22, r18
     b34:	6e d7       	rcall	.+3804   	; 0x1a12 <__divmodhi4>
     b36:	62 83       	std	Z+2, r22	; 0x02
	tmpDigit[1] = (weightIn%100)/10;
     b38:	ce 01       	movw	r24, r28
     b3a:	b9 01       	movw	r22, r18
     b3c:	6a d7       	rcall	.+3796   	; 0x1a12 <__divmodhi4>
     b3e:	2a e0       	ldi	r18, 0x0A	; 10
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	b9 01       	movw	r22, r18
     b44:	66 d7       	rcall	.+3788   	; 0x1a12 <__divmodhi4>
     b46:	61 83       	std	Z+1, r22	; 0x01
	tmpDigit[0] = weightIn%10;
     b48:	ce 01       	movw	r24, r28
     b4a:	b9 01       	movw	r22, r18
     b4c:	62 d7       	rcall	.+3780   	; 0x1a12 <__divmodhi4>
     b4e:	80 83       	st	Z, r24
     b50:	df 01       	movw	r26, r30
     b52:	c5 ea       	ldi	r28, 0xA5	; 165
     b54:	d1 e0       	ldi	r29, 0x01	; 1
     b56:	2f eb       	ldi	r18, 0xBF	; 191
     b58:	31 e0       	ldi	r19, 0x01	; 1
     b5a:	ed 91       	ld	r30, X+
	
	for(i=0;i < 4 ; i++ ) fndData[i] = fndTableNum[tmpDigit[i]];
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ec 5f       	subi	r30, 0xFC	; 252
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	80 81       	ld	r24, Z
     b64:	89 93       	st	Y+, r24
     b66:	a2 17       	cp	r26, r18
     b68:	b3 07       	cpc	r27, r19
     b6a:	b9 f7       	brne	.-18     	; 0xb5a <displayNumber+0x7c>
     b6c:	df 91       	pop	r29
}
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <initGpio>:
     b72:	8f e0       	ldi	r24, 0x0F	; 15

void initGpio()
{
	DDRA		= 0x0f;   // FND Control Port
     b74:	8a bb       	out	0x1a, r24	; 26
	DDRB		= 0x07;   // SSI and Button
     b76:	87 e0       	ldi	r24, 0x07	; 7
     b78:	87 bb       	out	0x17, r24	; 23
	DDRC		= 0xff;   // FND Data Port
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	84 bb       	out	0x14, r24	; 20
	DDRD		= 0x08;   // UART and reserved
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xfe;
     b82:	8e ef       	ldi	r24, 0xFE	; 254
     b84:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x7e;
     b86:	8e e7       	ldi	r24, 0x7E	; 126
     b88:	83 b9       	out	0x03, r24	; 3

	TIMSK =  0x40;
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 0x00;
     b8e:	14 bc       	out	0x24, r1	; 36
	TCCR2 =  0x03;
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	85 bd       	out	0x25, r24	; 37

	sbi(PORTB,CS);
     b94:	c0 9a       	sbi	0x18, 0	; 24
	SPCR = 0x5D;
     b96:	8d e5       	ldi	r24, 0x5D	; 93
     b98:	8d b9       	out	0x0d, r24	; 13
	SPSR= 0x00;
     b9a:	1e b8       	out	0x0e, r1	; 14
	
	sbi(PORTE,LED_ALARM);
     b9c:	1e 9a       	sbi	0x03, 6	; 3
	sbi(PORTE,LED_OVER);
     b9e:	1f 9a       	sbi	0x03, 7	; 3
     ba0:	08 95       	ret

00000ba2 <initCodeData>:
	
//	SFIOR = 0xff;
}

void initCodeData(){
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
	calcFactor = (int32_t ) codeWeight * 1024;
     bb6:	c0 90 c2 01 	lds	r12, 0x01C2	; 0x8001c2 <codeWeight>
     bba:	d0 90 c3 01 	lds	r13, 0x01C3	; 0x8001c3 <codeWeight+0x1>
     bbe:	0d 2c       	mov	r0, r13
     bc0:	00 0c       	add	r0, r0
     bc2:	ee 08       	sbc	r14, r14
     bc4:	ff 08       	sbc	r15, r15
     bc6:	0b 2e       	mov	r0, r27
     bc8:	ba e0       	ldi	r27, 0x0A	; 10
     bca:	cc 0c       	add	r12, r12
     bcc:	dd 1c       	adc	r13, r13
     bce:	ee 1c       	adc	r14, r14
     bd0:	ff 1c       	adc	r15, r15
     bd2:	ba 95       	dec	r27
     bd4:	d1 f7       	brne	.-12     	; 0xbca <initCodeData+0x28>
     bd6:	b0 2d       	mov	r27, r0
	calcFactor = calcFactor / ( codeAdcSpan - codeAdcZero );
     bd8:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <codeAdcZero>
     bdc:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <codeAdcZero+0x1>
     be0:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <codeAdcSpan>
     be4:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <codeAdcSpan+0x1>
     be8:	2c 1b       	sub	r18, r28
     bea:	3d 0b       	sbc	r19, r29
     bec:	49 01       	movw	r8, r18
     bee:	33 0f       	add	r19, r19
     bf0:	aa 08       	sbc	r10, r10
     bf2:	bb 08       	sbc	r11, r11
     bf4:	c7 01       	movw	r24, r14
     bf6:	b6 01       	movw	r22, r12
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	1d d7       	rcall	.+3642   	; 0x1a38 <__divmodsi4>
     bfe:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <calcFactor>
     c02:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <calcFactor+0x1>
     c06:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <calcFactor+0x2>
     c0a:	50 93 a2 01 	sts	0x01A2, r21	; 0x8001a2 <calcFactor+0x3>
	
	calcOffset = (int32_t ) codeWeight * 1024;
	calcOffset = - calcOffset * codeAdcZero / ( codeAdcSpan - codeAdcZero);
     c0e:	22 27       	eor	r18, r18
     c10:	33 27       	eor	r19, r19
     c12:	a9 01       	movw	r20, r18
     c14:	2c 19       	sub	r18, r12
     c16:	3d 09       	sbc	r19, r13
     c18:	4e 09       	sbc	r20, r14
     c1a:	5f 09       	sbc	r21, r15
     c1c:	de 01       	movw	r26, r28
     c1e:	31 d7       	rcall	.+3682   	; 0x1a82 <__mulshisi3>
     c20:	a5 01       	movw	r20, r10
     c22:	94 01       	movw	r18, r8
     c24:	09 d7       	rcall	.+3602   	; 0x1a38 <__divmodsi4>
     c26:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <calcOffset>
     c2a:	30 93 c6 01 	sts	0x01C6, r19	; 0x8001c6 <calcOffset+0x1>
     c2e:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <calcOffset+0x2>
     c32:	50 93 c8 01 	sts	0x01C8, r21	; 0x8001c8 <calcOffset+0x3>
	// calcOffset = - codeWeight * codeAdcZero * 1024 / ( codeAdcSpan - codeAdcZero);

	alarmOn = 0;
     c36:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <alarmOn+0x1>
     c3a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <alarmOn>
	overOn	= 0;
     c3e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <overOn+0x1>
     c42:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <overOn>
	gflagConnect = 0;
     c46:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <gflagConnect+0x1>
     c4a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <gflagConnect>
	tripNumber = 0;
     c4e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <tripNumber+0x1>
     c52:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <tripNumber>
	codeNumber = 0;
     c56:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <codeNumber+0x1>
     c5a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <codeNumber>
	blinkCmdFlag = 0x00;
     c5e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <blinkCmdFlag>
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	08 95       	ret

00000c78 <procRelayOut>:


void procRelayOut(void)
{
	uint8_t tmp;
	overOn  = ( loadWeight > codeOver  ) ? 1 : 0;
     c78:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
     c7c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
     c80:	21 e0       	ldi	r18, 0x01	; 1
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 91 ce 01 	lds	r20, 0x01CE	; 0x8001ce <codeOver>
     c88:	50 91 cf 01 	lds	r21, 0x01CF	; 0x8001cf <codeOver+0x1>
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	14 f0       	brlt	.+4      	; 0xc96 <procRelayOut+0x1e>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <overOn+0x1>
     c9a:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <overOn>
	alarmOn = ( loadWeight > codeAlarm ) ? 1 : 0;
     c9e:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <codeAlarm>
     ca2:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <codeAlarm+0x1>
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	28 17       	cp	r18, r24
     cac:	39 07       	cpc	r19, r25
     cae:	14 f0       	brlt	.+4      	; 0xcb4 <procRelayOut+0x3c>
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <alarmOn+0x1>
     cb8:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <alarmOn>
	
//--- alarm 
	if( alarmOn){
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	1c f4       	brge	.+6      	; 0xcc8 <procRelayOut+0x50>
		sbi(PORTA,RELAY_ALARM);
     cc2:	de 9a       	sbi	0x1b, 6	; 27
		cbi(PORTB,LED_ALARM); 
     cc4:	c6 98       	cbi	0x18, 6	; 24
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <procRelayOut+0x54>
	} else {
		cbi(PORTA,RELAY_ALARM);
     cc8:	de 98       	cbi	0x1b, 6	; 27
		sbi(PORTB,LED_ALARM);
     cca:	c6 9a       	sbi	0x18, 6	; 24
	}
	
//--- over relay led	
	if( overOn){
     ccc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <overOn>
     cd0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <overOn+0x1>
     cd4:	89 2b       	or	r24, r25
     cd6:	19 f0       	breq	.+6      	; 0xcde <procRelayOut+0x66>
		sbi(PORTA,RELAY_OVER);
     cd8:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(PORTB,LED_OVER);
     cda:	c7 98       	cbi	0x18, 7	; 24
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <procRelayOut+0x6a>
	} else {
		cbi(PORTA,RELAY_OVER);
     cde:	dd 98       	cbi	0x1b, 5	; 27
		sbi(PORTB,LED_OVER);
     ce0:	c7 9a       	sbi	0x18, 7	; 24
	}

	tmp = PIND & 0x01;
	if(tmp == 0)	sbi(PORTA,RELAY_OVER);
     ce2:	80 9b       	sbis	0x10, 0	; 16
     ce4:	dd 9a       	sbi	0x1b, 5	; 27
     ce6:	08 95       	ret

00000ce8 <systemErrProc>:
	
}

void systemErrProc( uint8_t err_no)
{
     ce8:	08 95       	ret

00000cea <readLoad>:
	
}

int16_t readLoad(void)
{
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
	static int ringCountFilt = 0;
	int16_t weight1;
	int32_t weightSum;
	static uint32_t startmsecCount=0;
	
	if( elaspMsecTime(startmsecCount) < 100 ) return loadWeight ;
     cf6:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <startmsecCount.1996>
     cfa:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <startmsecCount.1996+0x1>
     cfe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <startmsecCount.1996+0x2>
     d02:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <startmsecCount.1996+0x3>
     d06:	55 db       	rcall	.-2390   	; 0x3b2 <elaspMsecTime>
     d08:	64 36       	cpi	r22, 0x64	; 100
     d0a:	71 05       	cpc	r23, r1
     d0c:	81 05       	cpc	r24, r1
     d0e:	91 05       	cpc	r25, r1
     d10:	28 f4       	brcc	.+10     	; 0xd1c <readLoad+0x32>
     d12:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
     d16:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
     d1a:	cb c0       	rjmp	.+406    	; 0xeb2 <readLoad+0x1c8>
	startmsecCount = timerCounter2;
     d1c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerCounter2>
     d20:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerCounter2+0x1>
     d24:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <timerCounter2+0x2>
     d28:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <timerCounter2+0x3>
     d2c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <startmsecCount.1996>
     d30:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <startmsecCount.1996+0x1>
     d34:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <startmsecCount.1996+0x2>
     d38:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <startmsecCount.1996+0x3>

	if(adcWeightIn > 1020 ){
     d3c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <adcWeightIn>
     d40:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <adcWeightIn+0x1>
     d44:	8d 3f       	cpi	r24, 0xFD	; 253
     d46:	93 40       	sbci	r25, 0x03	; 3
     d48:	54 f0       	brlt	.+20     	; 0xd5e <readLoad+0x74>
		tripNumber = 3;
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <tripNumber+0x1>
     d52:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <tripNumber>
		enterModeError();
     d56:	76 d3       	rcall	.+1772   	; 0x1444 <enterModeError>
		return 0;
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	aa c0       	rjmp	.+340    	; 0xeb2 <readLoad+0x1c8>
	} else if ( adcWeightIn < 0 ){
     d5e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <adcWeightIn>
     d62:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <adcWeightIn+0x1>
     d66:	99 23       	and	r25, r25
     d68:	54 f4       	brge	.+20     	; 0xd7e <readLoad+0x94>
		tripNumber = 4;
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <tripNumber+0x1>
     d72:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <tripNumber>
		enterModeError();
     d76:	66 d3       	rcall	.+1740   	; 0x1444 <enterModeError>
		return 0;		
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9a c0       	rjmp	.+308    	; 0xeb2 <readLoad+0x1c8>
	}

	weight1 = (int16_t)(( calcFactor * adcWeightIn  + calcOffset ) / 1024) ;
     d7e:	a0 91 ab 01 	lds	r26, 0x01AB	; 0x8001ab <adcWeightIn>
     d82:	b0 91 ac 01 	lds	r27, 0x01AC	; 0x8001ac <adcWeightIn+0x1>

	// weight1 = (int16_t)( tmp >> 10 );
	
	weightBuf[ringCountFilt] = weight1;
     d86:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <ringCountFilt.1993>
     d8a:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <ringCountFilt.1993+0x1>
     d8e:	f7 01       	movw	r30, r14
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	e8 5d       	subi	r30, 0xD8	; 216
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <calcFactor>
     d9c:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <calcFactor+0x1>
     da0:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <calcFactor+0x2>
     da4:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <calcFactor+0x3>
     da8:	6c d6       	rcall	.+3288   	; 0x1a82 <__mulshisi3>
     daa:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <calcOffset>
     dae:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <calcOffset+0x1>
     db2:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <calcOffset+0x2>
     db6:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <calcOffset+0x3>
     dba:	ab 01       	movw	r20, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	40 0f       	add	r20, r16
     dc0:	51 1f       	adc	r21, r17
     dc2:	62 1f       	adc	r22, r18
     dc4:	73 1f       	adc	r23, r19
     dc6:	db 01       	movw	r26, r22
     dc8:	ca 01       	movw	r24, r20
     dca:	77 23       	and	r23, r23
     dcc:	24 f4       	brge	.+8      	; 0xdd6 <readLoad+0xec>
     dce:	81 50       	subi	r24, 0x01	; 1
     dd0:	9c 4f       	sbci	r25, 0xFC	; 252
     dd2:	af 4f       	sbci	r26, 0xFF	; 255
     dd4:	bf 4f       	sbci	r27, 0xFF	; 255
     dd6:	07 2e       	mov	r0, r23
     dd8:	7a e0       	ldi	r23, 0x0A	; 10
     dda:	b5 95       	asr	r27
     ddc:	a7 95       	ror	r26
     dde:	97 95       	ror	r25
     de0:	87 95       	ror	r24
     de2:	7a 95       	dec	r23
     de4:	d1 f7       	brne	.-12     	; 0xdda <readLoad+0xf0>
     de6:	70 2d       	mov	r23, r0
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	e8 16       	cp	r14, r24
     df0:	f1 04       	cpc	r15, r1
     df2:	1c f4       	brge	.+6      	; 0xdfa <readLoad+0x110>
     df4:	c7 01       	movw	r24, r14
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <readLoad+0x114>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ringCountFilt.1993+0x1>
     e02:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ringCountFilt.1993>
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     e06:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <codeFilt>
     e0a:	30 91 aa 01 	lds	r19, 0x01AA	; 0x8001aa <codeFilt+0x1>
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	12 16       	cp	r1, r18
     e14:	13 06       	cpc	r1, r19
     e16:	04 f5       	brge	.+64     	; 0xe58 <readLoad+0x16e>
     e18:	c1 2c       	mov	r12, r1
     e1a:	d1 2c       	mov	r13, r1
     e1c:	76 01       	movw	r14, r12
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
		weightSum += weightBuf[j];
     e22:	fc 01       	movw	r30, r24
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	e8 5d       	subi	r30, 0xD8	; 216
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	40 81       	ld	r20, Z
     e2e:	51 81       	ldd	r21, Z+1	; 0x01
     e30:	05 2e       	mov	r0, r21
     e32:	00 0c       	add	r0, r0
     e34:	66 0b       	sbc	r22, r22
     e36:	77 0b       	sbc	r23, r23
     e38:	c4 0e       	add	r12, r20
     e3a:	d5 1e       	adc	r13, r21
     e3c:	e6 1e       	adc	r14, r22
     e3e:	f7 1e       	adc	r15, r23
		j = ( j < 1 ) ?  9 : j - 1;
     e40:	18 16       	cp	r1, r24
     e42:	19 06       	cpc	r1, r25
     e44:	14 f4       	brge	.+4      	; 0xe4a <readLoad+0x160>
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <readLoad+0x164>
     e4a:	89 e0       	ldi	r24, 0x09	; 9
     e4c:	90 e0       	ldi	r25, 0x00	; 0
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	a2 17       	cp	r26, r18
     e52:	b3 07       	cpc	r27, r19
     e54:	34 f3       	brlt	.-52     	; 0xe22 <readLoad+0x138>
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <readLoad+0x174>
	weightBuf[ringCountFilt] = weight1;
	ringCountFilt = (ringCountFilt > 8 ) ? 0 : ringCountFilt +1;
	
//--- filt proc	
	j = ringCountFilt;
	weightSum = 0;
     e58:	c1 2c       	mov	r12, r1
     e5a:	d1 2c       	mov	r13, r1
     e5c:	76 01       	movw	r14, r12
	for ( i = 0; i < (codeFilt + 1) ; i++ ){
		weightSum += weightBuf[j];
		j = ( j < 1 ) ?  9 : j - 1;
	}	
	weight1 = weightSum / ( codeFilt + 1);	 
     e5e:	03 2e       	mov	r0, r19
     e60:	00 0c       	add	r0, r0
     e62:	44 0b       	sbc	r20, r20
     e64:	55 0b       	sbc	r21, r21
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	e6 d5       	rcall	.+3020   	; 0x1a38 <__divmodsi4>

//-- divison proc
	if( codeDivision == 0 ) weight1 = ( ( weight1 +5)  / 10 ) * 10;
     e6c:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <codeDivision>
     e70:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <codeDivision+0x1>
     e74:	30 97       	sbiw	r30, 0x00	; 0
     e76:	89 f4       	brne	.+34     	; 0xe9a <readLoad+0x1b0>
     e78:	c9 01       	movw	r24, r18
     e7a:	05 96       	adiw	r24, 0x05	; 5
     e7c:	6a e0       	ldi	r22, 0x0A	; 10
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	c8 d5       	rcall	.+2960   	; 0x1a12 <__divmodhi4>
     e82:	cb 01       	movw	r24, r22
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	86 0f       	add	r24, r22
     e96:	97 1f       	adc	r25, r23
	else weight1 = ( ( weight1 + codeDivision ) / codeDivision ) * codeDivision;
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <readLoad+0x1c8>
     e9a:	cf 01       	movw	r24, r30
     e9c:	82 0f       	add	r24, r18
     e9e:	93 1f       	adc	r25, r19
     ea0:	bf 01       	movw	r22, r30
     ea2:	b7 d5       	rcall	.+2926   	; 0x1a12 <__divmodhi4>
     ea4:	e6 9f       	mul	r30, r22
     ea6:	c0 01       	movw	r24, r0
     ea8:	e7 9f       	mul	r30, r23
     eaa:	90 0d       	add	r25, r0
     eac:	f6 9f       	mul	r31, r22
     eae:	90 0d       	add	r25, r0
     eb0:	11 24       	eor	r1, r1

	return weight1;	
}
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	08 95       	ret

00000ec0 <main>:

int main(void)
{
	uint8_t keyBuf;
	
	initGpio();
     ec0:	58 de       	rcall	.-848    	; 0xb72 <initGpio>
	
	initADC();	
     ec2:	41 db       	rcall	.-2430   	; 0x546 <initADC>
	
	initUart();
     ec4:	c6 d4       	rcall	.+2444   	; 0x1852 <initUart>
	
	sei();	

    initUart();
     ec6:	78 94       	sei

	readRomData();
     ec8:	c4 d4       	rcall	.+2440   	; 0x1852 <initUart>
     eca:	fb d9       	rcall	.-3082   	; 0x2c2 <readRomData>
	initCodeData();		
     ecc:	6a de       	rcall	.-812    	; 0xba2 <initCodeData>
	loadWeight = readLoad();
     ece:	0d df       	rcall	.-486    	; 0xcea <readLoad>
     ed0:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <loadWeight+0x1>
     ed4:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <loadWeight>
	enterModeRun();
     ed8:	3a d0       	rcall	.+116    	; 0xf4e <enterModeRun>
}

int returnVal;

int main(void)
{
     eda:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
		if(command != BTN_NULL ) keyBuf = 1;
     edc:	d1 e0       	ldi	r29, 0x01	; 1
}

int returnVal;

int main(void)
{
     ede:	c1 2f       	mov	r28, r17
	initCodeData();		
	loadWeight = readLoad();
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
     ee0:	cb de       	rcall	.-618    	; 0xc78 <procRelayOut>
		sciCommandProc( );	
     ee2:	76 d5       	rcall	.+2796   	; 0x19d0 <sciCommandProc>
     ee4:	9e db       	rcall	.-2244   	; 0x622 <getButton>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     ee6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <command>
	enterModeRun();
    while (1) 
    {	
		procRelayOut( );
		sciCommandProc( );	
		command = getCommand();
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	09 f0       	breq	.+2      	; 0xef0 <main+0x30>
		if(command != BTN_NULL ) keyBuf = 1;
     eee:	cd 2f       	mov	r28, r29
     ef0:	fc de       	rcall	.-520    	; 0xcea <readLoad>
     ef2:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <loadWeight+0x1>
		loadWeight = readLoad();
     ef6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <loadWeight>
     efa:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <machineState>
     efe:	82 30       	cpi	r24, 0x02	; 2
		switch( machineState ){
     f00:	99 f0       	breq	.+38     	; 0xf28 <main+0x68>
     f02:	28 f4       	brcc	.+10     	; 0xf0e <main+0x4e>
     f04:	88 23       	and	r24, r24
     f06:	41 f0       	breq	.+16     	; 0xf18 <main+0x58>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	51 f0       	breq	.+20     	; 0xf20 <main+0x60>
     f0c:	19 c0       	rjmp	.+50     	; 0xf40 <main+0x80>
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	79 f0       	breq	.+30     	; 0xf30 <main+0x70>
     f12:	84 30       	cpi	r24, 0x04	; 4
     f14:	89 f0       	breq	.+34     	; 0xf38 <main+0x78>
     f16:	14 c0       	rjmp	.+40     	; 0xf40 <main+0x80>
     f18:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command>
			case MODE_RUN			: modeRun(command)			; break;
     f1c:	13 d1       	rcall	.+550    	; 0x1144 <modeRun>
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <main+0x82>
     f20:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command>
			case MODE_PASSWD		: modePassWord(command)		; break;
     f24:	1b d1       	rcall	.+566    	; 0x115c <modePassWord>
     f26:	0d c0       	rjmp	.+26     	; 0xf42 <main+0x82>
			case MODE_SELECT_CODE	: modeSelectCode(command)	; break;
     f28:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command>
     f2c:	d6 d1       	rcall	.+940    	; 0x12da <modeSelectCode>
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <main+0x82>
			case MODE_CHANGE_CODE	: modeChangeCode(command)	; break;
     f30:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command>
     f34:	a0 d2       	rcall	.+1344   	; 0x1476 <modeChangeCode>
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <main+0x82>
     f38:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <command>
			case MODE_ERROR			: modeError(command)		; break;			
     f3c:	84 d4       	rcall	.+2312   	; 0x1846 <modeError>
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <main+0x82>
     f40:	06 d0       	rcall	.+12     	; 0xf4e <enterModeRun>
     f42:	c1 30       	cpi	r28, 0x01	; 1
			default					: enterModeRun( )	; break;
     f44:	69 f6       	brne	.-102    	; 0xee0 <main+0x20>
     f46:	6d db       	rcall	.-2342   	; 0x622 <getButton>
		}
		if(keyBuf ==  1){
     f48:	8f 3f       	cpi	r24, 0xFF	; 255
     f4a:	e9 f7       	brne	.-6      	; 0xf46 <main+0x86>
	}	
}

uint8_t getCommand(void)
{
	return getButton();
     f4c:	c8 cf       	rjmp	.-112    	; 0xede <main+0x1e>

00000f4e <enterModeRun>:
#include "header.h"
#include "extern.h"

void enterModeRun(void)
{
	initCodeData();
     f4e:	29 de       	rcall	.-942    	; 0xba2 <initCodeData>
	machineState = MODE_RUN;
     f50:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <machineState>
	loadWeight = readLoad();
     f54:	ca de       	rcall	.-620    	; 0xcea <readLoad>
     f56:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <loadWeight+0x1>
     f5a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <loadWeight>
	displayWeight(loadWeight);
     f5e:	7e cb       	rjmp	.-2308   	; 0x65c <displayWeight>
     f60:	08 95       	ret

00000f62 <enterModePassWord>:
}

void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <machineState>
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
		fndData[i] = fndTableNum[0];
     f68:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fndTableNum>
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     f6c:	a9 e9       	ldi	r26, 0x99	; 153
     f6e:	b1 e0       	ldi	r27, 0x01	; 1
     f70:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     f72:	e5 ea       	ldi	r30, 0xA5	; 165
     f74:	f1 e0       	ldi	r31, 0x01	; 1
     f76:	80 83       	st	Z, r24
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 92       	st	X, r1
     f7c:	11 97       	sbiw	r26, 0x01	; 1
		fndData[i] = fndTableNum[0];
     f7e:	81 83       	std	Z+1, r24	; 0x01
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	1c 92       	st	X, r1
     f84:	12 97       	sbiw	r26, 0x02	; 2
		fndData[i] = fndTableNum[0];
     f86:	82 83       	std	Z+2, r24	; 0x02
void enterModePassWord(void)
{
	int i;
	machineState = MODE_PASSWD;
	for( i = 0 ; i < 4 ; i++){
		passWord[i] = 0;	//
     f88:	13 96       	adiw	r26, 0x03	; 3
     f8a:	1c 92       	st	X, r1
		fndData[i] = fndTableNum[0];
     f8c:	83 83       	std	Z+3, r24	; 0x03
	}
	blinkCmdFlag = 0x08;
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
	editDigitPoint = 3;		// 1000
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <editDigitPoint>
     f9a:	08 95       	ret

00000f9c <enterModeSelectCode>:
}

void enterModeSelectCode(void)
{
	machineState = MODE_SELECT_CODE;
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <machineState>
	codeNumber = 0;
     fa2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <codeNumber+0x1>
     fa6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <codeNumber>
	fndData[3] = fndTableChar['P' - 'A'];
     faa:	e5 ea       	ldi	r30, 0xA5	; 165
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	ae e0       	ldi	r26, 0x0E	; 14
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	1f 96       	adiw	r26, 0x0f	; 15
     fb4:	8c 91       	ld	r24, X
     fb6:	1f 97       	sbiw	r26, 0x0f	; 15
     fb8:	83 83       	std	Z+3, r24	; 0x03
	fndData[2] = fndTableChar['O' - 'A'];
     fba:	1e 96       	adiw	r26, 0x0e	; 14
     fbc:	8c 91       	ld	r24, X
     fbe:	1e 97       	sbiw	r26, 0x0e	; 14
     fc0:	82 83       	std	Z+2, r24	; 0x02
	fndData[1] = fndTableChar['I' - 'A'];
     fc2:	18 96       	adiw	r26, 0x08	; 8
     fc4:	8c 91       	ld	r24, X
     fc6:	18 97       	sbiw	r26, 0x08	; 8
     fc8:	81 83       	std	Z+1, r24	; 0x01
	fndData[0] = fndTableChar['T' - 'A'];
     fca:	53 96       	adiw	r26, 0x13	; 19
     fcc:	8c 91       	ld	r24, X
     fce:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;	//
     fd0:	8f e0       	ldi	r24, 0x0F	; 15
     fd2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
     fd6:	08 95       	ret

00000fd8 <enterModeChangeCode>:
}

void enterModeChangeCode(void)
{
	machineState = MODE_CHANGE_CODE;
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <machineState>

	switch(codeNumber){	
     fde:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <codeNumber>
     fe2:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <codeNumber+0x1>
     fe6:	e8 30       	cpi	r30, 0x08	; 8
     fe8:	f1 05       	cpc	r31, r1
     fea:	08 f0       	brcs	.+2      	; 0xfee <enterModeChangeCode+0x16>
     fec:	a8 c0       	rjmp	.+336    	; 0x113e <__stack+0x3f>
     fee:	e0 5b       	subi	r30, 0xB0	; 176
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	3e c5       	rjmp	.+2684   	; 0x1a70 <__tablejump2__>
	case 0:
		tmpCodeData = codePoint;
     ff4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <codePoint>
     ff8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <codePoint+0x1>
     ffc:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1000:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		if(tmpCodeData == 0) blinkCmdFlag = 1;
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	21 f4       	brne	.+8      	; 0x1010 <enterModeChangeCode+0x38>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 1) blinkCmdFlag = 2;
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	91 05       	cpc	r25, r1
    1014:	21 f4       	brne	.+8      	; 0x101e <enterModeChangeCode+0x46>
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <enterModeChangeCode+0x60>
		else if(tmpCodeData == 2) blinkCmdFlag = 4;
    101e:	02 97       	sbiw	r24, 0x02	; 2
    1020:	21 f4       	brne	.+8      	; 0x102a <enterModeChangeCode+0x52>
    1022:	84 e0       	ldi	r24, 0x04	; 4
    1024:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <enterModeChangeCode+0x60>
		else {
			tmpCodeData = 0;
    102a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    102e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
			blinkCmdFlag = 1; 
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
		}		
		displayWeight1(loadWeight);
    1038:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
    103c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
    1040:	e7 cb       	rjmp	.-2098   	; 0x810 <displayWeight1>
		break;
    1042:	08 95       	ret
	case 1:
		tmpCodeData = codeFilt;	//
    1044:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <codeFilt>
    1048:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <codeFilt+0x1>
    104c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1050:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		blinkCmdFlag = 1;
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space 
    105a:	92 cc       	rjmp	.-1756   	; 0x980 <displayNumber1>
		break;
    105c:	08 95       	ret
	case 2:
		tmpCodeData = codeDivision;	//
    105e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <codeDivision>
    1062:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <codeDivision+0x1>
    1066:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    106a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		blinkCmdFlag = 1;
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		displayNumber1(tmpCodeData);		// no point add space
    1074:	85 cc       	rjmp	.-1782   	; 0x980 <displayNumber1>
		break;
    1076:	08 95       	ret
	case 3:
		tmpCodeData = codeAutoZero;
    1078:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <codeAutoZero>
    107c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <codeAutoZero+0x1>
    1080:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1084:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		blinkCmdFlag = 0x0f;	//
    1088:	2f e0       	ldi	r18, 0x0F	; 15
    108a:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		if(tmpCodeData){
    108e:	89 2b       	or	r24, r25
    1090:	89 f0       	breq	.+34     	; 0x10b4 <enterModeChangeCode+0xdc>
			fndData[3] = 0x00;
    1092:	e5 ea       	ldi	r30, 0xA5	; 165
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['Y' - 'A'];
    1098:	ae e0       	ldi	r26, 0x0E	; 14
    109a:	b1 e0       	ldi	r27, 0x01	; 1
    109c:	58 96       	adiw	r26, 0x18	; 24
    109e:	8c 91       	ld	r24, X
    10a0:	58 97       	sbiw	r26, 0x18	; 24
    10a2:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['E' - 'A'];
    10a4:	14 96       	adiw	r26, 0x04	; 4
    10a6:	8c 91       	ld	r24, X
    10a8:	14 97       	sbiw	r26, 0x04	; 4
    10aa:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = fndTableChar['S' - 'A'];
    10ac:	52 96       	adiw	r26, 0x12	; 18
    10ae:	8c 91       	ld	r24, X
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret
		} else {
			fndData[3] = 0x00;
    10b4:	e5 ea       	ldi	r30, 0xA5	; 165
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
    10b8:	13 82       	std	Z+3, r1	; 0x03
			fndData[2] = fndTableChar['N' - 'A'];
    10ba:	ae e0       	ldi	r26, 0x0E	; 14
    10bc:	b1 e0       	ldi	r27, 0x01	; 1
    10be:	1d 96       	adiw	r26, 0x0d	; 13
    10c0:	8c 91       	ld	r24, X
    10c2:	1d 97       	sbiw	r26, 0x0d	; 13
    10c4:	82 83       	std	Z+2, r24	; 0x02
			fndData[1] = fndTableChar['O' - 'A'];
    10c6:	1e 96       	adiw	r26, 0x0e	; 14
    10c8:	8c 91       	ld	r24, X
    10ca:	81 83       	std	Z+1, r24	; 0x01
			fndData[0] = 0x00;
    10cc:	10 82       	st	Z, r1
    10ce:	08 95       	ret
		}
		break;
	case 4:
		tmpCodeData = codeAlarm;
    10d0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <codeAlarm>
    10d4:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <codeAlarm+0x1>
    10d8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    10dc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		editDigitPoint = 0;		// 1000
    10e0:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <editDigitPoint>
		blinkCmdFlag = 0x01;
    10e4:	21 e0       	ldi	r18, 0x01	; 1
    10e6:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		displayWeight1(tmpCodeData);
    10ea:	92 cb       	rjmp	.-2268   	; 0x810 <displayWeight1>
		break;
    10ec:	08 95       	ret
	case 5:
		tmpCodeData = codeOver;
    10ee:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <codeOver>
    10f2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <codeOver+0x1>
    10f6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    10fa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		editDigitPoint = 0;		// 1000
    10fe:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <editDigitPoint>
		blinkCmdFlag = 0x01;
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		displayWeight1(tmpCodeData);
    1108:	83 cb       	rjmp	.-2298   	; 0x810 <displayWeight1>
		break;
    110a:	08 95       	ret
	case 6:
		tmpCodeData = codeWeight;
    110c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <codeWeight>
    1110:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <codeWeight+0x1>
    1114:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1118:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
		editDigitPoint = 0;		// 1000
    111c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <editDigitPoint>
		blinkCmdFlag = 0x01;
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <blinkCmdFlag>
		displayWeight1(tmpCodeData);
    1126:	74 cb       	rjmp	.-2328   	; 0x810 <displayWeight1>
		break;
    1128:	08 95       	ret
	case 7:
		editDigitPoint = 0;		// 1000
    112a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <editDigitPoint>
		blinkCmdFlag = 0x00;
    112e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <blinkCmdFlag>
		displayNumber(adcWeightIn);
    1132:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <adcWeightIn>
    1136:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <adcWeightIn+0x1>
		break;
    113a:	d1 cc       	rjmp	.-1630   	; 0xade <displayNumber>
	default:
		systemErrProc(ERR_SYS_NO_CODE_NUMBER);
    113c:	08 95       	ret
    113e:	82 e3       	ldi	r24, 0x32	; 50
    1140:	d3 cd       	rjmp	.-1114   	; 0xce8 <systemErrProc>
    1142:	08 95       	ret

00001144 <modeRun>:
	}
}

int modeRun(uint8_t cmd)
{
	if( cmd  == BTN_ENTER ){ 
    1144:	8f 37       	cpi	r24, 0x7F	; 127
    1146:	11 f4       	brne	.+4      	; 0x114c <modeRun+0x8>
		enterModePassWord();
    1148:	0c df       	rcall	.-488    	; 0xf62 <enterModePassWord>
		// enterModeSelectCode();
		return 0;
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <modeRun+0x12>
	}
	displayWeight(loadWeight);
    114c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
    1150:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
    1154:	83 da       	rcall	.-2810   	; 0x65c <displayWeight>
	return 0;
}
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	08 95       	ret

0000115c <modePassWord>:
int modePassWord(uint8_t cmd )
{
	int i;
	int16_t passwd;
	
	if( cmd == BTN_ENTER ){
    115c:	8f 37       	cpi	r24, 0x7F	; 127
    115e:	09 f0       	breq	.+2      	; 0x1162 <modePassWord+0x6>
    1160:	61 c0       	rjmp	.+194    	; 0x1224 <modePassWord+0xc8>
		passwd = passWord[3] * 1000 +passWord[2] * 100 + passWord[1] * 10 + passWord[0]; 	
    1162:	e9 e9       	ldi	r30, 0x99	; 153
    1164:	f1 e0       	ldi	r31, 0x01	; 1
		if( passwd == 5737 ){
    1166:	43 81       	ldd	r20, Z+3	; 0x03
    1168:	28 ee       	ldi	r18, 0xE8	; 232
    116a:	33 e0       	ldi	r19, 0x03	; 3
    116c:	42 9f       	mul	r20, r18
    116e:	c0 01       	movw	r24, r0
    1170:	43 9f       	mul	r20, r19
    1172:	90 0d       	add	r25, r0
    1174:	11 24       	eor	r1, r1
    1176:	22 81       	ldd	r18, Z+2	; 0x02
    1178:	ac 01       	movw	r20, r24
    117a:	34 e6       	ldi	r19, 0x64	; 100
    117c:	23 9f       	mul	r18, r19
    117e:	40 0d       	add	r20, r0
    1180:	51 1d       	adc	r21, r1
    1182:	11 24       	eor	r1, r1
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	89 2f       	mov	r24, r25
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	bc 01       	movw	r22, r24
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	9c 01       	movw	r18, r24
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	cb 01       	movw	r24, r22
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	20 81       	ld	r18, Z
    11aa:	82 0f       	add	r24, r18
    11ac:	91 1d       	adc	r25, r1
    11ae:	89 36       	cpi	r24, 0x69	; 105
    11b0:	96 41       	sbci	r25, 0x16	; 22
    11b2:	69 f5       	brne	.+90     	; 0x120e <modePassWord+0xb2>
			if(codeNumber == 6 ){
    11b4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <codeNumber>
    11b8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <codeNumber+0x1>
    11bc:	86 30       	cpi	r24, 0x06	; 6
    11be:	91 05       	cpc	r25, r1
    11c0:	f9 f4       	brne	.+62     	; 0x1200 <modePassWord+0xa4>
				saveCode(6,tmpCodeData);
    11c2:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <tmpCodeData>
    11c6:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <tmpCodeData+0x1>
    11ca:	86 e0       	ldi	r24, 0x06	; 6
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	05 d8       	rcall	.-4086   	; 0x1da <saveCode>
				saveCode(8,adcWeight / 16);
    11d0:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <adcWeight>
    11d4:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <adcWeight+0x1>
    11d8:	77 23       	and	r23, r23
    11da:	14 f4       	brge	.+4      	; 0x11e0 <modePassWord+0x84>
    11dc:	61 5f       	subi	r22, 0xF1	; 241
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	75 95       	asr	r23
    11e2:	67 95       	ror	r22
    11e4:	75 95       	asr	r23
    11e6:	67 95       	ror	r22
    11e8:	75 95       	asr	r23
    11ea:	67 95       	ror	r22
    11ec:	75 95       	asr	r23
    11ee:	67 95       	ror	r22
    11f0:	88 e0       	ldi	r24, 0x08	; 8
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
				enterModeRun();				
    11f8:	aa de       	rcall	.-684    	; 0xf4e <enterModeRun>
			}
		} else {
			if(codeNumber == 10 ) return -2;
			else  enterModeRun();
		}
		return 0;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	08 95       	ret
		if( passwd == 5737 ){
			if(codeNumber == 6 ){
				saveCode(6,tmpCodeData);
				saveCode(8,adcWeight / 16);
				enterModeRun();				
			} else if ( codeNumber == 10) {
    1200:	0a 97       	sbiw	r24, 0x0a	; 10
    1202:	09 f4       	brne	.+2      	; 0x1206 <modePassWord+0xaa>
				return -1;				
			} else {
				enterModeSelectCode();
    1204:	5e c0       	rjmp	.+188    	; 0x12c2 <modePassWord+0x166>
    1206:	ca de       	rcall	.-620    	; 0xf9c <enterModeSelectCode>
			}
		} else {
			if(codeNumber == 10 ) return -2;
			else  enterModeRun();
		}
		return 0;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	08 95       	ret
				return -1;				
			} else {
				enterModeSelectCode();
			}
		} else {
			if(codeNumber == 10 ) return -2;
    120e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <codeNumber>
    1212:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <codeNumber+0x1>
    1216:	0a 97       	sbiw	r24, 0x0a	; 10
    1218:	09 f4       	brne	.+2      	; 0x121c <modePassWord+0xc0>
			else  enterModeRun();
    121a:	56 c0       	rjmp	.+172    	; 0x12c8 <modePassWord+0x16c>
    121c:	98 de       	rcall	.-720    	; 0xf4e <enterModeRun>
		}
		return 0;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	08 95       	ret
	}

	if(cmd == BTN_CANCEL){
    1224:	8f 3b       	cpi	r24, 0xBF	; 191
    1226:	59 f4       	brne	.+22     	; 0x123e <modePassWord+0xe2>
		if(codeNumber == 10 ) return -2;
    1228:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <codeNumber>
    122c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <codeNumber+0x1>
    1230:	0a 97       	sbiw	r24, 0x0a	; 10
    1232:	09 f4       	brne	.+2      	; 0x1236 <modePassWord+0xda>
		else			enterModeRun();
    1234:	4c c0       	rjmp	.+152    	; 0x12ce <modePassWord+0x172>
    1236:	8b de       	rcall	.-746    	; 0xf4e <enterModeRun>
		return 0;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
	}
	
	if(cmd == BTN_UP){
    123e:	8f 3e       	cpi	r24, 0xEF	; 239
    1240:	d9 f4       	brne	.+54     	; 0x1278 <modePassWord+0x11c>
		passWord[editDigitPoint] = ( passWord[editDigitPoint] > 8 ) ? 0 : passWord[editDigitPoint] +1;
    1242:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <editDigitPoint>
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	fc 01       	movw	r30, r24
    124a:	e7 56       	subi	r30, 0x67	; 103
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	e0 81       	ld	r30, Z
    1250:	e9 30       	cpi	r30, 0x09	; 9
    1252:	10 f4       	brcc	.+4      	; 0x1258 <modePassWord+0xfc>
    1254:	ef 5f       	subi	r30, 0xFF	; 255
    1256:	01 c0       	rjmp	.+2      	; 0x125a <modePassWord+0xfe>
    1258:	e0 e0       	ldi	r30, 0x00	; 0
    125a:	dc 01       	movw	r26, r24
    125c:	a7 56       	subi	r26, 0x67	; 103
    125e:	be 4f       	sbci	r27, 0xFE	; 254
    1260:	ec 93       	st	X, r30
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
    1262:	dc 01       	movw	r26, r24
    1264:	ab 55       	subi	r26, 0x5B	; 91
    1266:	be 4f       	sbci	r27, 0xFE	; 254
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	ec 5f       	subi	r30, 0xFC	; 252
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	20 81       	ld	r18, Z
    1270:	2c 93       	st	X, r18
		return 0;
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	08 95       	ret
	}

	if(cmd == BTN_LEFT){
    1278:	8f 3d       	cpi	r24, 0xDF	; 223
    127a:	61 f5       	brne	.+88     	; 0x12d4 <modePassWord+0x178>
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    127c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <editDigitPoint>
    1280:	88 23       	and	r24, r24
    1282:	11 f0       	breq	.+4      	; 0x1288 <modePassWord+0x12c>
    1284:	81 50       	subi	r24, 0x01	; 1
    1286:	01 c0       	rjmp	.+2      	; 0x128a <modePassWord+0x12e>
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <editDigitPoint>
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    128e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <blinkCmdFlag>
    1292:	96 95       	lsr	r25
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    1294:	19 f0       	breq	.+6      	; 0x129c <modePassWord+0x140>
		return 0;
	}

	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
    1296:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <blinkCmdFlag>
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <modePassWord+0x146>
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
    129c:	98 e0       	ldi	r25, 0x08	; 8
    129e:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <blinkCmdFlag>
		
		i = passWord[editDigitPoint];
    12a2:	90 e0       	ldi	r25, 0x00	; 0
		fndData[editDigitPoint] = fndTableNum[i];
    12a4:	dc 01       	movw	r26, r24
    12a6:	ab 55       	subi	r26, 0x5B	; 91
    12a8:	be 4f       	sbci	r27, 0xFE	; 254
	if(cmd == BTN_LEFT){
		editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
		blinkCmdFlag = blinkCmdFlag >> 1 ;
		if( blinkCmdFlag == 0 ) blinkCmdFlag = 0x08;
		
		i = passWord[editDigitPoint];
    12aa:	fc 01       	movw	r30, r24
    12ac:	e7 56       	subi	r30, 0x67	; 103
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
		fndData[editDigitPoint] = fndTableNum[i];
    12b0:	e0 81       	ld	r30, Z
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ec 5f       	subi	r30, 0xFC	; 252
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	80 81       	ld	r24, Z
    12ba:	8c 93       	st	X, r24
		return 0;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret
			if(codeNumber == 6 ){
				saveCode(6,tmpCodeData);
				saveCode(8,adcWeight / 16);
				enterModeRun();				
			} else if ( codeNumber == 10) {
				return -1;				
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	08 95       	ret
			} else {
				enterModeSelectCode();
			}
		} else {
			if(codeNumber == 10 ) return -2;
    12c8:	8e ef       	ldi	r24, 0xFE	; 254
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	08 95       	ret
		}
		return 0;
	}

	if(cmd == BTN_CANCEL){
		if(codeNumber == 10 ) return -2;
    12ce:	8e ef       	ldi	r24, 0xFE	; 254
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	08 95       	ret
		
		i = passWord[editDigitPoint];
		fndData[editDigitPoint] = fndTableNum[i];
		return 0;
	}
	return 0;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
}
    12d8:	08 95       	ret

000012da <modeSelectCode>:

int modeSelectCode(uint8_t cmd)
{

	if( cmd == BTN_ENTER ){
    12da:	8f 37       	cpi	r24, 0x7F	; 127
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <modeSelectCode+0x8>
		enterModeChangeCode();
    12de:	7c de       	rcall	.-776    	; 0xfd8 <enterModeChangeCode>
		return 0;
    12e0:	ae c0       	rjmp	.+348    	; 0x143e <modeSelectCode+0x164>
	}

	if(cmd == BTN_CANCEL){
    12e2:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    12e4:	11 f4       	brne	.+4      	; 0x12ea <modeSelectCode+0x10>
    12e6:	33 de       	rcall	.-922    	; 0xf4e <enterModeRun>
		return 0;
    12e8:	aa c0       	rjmp	.+340    	; 0x143e <modeSelectCode+0x164>
	}
	
	if(cmd == BTN_UP){
    12ea:	8f 3e       	cpi	r24, 0xEF	; 239
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <modeSelectCode+0x16>
    12ee:	a7 c0       	rjmp	.+334    	; 0x143e <modeSelectCode+0x164>
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    12f0:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <codeNumber>
    12f4:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <codeNumber+0x1>
    12f8:	e8 30       	cpi	r30, 0x08	; 8
    12fa:	f1 05       	cpc	r31, r1
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <modeSelectCode+0x26>
    12fe:	9a c0       	rjmp	.+308    	; 0x1434 <modeSelectCode+0x15a>
    1300:	31 96       	adiw	r30, 0x01	; 1
    1302:	f0 93 95 01 	sts	0x0195, r31	; 0x800195 <codeNumber+0x1>
    1306:	e0 93 94 01 	sts	0x0194, r30	; 0x800194 <codeNumber>
		switch(codeNumber){
    130a:	e8 30       	cpi	r30, 0x08	; 8
    130c:	f1 05       	cpc	r31, r1
    130e:	08 f0       	brcs	.+2      	; 0x1312 <modeSelectCode+0x38>
    1310:	8f c0       	rjmp	.+286    	; 0x1430 <modeSelectCode+0x156>
    1312:	e8 5a       	subi	r30, 0xA8	; 168
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	ac c3       	rjmp	.+1880   	; 0x1a70 <__tablejump2__>
			case 0 :
				fndData[3] = fndTableChar['P' - 'A'];
    1318:	e5 ea       	ldi	r30, 0xA5	; 165
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	ae e0       	ldi	r26, 0x0E	; 14
    131e:	b1 e0       	ldi	r27, 0x01	; 1
    1320:	1f 96       	adiw	r26, 0x0f	; 15
    1322:	8c 91       	ld	r24, X
    1324:	1f 97       	sbiw	r26, 0x0f	; 15
    1326:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['O' - 'A'];
    1328:	1e 96       	adiw	r26, 0x0e	; 14
    132a:	8c 91       	ld	r24, X
    132c:	1e 97       	sbiw	r26, 0x0e	; 14
    132e:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['I' - 'A'];
    1330:	18 96       	adiw	r26, 0x08	; 8
    1332:	8c 91       	ld	r24, X
    1334:	18 97       	sbiw	r26, 0x08	; 8
    1336:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1338:	53 96       	adiw	r26, 0x13	; 19
    133a:	8c 91       	ld	r24, X
    133c:	80 83       	st	Z, r24
				break;
    133e:	7f c0       	rjmp	.+254    	; 0x143e <modeSelectCode+0x164>
			case 1 :
				fndData[3] = fndTableChar['F' - 'A'];
    1340:	e5 ea       	ldi	r30, 0xA5	; 165
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	ae e0       	ldi	r26, 0x0E	; 14
    1346:	b1 e0       	ldi	r27, 0x01	; 1
    1348:	15 96       	adiw	r26, 0x05	; 5
    134a:	8c 91       	ld	r24, X
    134c:	15 97       	sbiw	r26, 0x05	; 5
    134e:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    1350:	18 96       	adiw	r26, 0x08	; 8
    1352:	8c 91       	ld	r24, X
    1354:	18 97       	sbiw	r26, 0x08	; 8
    1356:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['L' - 'A'];
    1358:	1b 96       	adiw	r26, 0x0b	; 11
    135a:	8c 91       	ld	r24, X
    135c:	1b 97       	sbiw	r26, 0x0b	; 11
    135e:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1360:	53 96       	adiw	r26, 0x13	; 19
    1362:	8c 91       	ld	r24, X
    1364:	80 83       	st	Z, r24
				break;
    1366:	6b c0       	rjmp	.+214    	; 0x143e <modeSelectCode+0x164>
			case 2 :
				fndData[3] = fndTableChar['D' - 'A'];
    1368:	e5 ea       	ldi	r30, 0xA5	; 165
    136a:	f1 e0       	ldi	r31, 0x01	; 1
    136c:	ae e0       	ldi	r26, 0x0E	; 14
    136e:	b1 e0       	ldi	r27, 0x01	; 1
    1370:	13 96       	adiw	r26, 0x03	; 3
    1372:	8c 91       	ld	r24, X
    1374:	13 97       	sbiw	r26, 0x03	; 3
    1376:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['I' - 'A'];
    1378:	18 96       	adiw	r26, 0x08	; 8
    137a:	8c 91       	ld	r24, X
    137c:	18 97       	sbiw	r26, 0x08	; 8
    137e:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['V' - 'A'];
    1380:	55 96       	adiw	r26, 0x15	; 21
    1382:	9c 91       	ld	r25, X
    1384:	91 83       	std	Z+1, r25	; 0x01
				fndData[0] = fndTableChar['I' - 'A'];
    1386:	80 83       	st	Z, r24
				break;
    1388:	5a c0       	rjmp	.+180    	; 0x143e <modeSelectCode+0x164>
			case 3 :
				fndData[3] = fndTableChar['A' - 'A'];
    138a:	e5 ea       	ldi	r30, 0xA5	; 165
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	ae e0       	ldi	r26, 0x0E	; 14
    1390:	b1 e0       	ldi	r27, 0x01	; 1
    1392:	8c 91       	ld	r24, X
    1394:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['U' - 'A'];
    1396:	54 96       	adiw	r26, 0x14	; 20
    1398:	8c 91       	ld	r24, X
    139a:	54 97       	sbiw	r26, 0x14	; 20
    139c:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    139e:	53 96       	adiw	r26, 0x13	; 19
    13a0:	8c 91       	ld	r24, X
    13a2:	53 97       	sbiw	r26, 0x13	; 19
    13a4:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['O' - 'A'];
    13a6:	1e 96       	adiw	r26, 0x0e	; 14
    13a8:	8c 91       	ld	r24, X
    13aa:	80 83       	st	Z, r24
				break;
    13ac:	48 c0       	rjmp	.+144    	; 0x143e <modeSelectCode+0x164>
			case 4 :
				fndData[3] = fndTableChar['A' - 'A'];
    13ae:	ae e0       	ldi	r26, 0x0E	; 14
    13b0:	b1 e0       	ldi	r27, 0x01	; 1
    13b2:	8c 91       	ld	r24, X
    13b4:	e5 ea       	ldi	r30, 0xA5	; 165
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['L' - 'A'];
    13ba:	1b 96       	adiw	r26, 0x0b	; 11
    13bc:	9c 91       	ld	r25, X
    13be:	1b 97       	sbiw	r26, 0x0b	; 11
    13c0:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['A' - 'A'];
    13c2:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    13c4:	51 96       	adiw	r26, 0x11	; 17
    13c6:	8c 91       	ld	r24, X
    13c8:	80 83       	st	Z, r24
				break;
    13ca:	39 c0       	rjmp	.+114    	; 0x143e <modeSelectCode+0x164>
			case 5 :
				fndData[3] = fndTableChar['O' - 'A'];
    13cc:	e5 ea       	ldi	r30, 0xA5	; 165
    13ce:	f1 e0       	ldi	r31, 0x01	; 1
    13d0:	ae e0       	ldi	r26, 0x0E	; 14
    13d2:	b1 e0       	ldi	r27, 0x01	; 1
    13d4:	1e 96       	adiw	r26, 0x0e	; 14
    13d6:	8c 91       	ld	r24, X
    13d8:	1e 97       	sbiw	r26, 0x0e	; 14
    13da:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['V' - 'A'];
    13dc:	55 96       	adiw	r26, 0x15	; 21
    13de:	8c 91       	ld	r24, X
    13e0:	55 97       	sbiw	r26, 0x15	; 21
    13e2:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
    13e4:	14 96       	adiw	r26, 0x04	; 4
    13e6:	8c 91       	ld	r24, X
    13e8:	14 97       	sbiw	r26, 0x04	; 4
    13ea:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['R' - 'A'];
    13ec:	51 96       	adiw	r26, 0x11	; 17
    13ee:	8c 91       	ld	r24, X
    13f0:	80 83       	st	Z, r24
				break;
    13f2:	25 c0       	rjmp	.+74     	; 0x143e <modeSelectCode+0x164>
			case 6 :
				fndData[3] = fndTableChar['S' - 'A'];
    13f4:	e5 ea       	ldi	r30, 0xA5	; 165
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	ae e0       	ldi	r26, 0x0E	; 14
    13fa:	b1 e0       	ldi	r27, 0x01	; 1
    13fc:	52 96       	adiw	r26, 0x12	; 18
    13fe:	8c 91       	ld	r24, X
    1400:	52 97       	sbiw	r26, 0x12	; 18
    1402:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['E' - 'A'];
    1404:	14 96       	adiw	r26, 0x04	; 4
    1406:	8c 91       	ld	r24, X
    1408:	14 97       	sbiw	r26, 0x04	; 4
    140a:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['T' - 'A'];
    140c:	53 96       	adiw	r26, 0x13	; 19
    140e:	8c 91       	ld	r24, X
    1410:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['T' - 'A'];
    1412:	80 83       	st	Z, r24
				break;
    1414:	14 c0       	rjmp	.+40     	; 0x143e <modeSelectCode+0x164>
			case 7 :
				fndData[3] = 0x40;
    1416:	e5 ea       	ldi	r30, 0xA5	; 165
    1418:	f1 e0       	ldi	r31, 0x01	; 1
    141a:	80 e4       	ldi	r24, 0x40	; 64
    141c:	83 83       	std	Z+3, r24	; 0x03
				fndData[2] = fndTableChar['A' - 'A'];
    141e:	ae e0       	ldi	r26, 0x0E	; 14
    1420:	b1 e0       	ldi	r27, 0x01	; 1
    1422:	9c 91       	ld	r25, X
    1424:	92 83       	std	Z+2, r25	; 0x02
				fndData[1] = fndTableChar['D' - 'A'];
    1426:	13 96       	adiw	r26, 0x03	; 3
    1428:	9c 91       	ld	r25, X
				fndData[0] = 0x40;
    142a:	91 83       	std	Z+1, r25	; 0x01
				break;
    142c:	80 83       	st	Z, r24
			default:	
				enterModeSelectCode();			
    142e:	07 c0       	rjmp	.+14     	; 0x143e <modeSelectCode+0x164>
    1430:	b5 dd       	rcall	.-1174   	; 0xf9c <enterModeSelectCode>
				break;
    1432:	05 c0       	rjmp	.+10     	; 0x143e <modeSelectCode+0x164>
		enterModeRun();
		return 0;
	}
	
	if(cmd == BTN_UP){
		codeNumber = ( codeNumber > 7 ) ? 0 : codeNumber +1;
    1434:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <codeNumber+0x1>
    1438:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <codeNumber>
    143c:	6d cf       	rjmp	.-294    	; 0x1318 <modeSelectCode+0x3e>

	if(cmd == BTN_LEFT){
		return 0;
	}
	return 0;		
}
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret

00001444 <enterModeError>:
	return 0;
}

void enterModeError(void)
{
	machineState = MODE_ERROR;
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <machineState>
	fndData[3] = fndTableChar['E' - 'A'];
    144a:	e5 ea       	ldi	r30, 0xA5	; 165
    144c:	f1 e0       	ldi	r31, 0x01	; 1
    144e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <fndTableChar+0x4>
    1452:	83 83       	std	Z+3, r24	; 0x03
	fndData[2] = 0x40;
    1454:	80 e4       	ldi	r24, 0x40	; 64
    1456:	82 83       	std	Z+2, r24	; 0x02
	fndData[1] = fndTableNum[0];
    1458:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fndTableNum>
    145c:	81 83       	std	Z+1, r24	; 0x01
	fndData[0] = fndTableNum[tripNumber];
    145e:	a0 91 a3 01 	lds	r26, 0x01A3	; 0x8001a3 <tripNumber>
    1462:	b0 91 a4 01 	lds	r27, 0x01A4	; 0x8001a4 <tripNumber+0x1>
    1466:	ac 5f       	subi	r26, 0xFC	; 252
    1468:	be 4f       	sbci	r27, 0xFE	; 254
    146a:	8c 91       	ld	r24, X
    146c:	80 83       	st	Z, r24
	blinkCmdFlag = 0x0f;	//
    146e:	8f e0       	ldi	r24, 0x0F	; 15
    1470:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    1474:	08 95       	ret

00001476 <modeChangeCode>:

int modeChangeCode(uint8_t cmd)
{
	int16_t tmp;
	
	if(cmd == BTN_ENTER){
    1476:	8f 37       	cpi	r24, 0x7F	; 127
    1478:	09 f0       	breq	.+2      	; 0x147c <modeChangeCode+0x6>
    147a:	5c c0       	rjmp	.+184    	; 0x1534 <modeChangeCode+0xbe>
		if( codeNumber == 6 ) {
    147c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <codeNumber>
    1480:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <codeNumber+0x1>
    1484:	86 30       	cpi	r24, 0x06	; 6
    1486:	91 05       	cpc	r25, r1
    1488:	61 f5       	brne	.+88     	; 0x14e2 <modeChangeCode+0x6c>
			tmp = tmpCodeData - codeAdcZero;
    148a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    148e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    1492:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <codeAdcZero>
    1496:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <codeAdcZero+0x1>
    149a:	82 1b       	sub	r24, r18
    149c:	93 0b       	sbc	r25, r19
			if(tmp < 0 ) tmp = - tmp;
			if( tmp < 20 ){
    149e:	9c 01       	movw	r18, r24
    14a0:	22 f4       	brpl	.+8      	; 0x14aa <modeChangeCode+0x34>
    14a2:	22 27       	eor	r18, r18
    14a4:	33 27       	eor	r19, r19
    14a6:	28 1b       	sub	r18, r24
    14a8:	39 0b       	sbc	r19, r25
    14aa:	24 31       	cpi	r18, 0x14	; 20
    14ac:	31 05       	cpc	r19, r1
    14ae:	44 f4       	brge	.+16     	; 0x14c0 <modeChangeCode+0x4a>
				tripNumber = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <tripNumber+0x1>
    14b8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <tripNumber>
				enterModeError();
    14bc:	c3 df       	rcall	.-122    	; 0x1444 <enterModeError>
    14be:	c0 c1       	rjmp	.+896    	; 0x1840 <modeChangeCode+0x3ca>
			} else if (( adcWeight / 16 ) > 1000 ){
    14c0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <adcWeight>
    14c4:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <adcWeight+0x1>
    14c8:	80 39       	cpi	r24, 0x90	; 144
    14ca:	9e 43       	sbci	r25, 0x3E	; 62
    14cc:	44 f0       	brlt	.+16     	; 0x14de <modeChangeCode+0x68>
				tripNumber = 2;
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <tripNumber+0x1>
    14d6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <tripNumber>
				enterModeError();				
    14da:	b4 df       	rcall	.-152    	; 0x1444 <enterModeError>
			}
			else  enterModePassWord();
    14dc:	b1 c1       	rjmp	.+866    	; 0x1840 <modeChangeCode+0x3ca>
    14de:	41 dd       	rcall	.-1406   	; 0xf62 <enterModePassWord>
    14e0:	af c1       	rjmp	.+862    	; 0x1840 <modeChangeCode+0x3ca>
		} else if(codeNumber == 3){
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	f1 f4       	brne	.+60     	; 0x1524 <modeChangeCode+0xae>
			saveCode(codeNumber,tmpCodeData);
    14e8:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <tmpCodeData>
    14ec:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <tmpCodeData+0x1>
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
			saveCode(9,adcWeight / 16);
    14f8:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <adcWeight>
    14fc:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <adcWeight+0x1>
    1500:	77 23       	and	r23, r23
    1502:	14 f4       	brge	.+4      	; 0x1508 <modeChangeCode+0x92>
    1504:	61 5f       	subi	r22, 0xF1	; 241
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	75 95       	asr	r23
    150a:	67 95       	ror	r22
    150c:	75 95       	asr	r23
    150e:	67 95       	ror	r22
    1510:	75 95       	asr	r23
    1512:	67 95       	ror	r22
    1514:	75 95       	asr	r23
    1516:	67 95       	ror	r22
    1518:	89 e0       	ldi	r24, 0x09	; 9
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
			enterModeRun();			
    1520:	16 dd       	rcall	.-1492   	; 0xf4e <enterModeRun>
    1522:	8e c1       	rjmp	.+796    	; 0x1840 <modeChangeCode+0x3ca>
		} else {
			saveCode(codeNumber,tmpCodeData);
    1524:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <tmpCodeData>
    1528:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <tmpCodeData+0x1>
    152c:	0e 94 ed 00 	call	0x1da	; 0x1da <saveCode>
			enterModeRun();
    1530:	0e dd       	rcall	.-1508   	; 0xf4e <enterModeRun>
		}
		return 0;
	}
	
	if(cmd == BTN_CANCEL){
    1532:	86 c1       	rjmp	.+780    	; 0x1840 <modeChangeCode+0x3ca>
    1534:	8f 3b       	cpi	r24, 0xBF	; 191
		enterModeRun();
    1536:	11 f4       	brne	.+4      	; 0x153c <modeChangeCode+0xc6>
    1538:	0a dd       	rcall	.-1516   	; 0xf4e <enterModeRun>
		return 0;
    153a:	82 c1       	rjmp	.+772    	; 0x1840 <modeChangeCode+0x3ca>
	}

	if(codeNumber == 7)	{
    153c:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <codeNumber>
    1540:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <codeNumber+0x1>
    1544:	27 30       	cpi	r18, 0x07	; 7
    1546:	31 05       	cpc	r19, r1
		displayNumber(adcWeightIn);
    1548:	31 f4       	brne	.+12     	; 0x1556 <modeChangeCode+0xe0>
    154a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <adcWeightIn>
    154e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <adcWeightIn+0x1>
    1552:	c5 da       	rcall	.-2678   	; 0xade <displayNumber>
		return 0;
    1554:	75 c1       	rjmp	.+746    	; 0x1840 <modeChangeCode+0x3ca>
	}

	if(cmd == BTN_UP){
    1556:	8f 3e       	cpi	r24, 0xEF	; 239
    1558:	09 f0       	breq	.+2      	; 0x155c <modeChangeCode+0xe6>
    155a:	fa c0       	rjmp	.+500    	; 0x1750 <modeChangeCode+0x2da>
		switch(codeNumber){
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <modeChangeCode+0xee>
    1562:	58 c0       	rjmp	.+176    	; 0x1614 <modeChangeCode+0x19e>
    1564:	44 f4       	brge	.+16     	; 0x1576 <modeChangeCode+0x100>
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	71 f0       	breq	.+28     	; 0x1588 <modeChangeCode+0x112>
    156c:	21 30       	cpi	r18, 0x01	; 1
    156e:	31 05       	cpc	r19, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <modeChangeCode+0xfe>
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <modeChangeCode+0x17c>
    1574:	ed c0       	rjmp	.+474    	; 0x1750 <modeChangeCode+0x2da>
    1576:	23 30       	cpi	r18, 0x03	; 3
    1578:	31 05       	cpc	r19, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <modeChangeCode+0x108>
    157c:	82 c0       	rjmp	.+260    	; 0x1682 <modeChangeCode+0x20c>
    157e:	27 30       	cpi	r18, 0x07	; 7
    1580:	31 05       	cpc	r19, r1
    1582:	0c f4       	brge	.+2      	; 0x1586 <modeChangeCode+0x110>
    1584:	ad c0       	rjmp	.+346    	; 0x16e0 <modeChangeCode+0x26a>
    1586:	e4 c0       	rjmp	.+456    	; 0x1750 <modeChangeCode+0x2da>
		case 0:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    1588:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    158c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	91 05       	cpc	r25, r1
    1594:	0c f0       	brlt	.+2      	; 0x1598 <modeChangeCode+0x122>
    1596:	44 c1       	rjmp	.+648    	; 0x1820 <modeChangeCode+0x3aa>
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    159e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	21 f4       	brne	.+8      	; 0x15ae <modeChangeCode+0x138>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    15ac:	14 c0       	rjmp	.+40     	; 0x15d6 <modeChangeCode+0x160>
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	21 f4       	brne	.+8      	; 0x15bc <modeChangeCode+0x146>
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <modeChangeCode+0x160>
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    15bc:	02 97       	sbiw	r24, 0x02	; 2
    15be:	21 f4       	brne	.+8      	; 0x15c8 <modeChangeCode+0x152>
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <modeChangeCode+0x160>
			else {
				tmpCodeData = 0;
    15c8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    15cc:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
				blinkCmdFlag = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
			}
			codePoint = tmpCodeData;
    15d6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    15da:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    15de:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <codePoint+0x1>
    15e2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <codePoint>
			displayWeight1(loadWeight);
    15e6:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
    15ea:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
    15ee:	10 d9       	rcall	.-3552   	; 0x810 <displayWeight1>
			//displayNumber(loadWeight);
			break;
    15f0:	27 c1       	rjmp	.+590    	; 0x1840 <modeChangeCode+0x3ca>
		case 1:
			tmpCodeData = ( tmpCodeData > 8 ) ? 0 : tmpCodeData + 1;
    15f2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    15f6:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    15fa:	89 30       	cpi	r24, 0x09	; 9
    15fc:	91 05       	cpc	r25, r1
    15fe:	14 f4       	brge	.+4      	; 0x1604 <modeChangeCode+0x18e>
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <modeChangeCode+0x192>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    160c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
			//displayWeight(tmpCodeData);
			displayNumber1(tmpCodeData);
    1610:	b7 d9       	rcall	.-3218   	; 0x980 <displayNumber1>
			break;
    1612:	16 c1       	rjmp	.+556    	; 0x1840 <modeChangeCode+0x3ca>
		case 2:
			switch(tmpCodeData){
    1614:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    1618:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	89 f0       	breq	.+34     	; 0x1644 <modeChangeCode+0x1ce>
    1622:	1c f4       	brge	.+6      	; 0x162a <modeChangeCode+0x1b4>
    1624:	89 2b       	or	r24, r25
    1626:	39 f0       	breq	.+14     	; 0x1636 <modeChangeCode+0x1c0>
    1628:	20 c0       	rjmp	.+64     	; 0x166a <modeChangeCode+0x1f4>
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	91 05       	cpc	r25, r1
    162e:	89 f0       	breq	.+34     	; 0x1652 <modeChangeCode+0x1dc>
    1630:	05 97       	sbiw	r24, 0x05	; 5
    1632:	b1 f0       	breq	.+44     	; 0x1660 <modeChangeCode+0x1ea>
    1634:	1a c0       	rjmp	.+52     	; 0x166a <modeChangeCode+0x1f4>
				case 0: tmpCodeData = 1; break;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    163e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
    1642:	19 c0       	rjmp	.+50     	; 0x1676 <modeChangeCode+0x200>
				case 1: tmpCodeData = 2; break;
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    164c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
    1650:	12 c0       	rjmp	.+36     	; 0x1676 <modeChangeCode+0x200>
				case 2: tmpCodeData = 5; break;
    1652:	85 e0       	ldi	r24, 0x05	; 5
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    165a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <modeChangeCode+0x200>
				case 5: tmpCodeData = 0; break;
    1660:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    1664:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <modeChangeCode+0x200>
				default: tmpCodeData = 1; break;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1672:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
			}
			displayNumber1(tmpCodeData);
    1676:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    167a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    167e:	80 d9       	rcall	.-3328   	; 0x980 <displayNumber1>
			break;
    1680:	df c0       	rjmp	.+446    	; 0x1840 <modeChangeCode+0x3ca>
		case 3:
			if(tmpCodeData){
    1682:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    1686:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    168a:	89 2b       	or	r24, r25
    168c:	91 f0       	breq	.+36     	; 0x16b2 <modeChangeCode+0x23c>
				tmpCodeData = 0;
    168e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    1692:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
				fndData[3] = 0x00;
    1696:	e5 ea       	ldi	r30, 0xA5	; 165
    1698:	f1 e0       	ldi	r31, 0x01	; 1
    169a:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['N' - 'A'];
    169c:	ae e0       	ldi	r26, 0x0E	; 14
    169e:	b1 e0       	ldi	r27, 0x01	; 1
    16a0:	1d 96       	adiw	r26, 0x0d	; 13
    16a2:	8c 91       	ld	r24, X
    16a4:	1d 97       	sbiw	r26, 0x0d	; 13
    16a6:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['O' - 'A'];
    16a8:	1e 96       	adiw	r26, 0x0e	; 14
    16aa:	8c 91       	ld	r24, X
    16ac:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = 0x00;
    16ae:	10 82       	st	Z, r1
    16b0:	c7 c0       	rjmp	.+398    	; 0x1840 <modeChangeCode+0x3ca>
			} else {
				tmpCodeData = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    16ba:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
				fndData[3] = 0x00;
    16be:	e5 ea       	ldi	r30, 0xA5	; 165
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	13 82       	std	Z+3, r1	; 0x03
				fndData[2] = fndTableChar['Y' - 'A'];
    16c4:	ae e0       	ldi	r26, 0x0E	; 14
    16c6:	b1 e0       	ldi	r27, 0x01	; 1
    16c8:	58 96       	adiw	r26, 0x18	; 24
    16ca:	8c 91       	ld	r24, X
    16cc:	58 97       	sbiw	r26, 0x18	; 24
    16ce:	82 83       	std	Z+2, r24	; 0x02
				fndData[1] = fndTableChar['E' - 'A'];
    16d0:	14 96       	adiw	r26, 0x04	; 4
    16d2:	8c 91       	ld	r24, X
    16d4:	14 97       	sbiw	r26, 0x04	; 4
    16d6:	81 83       	std	Z+1, r24	; 0x01
				fndData[0] = fndTableChar['S' - 'A'];
    16d8:	52 96       	adiw	r26, 0x12	; 18
    16da:	8c 91       	ld	r24, X
    16dc:	80 83       	st	Z, r24
    16de:	b0 c0       	rjmp	.+352    	; 0x1840 <modeChangeCode+0x3ca>
			}
			break;
		case 4:
		case 5:
		case 6:
			tmpFndData[editDigitPoint] = ( tmpFndData[editDigitPoint] > 8 ) ? 0 : tmpFndData[editDigitPoint] +1;
    16e0:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <editDigitPoint>
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	fc 01       	movw	r30, r24
    16e8:	eb 54       	subi	r30, 0x4B	; 75
    16ea:	fe 4f       	sbci	r31, 0xFE	; 254
    16ec:	20 81       	ld	r18, Z
    16ee:	29 30       	cpi	r18, 0x09	; 9
    16f0:	10 f4       	brcc	.+4      	; 0x16f6 <modeChangeCode+0x280>
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <modeChangeCode+0x282>
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	e5 eb       	ldi	r30, 0xB5	; 181
    16fa:	f1 e0       	ldi	r31, 0x01	; 1
    16fc:	dc 01       	movw	r26, r24
    16fe:	ab 54       	subi	r26, 0x4B	; 75
    1700:	be 4f       	sbci	r27, 0xFE	; 254
    1702:	2c 93       	st	X, r18
			tmpCodeData = tmpFndData[3] * 1000 +tmpFndData[2]*100 + tmpFndData[1] * 10 + tmpFndData[0];
    1704:	43 81       	ldd	r20, Z+3	; 0x03
    1706:	28 ee       	ldi	r18, 0xE8	; 232
    1708:	33 e0       	ldi	r19, 0x03	; 3
    170a:	42 9f       	mul	r20, r18
    170c:	c0 01       	movw	r24, r0
    170e:	43 9f       	mul	r20, r19
    1710:	90 0d       	add	r25, r0
    1712:	11 24       	eor	r1, r1
    1714:	22 81       	ldd	r18, Z+2	; 0x02
    1716:	34 e6       	ldi	r19, 0x64	; 100
    1718:	23 9f       	mul	r18, r19
    171a:	80 0d       	add	r24, r0
    171c:	91 1d       	adc	r25, r1
    171e:	11 24       	eor	r1, r1
    1720:	21 81       	ldd	r18, Z+1	; 0x01
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	44 0f       	add	r20, r20
    1728:	55 1f       	adc	r21, r21
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	24 0f       	add	r18, r20
    1738:	35 1f       	adc	r19, r21
    173a:	82 0f       	add	r24, r18
    173c:	93 1f       	adc	r25, r19
    173e:	20 81       	ld	r18, Z
    1740:	82 0f       	add	r24, r18
    1742:	91 1d       	adc	r25, r1
    1744:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1748:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
			displayWeight1(tmpCodeData);
    174c:	61 d8       	rcall	.-3902   	; 0x810 <displayWeight1>
			//displayNumber(tmpCodeData);
			break;
    174e:	78 c0       	rjmp	.+240    	; 0x1840 <modeChangeCode+0x3ca>
		}
	}

	if(cmd == BTN_LEFT){
    1750:	8f 3d       	cpi	r24, 0xDF	; 223
    1752:	09 f0       	breq	.+2      	; 0x1756 <modeChangeCode+0x2e0>
    1754:	75 c0       	rjmp	.+234    	; 0x1840 <modeChangeCode+0x3ca>
		switch(codeNumber){
    1756:	21 15       	cp	r18, r1
    1758:	31 05       	cpc	r19, r1
    175a:	41 f0       	breq	.+16     	; 0x176c <modeChangeCode+0x2f6>
    175c:	0c f4       	brge	.+2      	; 0x1760 <modeChangeCode+0x2ea>
    175e:	70 c0       	rjmp	.+224    	; 0x1840 <modeChangeCode+0x3ca>
    1760:	24 50       	subi	r18, 0x04	; 4
    1762:	31 09       	sbc	r19, r1
    1764:	23 30       	cpi	r18, 0x03	; 3
    1766:	31 05       	cpc	r19, r1
    1768:	b0 f1       	brcs	.+108    	; 0x17d6 <modeChangeCode+0x360>
    176a:	6a c0       	rjmp	.+212    	; 0x1840 <modeChangeCode+0x3ca>
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    176c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    1770:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    1774:	18 16       	cp	r1, r24
    1776:	19 06       	cpc	r1, r25
    1778:	0c f0       	brlt	.+2      	; 0x177c <modeChangeCode+0x306>
    177a:	57 c0       	rjmp	.+174    	; 0x182a <modeChangeCode+0x3b4>
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1782:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
			if(tmpCodeData == 0) blinkCmdFlag = 1;
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	21 f4       	brne	.+8      	; 0x1792 <modeChangeCode+0x31c>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <modeChangeCode+0x344>
			else if(tmpCodeData == 1) blinkCmdFlag = 2;
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	21 f4       	brne	.+8      	; 0x17a0 <modeChangeCode+0x32a>
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <modeChangeCode+0x344>
			else if(tmpCodeData == 2) blinkCmdFlag = 4;
    17a0:	02 97       	sbiw	r24, 0x02	; 2
    17a2:	21 f4       	brne	.+8      	; 0x17ac <modeChangeCode+0x336>
    17a4:	84 e0       	ldi	r24, 0x04	; 4
    17a6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <modeChangeCode+0x344>
			else {
				tmpCodeData = 0;
    17ac:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    17b0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
				blinkCmdFlag = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
			}
			codePoint = tmpCodeData;
    17ba:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    17be:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    17c2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <codePoint+0x1>
    17c6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <codePoint>
			displayWeight1(loadWeight);
    17ca:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <loadWeight>
    17ce:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <loadWeight+0x1>
    17d2:	1e d8       	rcall	.-4036   	; 0x810 <displayWeight1>
			//displayNumber(loadWeight);
			break;
    17d4:	35 c0       	rjmp	.+106    	; 0x1840 <modeChangeCode+0x3ca>
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    17d6:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <editDigitPoint>
    17da:	88 23       	and	r24, r24
    17dc:	69 f1       	breq	.+90     	; 0x1838 <modeChangeCode+0x3c2>
    17de:	81 50       	subi	r24, 0x01	; 1
    17e0:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <editDigitPoint>
			switch(editDigitPoint){
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	51 f0       	breq	.+20     	; 0x17fc <modeChangeCode+0x386>
    17e8:	28 f0       	brcs	.+10     	; 0x17f4 <modeChangeCode+0x37e>
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	59 f0       	breq	.+22     	; 0x1804 <modeChangeCode+0x38e>
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	81 f4       	brne	.+32     	; 0x1812 <modeChangeCode+0x39c>
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <modeChangeCode+0x396>
				case 0 : blinkCmdFlag = 0x01; break;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <modeChangeCode+0x39c>
				case 1 : blinkCmdFlag = 0x02; break;
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    1802:	07 c0       	rjmp	.+14     	; 0x1812 <modeChangeCode+0x39c>
				case 2 : blinkCmdFlag = 0x04; break;
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <modeChangeCode+0x39c>
				case 3 : blinkCmdFlag = 0x08; break;
    180c:	88 e0       	ldi	r24, 0x08	; 8
    180e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <blinkCmdFlag>
			}	
			displayWeight1(tmpCodeData);
    1812:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <tmpCodeData>
    1816:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <tmpCodeData+0x1>
    181a:	0e 94 08 04 	call	0x810	; 0x810 <displayWeight1>
			// displayNumber(tmpCodeData);
			break;
    181e:	10 c0       	rjmp	.+32     	; 0x1840 <modeChangeCode+0x3ca>
	}

	if(cmd == BTN_UP){
		switch(codeNumber){
		case 0:
			tmpCodeData = ( tmpCodeData > 1 ) ? 0 : tmpCodeData + 1;
    1820:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <tmpCodeData+0x1>
    1824:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <tmpCodeData>
    1828:	be ce       	rjmp	.-644    	; 0x15a6 <modeChangeCode+0x130>
	}

	if(cmd == BTN_LEFT){
		switch(codeNumber){
		case 0:
			tmpCodeData = ( tmpCodeData < 1 ) ? 2 : tmpCodeData - 1;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmpCodeData+0x1>
    1832:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmpCodeData>
    1836:	b6 cf       	rjmp	.-148    	; 0x17a4 <modeChangeCode+0x32e>
			//displayNumber(loadWeight);
			break;
		case 4:
		case 5:
		case 6:
			editDigitPoint = ( editDigitPoint <= 0 ) ? 3 : editDigitPoint - 1;
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <editDigitPoint>
    183e:	e6 cf       	rjmp	.-52     	; 0x180c <modeChangeCode+0x396>
			// displayNumber(tmpCodeData);
			break;
		}
	}
	return 0;
}
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	08 95       	ret

00001846 <modeError>:
	blinkCmdFlag = 0x0f;	//
}

int modeError(uint8_t cmd)
{
	if(cmd == BTN_ENTER){
    1846:	8f 37       	cpi	r24, 0x7F	; 127
    1848:	09 f4       	brne	.+2      	; 0x184c <modeError+0x6>
		enterModeRun();
    184a:	81 db       	rcall	.-2302   	; 0xf4e <enterModeRun>
		return 0;
	}
	return 0;
}
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	08 95       	ret

00001852 <initUart>:
	for( i = 0 ; i < 9 ; i++){
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;	
}
    1852:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1856:	87 e6       	ldi	r24, 0x67	; 103
    1858:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    185c:	ed e9       	ldi	r30, 0x9D	; 157
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	86 60       	ori	r24, 0x06	; 6
    1864:	80 83       	st	Z, r24
    1866:	80 81       	ld	r24, Z
    1868:	87 7f       	andi	r24, 0xF7	; 247
    186a:	80 83       	st	Z, r24
    186c:	80 81       	ld	r24, Z
    186e:	8f 7c       	andi	r24, 0xCF	; 207
    1870:	80 83       	st	Z, r24
    1872:	88 e9       	ldi	r24, 0x98	; 152
    1874:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    1878:	08 95       	ret

0000187a <transmitByte>:
    187a:	eb e9       	ldi	r30, 0x9B	; 155
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	90 81       	ld	r25, Z
    1880:	95 ff       	sbrs	r25, 5
    1882:	fd cf       	rjmp	.-6      	; 0x187e <transmitByte+0x4>
    1884:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1888:	08 95       	ret

0000188a <__vector_30>:
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	0b b6       	in	r0, 0x3b	; 59
    1896:	0f 92       	push	r0
    1898:	2f 93       	push	r18
    189a:	3f 93       	push	r19
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    18ac:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <flagStx.1880>
    18b0:	81 11       	cpse	r24, r1
    18b2:	0a c0       	rjmp	.+20     	; 0x18c8 <__vector_30+0x3e>
    18b4:	92 30       	cpi	r25, 0x02	; 2
    18b6:	81 f5       	brne	.+96     	; 0x1918 <__vector_30+0x8e>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <gUartIndex.1879>
    18be:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <gUartRxBuffer>
    18c2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <flagStx.1880>
    18c6:	28 c0       	rjmp	.+80     	; 0x1918 <__vector_30+0x8e>
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	31 f5       	brne	.+76     	; 0x1918 <__vector_30+0x8e>
    18cc:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <gUartIndex.1879>
    18d0:	8e 0f       	add	r24, r30
    18d2:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <gUartIndex.1879>
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	e4 59       	subi	r30, 0x94	; 148
    18da:	fe 4f       	sbci	r31, 0xFE	; 254
    18dc:	90 83       	st	Z, r25
    18de:	93 30       	cpi	r25, 0x03	; 3
    18e0:	d9 f4       	brne	.+54     	; 0x1918 <__vector_30+0x8e>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <gflagConnect+0x1>
    18ea:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <gflagConnect>
    18ee:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <flagStx.1880>
    18f2:	ec e6       	ldi	r30, 0x6C	; 108
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	a6 e7       	ldi	r26, 0x76	; 118
    18f8:	b1 e0       	ldi	r27, 0x01	; 1
    18fa:	22 e7       	ldi	r18, 0x72	; 114
    18fc:	31 e0       	ldi	r19, 0x01	; 1
    18fe:	81 91       	ld	r24, Z+
    1900:	8d 93       	st	X+, r24
    1902:	e2 17       	cp	r30, r18
    1904:	f3 07       	cpc	r31, r19
    1906:	d9 f7       	brne	.-10     	; 0x18fe <__vector_30+0x74>
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <i.1877+0x1>
    1910:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <i.1877>
    1914:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <gUartIndex.1879>
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0b be       	out	0x3b, r0	; 59
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <sendToLargeFnd>:

void sendToLargeFnd( )
{
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29

	int i;
	char retVal[10]={0};

	RS485_TX_EN;
    193e:	df 9a       	sbi	0x1b, 7	; 27

	gUartTxBuffer[0] = 0xAA;
    1940:	e6 e7       	ldi	r30, 0x76	; 118
    1942:	f1 e0       	ldi	r31, 0x01	; 1
    1944:	8a ea       	ldi	r24, 0xAA	; 170
    1946:	80 83       	st	Z, r24
	gUartTxBuffer[1] = 0x09;	
    1948:	89 e0       	ldi	r24, 0x09	; 9
    194a:	81 83       	std	Z+1, r24	; 0x01

	// toAscii(loadWeight,codePoint, retVal);
	if( loadWeight < 0){
    194c:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <loadWeight>
    1950:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <loadWeight+0x1>
    1954:	33 23       	and	r19, r19
    1956:	3c f4       	brge	.+14     	; 0x1966 <sendToLargeFnd+0x30>
		gUartTxBuffer[2] = retVal[0];
    1958:	12 82       	std	Z+2, r1	; 0x02
		gUartTxBuffer[3] = retVal[1];
    195a:	13 82       	std	Z+3, r1	; 0x03
		gUartTxBuffer[4] = retVal[2];
    195c:	14 82       	std	Z+4, r1	; 0x04
		gUartTxBuffer[5] = retVal[3];
    195e:	15 82       	std	Z+5, r1	; 0x05
		gUartTxBuffer[7] = 0xbb;
    1960:	8b eb       	ldi	r24, 0xBB	; 187
    1962:	87 83       	std	Z+7, r24	; 0x07
    1964:	1a c0       	rjmp	.+52     	; 0x199a <sendToLargeFnd+0x64>
	} else {
		gUartTxBuffer[2] = loadWeight/1000;
    1966:	e6 e7       	ldi	r30, 0x76	; 118
    1968:	f1 e0       	ldi	r31, 0x01	; 1
    196a:	c9 01       	movw	r24, r18
    196c:	68 ee       	ldi	r22, 0xE8	; 232
    196e:	73 e0       	ldi	r23, 0x03	; 3
    1970:	50 d0       	rcall	.+160    	; 0x1a12 <__divmodhi4>
    1972:	62 83       	std	Z+2, r22	; 0x02
		gUartTxBuffer[3] = (loadWeight%1000)/100;
    1974:	c4 e6       	ldi	r28, 0x64	; 100
    1976:	d0 e0       	ldi	r29, 0x00	; 0
    1978:	be 01       	movw	r22, r28
    197a:	4b d0       	rcall	.+150    	; 0x1a12 <__divmodhi4>
    197c:	63 83       	std	Z+3, r22	; 0x03
		gUartTxBuffer[4] = (loadWeight%100)/10;
    197e:	c9 01       	movw	r24, r18
    1980:	be 01       	movw	r22, r28
    1982:	47 d0       	rcall	.+142    	; 0x1a12 <__divmodhi4>
    1984:	ca e0       	ldi	r28, 0x0A	; 10
    1986:	d0 e0       	ldi	r29, 0x00	; 0
    1988:	be 01       	movw	r22, r28
    198a:	43 d0       	rcall	.+134    	; 0x1a12 <__divmodhi4>
    198c:	64 83       	std	Z+4, r22	; 0x04
		gUartTxBuffer[5] = loadWeight%10;
    198e:	c9 01       	movw	r24, r18
    1990:	be 01       	movw	r22, r28
    1992:	3f d0       	rcall	.+126    	; 0x1a12 <__divmodhi4>
    1994:	85 83       	std	Z+5, r24	; 0x05
    1996:	8b eb       	ldi	r24, 0xBB	; 187
		gUartTxBuffer[7] = 0xbb;
    1998:	87 83       	std	Z+7, r24	; 0x07
    199a:	8f e5       	ldi	r24, 0x5F	; 95
    199c:	9d e6       	ldi	r25, 0x6D	; 109
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <sendToLargeFnd+0x68>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <sendToLargeFnd+0x6e>
    19a4:	00 00       	nop
    19a6:	c6 e7       	ldi	r28, 0x76	; 118
    19a8:	d1 e0       	ldi	r29, 0x01	; 1
    19aa:	0e e7       	ldi	r16, 0x7E	; 126
    19ac:	11 e0       	ldi	r17, 0x01	; 1
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
		transmitByte( gUartTxBuffer[i]);
    19ae:	89 91       	ld	r24, Y+
    19b0:	64 df       	rcall	.-312    	; 0x187a <transmitByte>
    19b2:	c0 17       	cp	r28, r16
		gUartTxBuffer[4] = (loadWeight%100)/10;
		gUartTxBuffer[5] = loadWeight%10;
		gUartTxBuffer[7] = 0xbb;
	}
	_delay_ms(7);
	for( i = 0 ; i < 8 ; i++){
    19b4:	d1 07       	cpc	r29, r17
    19b6:	d9 f7       	brne	.-10     	; 0x19ae <sendToLargeFnd+0x78>
    19b8:	8f e3       	ldi	r24, 0x3F	; 63
    19ba:	9c e9       	ldi	r25, 0x9C	; 156
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <sendToLargeFnd+0x86>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <sendToLargeFnd+0x8c>
    19c2:	00 00       	nop
    19c4:	df 98       	cbi	0x1b, 7	; 27
		transmitByte( gUartTxBuffer[i]);
	}
	_delay_ms(10);
	RS485_RX_EN;
    19c6:	df 91       	pop	r29
}
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <sciCommandProc>:
    19d0:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <startCount.1910>
void sciCommandProc()
{
	static uint32_t startCount=0;

	
	if( elaspMsecTime(startCount) > 500 ){
    19d4:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <startCount.1910+0x1>
    19d8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <startCount.1910+0x2>
    19dc:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <startCount.1910+0x3>
    19e0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <elaspMsecTime>
    19e4:	65 3f       	cpi	r22, 0xF5	; 245
    19e6:	71 40       	sbci	r23, 0x01	; 1
    19e8:	81 05       	cpc	r24, r1
    19ea:	91 05       	cpc	r25, r1
    19ec:	88 f0       	brcs	.+34     	; 0x1a10 <sciCommandProc+0x40>
		startCount = timerCounter2;
    19ee:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerCounter2>
    19f2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerCounter2+0x1>
    19f6:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <timerCounter2+0x2>
    19fa:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <timerCounter2+0x3>
    19fe:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <startCount.1910>
    1a02:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <startCount.1910+0x1>
    1a06:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <startCount.1910+0x2>
    1a0a:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <startCount.1910+0x3>
		sendToLargeFnd( );
    1a0e:	93 cf       	rjmp	.-218    	; 0x1936 <sendToLargeFnd>
    1a10:	08 95       	ret

00001a12 <__divmodhi4>:
    1a12:	97 fb       	bst	r25, 7
    1a14:	07 2e       	mov	r0, r23
    1a16:	16 f4       	brtc	.+4      	; 0x1a1c <__divmodhi4+0xa>
    1a18:	00 94       	com	r0
    1a1a:	06 d0       	rcall	.+12     	; 0x1a28 <__divmodhi4_neg1>
    1a1c:	77 fd       	sbrc	r23, 7
    1a1e:	08 d0       	rcall	.+16     	; 0x1a30 <__divmodhi4_neg2>
    1a20:	36 d0       	rcall	.+108    	; 0x1a8e <__udivmodhi4>
    1a22:	07 fc       	sbrc	r0, 7
    1a24:	05 d0       	rcall	.+10     	; 0x1a30 <__divmodhi4_neg2>
    1a26:	3e f4       	brtc	.+14     	; 0x1a36 <__divmodhi4_exit>

00001a28 <__divmodhi4_neg1>:
    1a28:	90 95       	com	r25
    1a2a:	81 95       	neg	r24
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	08 95       	ret

00001a30 <__divmodhi4_neg2>:
    1a30:	70 95       	com	r23
    1a32:	61 95       	neg	r22
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255

00001a36 <__divmodhi4_exit>:
    1a36:	08 95       	ret

00001a38 <__divmodsi4>:
    1a38:	05 2e       	mov	r0, r21
    1a3a:	97 fb       	bst	r25, 7
    1a3c:	16 f4       	brtc	.+4      	; 0x1a42 <__divmodsi4+0xa>
    1a3e:	00 94       	com	r0
    1a40:	0f d0       	rcall	.+30     	; 0x1a60 <__negsi2>
    1a42:	57 fd       	sbrc	r21, 7
    1a44:	05 d0       	rcall	.+10     	; 0x1a50 <__divmodsi4_neg2>
    1a46:	37 d0       	rcall	.+110    	; 0x1ab6 <__udivmodsi4>
    1a48:	07 fc       	sbrc	r0, 7
    1a4a:	02 d0       	rcall	.+4      	; 0x1a50 <__divmodsi4_neg2>
    1a4c:	46 f4       	brtc	.+16     	; 0x1a5e <__divmodsi4_exit>
    1a4e:	08 c0       	rjmp	.+16     	; 0x1a60 <__negsi2>

00001a50 <__divmodsi4_neg2>:
    1a50:	50 95       	com	r21
    1a52:	40 95       	com	r20
    1a54:	30 95       	com	r19
    1a56:	21 95       	neg	r18
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a5c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a5e <__divmodsi4_exit>:
    1a5e:	08 95       	ret

00001a60 <__negsi2>:
    1a60:	90 95       	com	r25
    1a62:	80 95       	com	r24
    1a64:	70 95       	com	r23
    1a66:	61 95       	neg	r22
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__tablejump2__>:
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	00 24       	eor	r0, r0
    1a76:	00 1c       	adc	r0, r0
    1a78:	0b be       	out	0x3b, r0	; 59
    1a7a:	07 90       	elpm	r0, Z+
    1a7c:	f6 91       	elpm	r31, Z
    1a7e:	e0 2d       	mov	r30, r0
    1a80:	09 94       	ijmp

00001a82 <__mulshisi3>:
    1a82:	b7 ff       	sbrs	r27, 7
    1a84:	3a c0       	rjmp	.+116    	; 0x1afa <__muluhisi3>

00001a86 <__mulohisi3>:
    1a86:	39 d0       	rcall	.+114    	; 0x1afa <__muluhisi3>
    1a88:	82 1b       	sub	r24, r18
    1a8a:	93 0b       	sbc	r25, r19
    1a8c:	08 95       	ret

00001a8e <__udivmodhi4>:
    1a8e:	aa 1b       	sub	r26, r26
    1a90:	bb 1b       	sub	r27, r27
    1a92:	51 e1       	ldi	r21, 0x11	; 17
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <__udivmodhi4_ep>

00001a96 <__udivmodhi4_loop>:
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	a6 17       	cp	r26, r22
    1a9c:	b7 07       	cpc	r27, r23
    1a9e:	10 f0       	brcs	.+4      	; 0x1aa4 <__udivmodhi4_ep>
    1aa0:	a6 1b       	sub	r26, r22
    1aa2:	b7 0b       	sbc	r27, r23

00001aa4 <__udivmodhi4_ep>:
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	5a 95       	dec	r21
    1aaa:	a9 f7       	brne	.-22     	; 0x1a96 <__udivmodhi4_loop>
    1aac:	80 95       	com	r24
    1aae:	90 95       	com	r25
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	08 95       	ret

00001ab6 <__udivmodsi4>:
    1ab6:	a1 e2       	ldi	r26, 0x21	; 33
    1ab8:	1a 2e       	mov	r1, r26
    1aba:	aa 1b       	sub	r26, r26
    1abc:	bb 1b       	sub	r27, r27
    1abe:	fd 01       	movw	r30, r26
    1ac0:	0d c0       	rjmp	.+26     	; 0x1adc <__udivmodsi4_ep>

00001ac2 <__udivmodsi4_loop>:
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	ee 1f       	adc	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	a2 17       	cp	r26, r18
    1acc:	b3 07       	cpc	r27, r19
    1ace:	e4 07       	cpc	r30, r20
    1ad0:	f5 07       	cpc	r31, r21
    1ad2:	20 f0       	brcs	.+8      	; 0x1adc <__udivmodsi4_ep>
    1ad4:	a2 1b       	sub	r26, r18
    1ad6:	b3 0b       	sbc	r27, r19
    1ad8:	e4 0b       	sbc	r30, r20
    1ada:	f5 0b       	sbc	r31, r21

00001adc <__udivmodsi4_ep>:
    1adc:	66 1f       	adc	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	1a 94       	dec	r1
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <__udivmodsi4_loop>
    1ae8:	60 95       	com	r22
    1aea:	70 95       	com	r23
    1aec:	80 95       	com	r24
    1aee:	90 95       	com	r25
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	bd 01       	movw	r22, r26
    1af6:	cf 01       	movw	r24, r30
    1af8:	08 95       	ret

00001afa <__muluhisi3>:
    1afa:	09 d0       	rcall	.+18     	; 0x1b0e <__umulhisi3>
    1afc:	a5 9f       	mul	r26, r21
    1afe:	90 0d       	add	r25, r0
    1b00:	b4 9f       	mul	r27, r20
    1b02:	90 0d       	add	r25, r0
    1b04:	a4 9f       	mul	r26, r20
    1b06:	80 0d       	add	r24, r0
    1b08:	91 1d       	adc	r25, r1
    1b0a:	11 24       	eor	r1, r1
    1b0c:	08 95       	ret

00001b0e <__umulhisi3>:
    1b0e:	a2 9f       	mul	r26, r18
    1b10:	b0 01       	movw	r22, r0
    1b12:	b3 9f       	mul	r27, r19
    1b14:	c0 01       	movw	r24, r0
    1b16:	a3 9f       	mul	r26, r19
    1b18:	70 0d       	add	r23, r0
    1b1a:	81 1d       	adc	r24, r1
    1b1c:	11 24       	eor	r1, r1
    1b1e:	91 1d       	adc	r25, r1
    1b20:	b2 9f       	mul	r27, r18
    1b22:	70 0d       	add	r23, r0
    1b24:	81 1d       	adc	r24, r1
    1b26:	11 24       	eor	r1, r1
    1b28:	91 1d       	adc	r25, r1
    1b2a:	08 95       	ret

00001b2c <_exit>:
    1b2c:	f8 94       	cli

00001b2e <__stop_program>:
    1b2e:	ff cf       	rjmp	.-2      	; 0x1b2e <__stop_program>
